{
  
    
        "post0": {
            "title": "Day 3",
            "content": "Squashing Bugs and New Ideas . After writing my daily post yesterday, I ended up working on making a quiz of my own (since it was listed under “Hacks” in the Python quiz page) and failed to make it work correctly. Because I did not understand the “input” Python function, all answers, correct or not, reacted as if they were incorrect. . With slightly more Python knowledge, I went to bed that night knowing I could definitely improve my old random number generator from Monday. So… . The Python Quiz . At first, yesterday, I started making a survey without even knowing it was a potential Hack for the week. The whole joke was going to be that it said there were no right or wrong answers, but only certain responses were “correct.” Just a little goofy thing. I wasn’t able to create the semi-diverse range of responses that would be based on anticipated answers because I was pretty tunnel-visioned into what was provided in that page. Later, I decided to do some independent research. . I then saw the tip to make a quiz about Python functions and reworked the survey. Plagiar-inspired by the Python quiz’s defined “question_and_answer” and “question_and_response” functions, I used the same basic template to make my own quiz that’s just a bit more personal. I decided to express my icnreasing fluency by asking for the user’s name (which is reused throughout the quiz), giving a status check halfway through the quiz, and determining whether or not the user failed based on their score. As was mentioned in the Hacks, I also used math to calculate the score percentage based on the ratio of correct answers to questions. . (There’s also a little Easter egg for people who put “Drew” as their names and do well on the quiz. Only blog readers and cheaters can know…) . You can actually go take this quiz right now! All the questions are about basic Python functions. Hopefully the question phrasing is clear enough. Just make sure not to cheat by looking at the correct answers through the code directly… . The Random Number Generator . My random number generator can now be reset and retried as many times as the user wants. I decided, since I gave Python a defined identity the first time around, I would really lean into it by giving his dialogue a strange, quirky style. Like the first time, I also kept the option to generate a second random number for the user to get lucky. . However, this time, Python recognizes if the second generated number is the same as the first. As he says, he’ll share a secret with you if you manage to generate the same number twice…and no peeking in the code! . I even used some more complex math mixed with ‘if’ and ‘and’ functions to make Python give a special response if the two numbers are relatively close to each other, but not quite the same. . Have fun with that! You can access it right now. . What’s Coming Up? . I’m really just gonna focus on completing Hacks tasks from the APCSP fastpages as well as the Python quiz. As the RNG machine may imply, I have spent a minute or two minutes or half an hour or more messing with code for my own amusement, but as a fairly busy weekend approaches, I’ll make sure to buckle down. . More to come! Stay tuned… .",
            "url": "https://mister-dew.github.io/realdrew/2022/08/24/day3.html",
            "relUrl": "/2022/08/24/day3.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(prompt) msg = input() print(msg) def question_with_response(prompt): print(prompt) msg = input() print(&quot;You said: &quot; + msg + &quot;.&quot;) return msg questions = 5 correct = 0 print(&quot;Hello! Welcome to Drew&#39;s super awesome (slightly plagiar-inspired) Python quiz!&quot;) print(&quot;You will be asked &quot; + str(questions) + &quot; questions about basic Python commands. All quiz responses should be in all lowercase letters.&quot;) print(&quot;Before we begin, what would you like me to call you?&quot;) bigboy = input() print(bigboy + &quot;? That&#39;s a cool name!&quot;) rsp = question_with_response(&quot;1. Let&#39;s start with the simplest function of all: how can you make Python display static text?&quot;) if rsp == &quot;print&quot;: print(&quot;That&#39;s right! Let&#39;s make things more interesting.&quot;) correct += 1 else: print(&quot;Not quite... The response we were looking for was &#39;print&#39;.&quot;) rsp = question_with_response(&quot;2. When using the &#39;if&#39; function to force a unique reaction for a specific scenario, which function lets you give a different response for ALL other answers?&quot;) if rsp == &quot;else&quot;: print(&quot;Good job! Let&#39;s continue...&quot;) correct += 1 else: print(&quot;Nope... Looks like you&#39;ll have to try something ELSE for that one.&quot;) rsp = question_with_response(&quot;3. This three-letter function can redefine a phrase to automate certain behaviors when used. What is it?&quot;) if rsp == &quot;def&quot;: print(&quot;Great job! Two more to go.&quot;) correct += 1 else: print(&quot;That&#39;s DEF-initely not it...&quot;) print(&quot;Let&#39;s see how you&#39;re doing so far, &quot; + bigboy + &quot;...&quot;) if correct == 3: print(&quot;Wow! 3/3! You&#39;re a natural. Let&#39;s get back to it.&quot;) elif correct == 2: print(&quot;2/3 isn&#39;t bad, you know. Get the next two right and you&#39;ll have a solid B minus!&quot;) elif correct == 1: print(&quot;1/3 isn&#39;t quite ideal, but it&#39;s better than nothing. Why not give these next two your best shot?&quot;) else: print(&quot;Really? None? ...I mean, you&#39;ve got two more chances to get some points on the board...&quot;) rsp = question_with_response(&quot;4. Which function allows the user to provide a custom response to a given prompt?&quot;) if rsp == &quot;input&quot;: print(&quot;That&#39;s right! You&#39;ve been using that the whole time, FYI.&quot;) correct += 1 else: print(&quot;Unfortunately, you seem to have INPUT an incorrect response.&quot;) rsp = question_with_response(&quot;5. The home stretch! To display a variable, for example, in printed static text, which symbol separates the variable from the rest of the quote?&quot;) if rsp == &quot;+&quot;: print(&quot;Nailed it!&quot;) correct += 1 elif rsp == &quot;plus&quot;: print(&quot;Nailed it!&quot;) correct += 1 else: print(&quot;Rough conclusion...definitely not a PLUS.&quot;) per_score = (correct / questions) * 100 print(bigboy + &quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;! That&#39;s &quot; + str(per_score) + &quot;%.&quot;) if correct &lt; 4: print(&quot;Too bad, though! You needed at least 4 out of 5 (80.0&quot; + &quot;%&quot; + &quot;) of the problems correct to pass. Why not reload and try again?&quot;) elif correct == 4: print(&quot;One mistake is perfectly okay! You still managed to pass this quiz. Congratulations!&quot;) else: print(&quot;You managed to pass with flying colors! A perfect score! Why didn&#39;t you make this quiz, then?&quot;) if bigboy == &quot;Drew&quot; and correct == 5: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) elif bigboy == &quot;drew&quot;: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) .",
            "url": "https://mister-dew.github.io/realdrew/2022/08/23/pythonworkweek1.html",
            "relUrl": "/2022/08/23/pythonworkweek1.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Day 2",
            "content": "Independent Endeavors . It takes a lot of investment in a class for me to go out of my way to apply my knowledge in ways not enforced by the teacher or class. Maybe computer science is my thing. . Research . Over summer, I spent some time looking over the things you could do with Python. One thing I always wanted to make for some strange reason was a random number generator. . From a mathematical standpoint, I have always been fascinated by the concept of probability. Given things like the butterfly effect and the way that various microscopic events and processes manipulate free will, even humans cannot truly create randomness. Unfortunately, computers really can’t either, but they can do their very best to replicate it. . I looked around on Google in my very minimal free time and found the “rand.integer” and “rand.range” commands. This is enough to create the basic RNG code I set out to. . What’s the point of a random number generator? . Ultimately, I want to use this RNG to add an element of unpredictability to my site. Maybe, after setting a variable, using “If” commands will allow me to create certain images, phrases, words, etc. based on which number is generated. Messing with which numbers do what and the possible range of generated numbers could make certain events more likely than others. . I also really like the concept of adding little Easter eggs for people who interact with the site. Maybe if you click on certain pages and get lucky, something goofy or unexpected appears. . There’s just a lot of fun to be had with unpredictability. . Current Obstacles . So I made a random number generator that works perfectly in the code of my website…but not on the website itself. . When the page reloads, the generated numbers stay the same. I think the only way I can make the generator work as intended is if I make a button to click and let it run a new generation. I don’t know how to do this at the moment, and a small amount of research hasn’t led to much. . More to come! .",
            "url": "https://mister-dew.github.io/realdrew/2022/08/23/day2.html",
            "relUrl": "/2022/08/23/day2.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Random Number Generator",
            "content": "Howdy there! I&#39;m Python. I can do lots of cool stuff. Before I can generate a random number for you, you have to give me permission to do so. May I generate a number for you? Okay! Your number is... 86! Now, I can&#39;t actually see what number I just gave you. I can generate another one, and there&#39;s a one in 256 chance that it&#39;s the same. I&#39;ll tell you a secret if it is. Do you want me to generate a new one? Cool! And my number is... 141! Welp! Looks like my secret is safe for now... .",
            "url": "https://mister-dew.github.io/realdrew/2022/08/22/randomnumber.html",
            "relUrl": "/2022/08/22/randomnumber.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "My Real First Post",
            "content": "The Early Trouble . The first days . Figuring it was homework to do so, I downloaded all of the programs listed in the Tools and Setup page and saved the fastpages part for the next day. This step would be a permanent help, even after the fastpages site had to be reset. . The problem that would lead to the loss of my admittedly little progress was evident from the very beginning: that Thurday, even after following all the steps listed in the first pull request, I had either forgotten to resolve the request or something had prevented me from doing so. Either way, by the next day, it seemed that there was no way to resolve the request, causing my website to look far less professional than other students’ I had seen. It’s surprising how much a lack of proper UI can make a site go from a 2022 professional business site to a 2008 fan site. . Showing off . I tried to make some bold and italicized text in my About Me section, but the site bug made it impossible for the link redirects to work. Headers worked on the home page but subheaders did not. A notebook post making use of the Python “print” command was created as well, but the same issue with the About Me page existed. . The Solution . Two words: Thanos snap. . Well, more accurately, none of my previous repository history had been deleted, but I did have to start the fastpages creation process from scration. . There’s a reason I called it a Thanos snap, though: the fastpages issues were competely separate from the rest of the work I had put into downloading the tools. This means that only the time I had put into the initial drew2 fastpages setup was a waste. That time was very quickly made up; setup took noticeably longer. . Now, everything looks perfect. Turns out the problem was, as implied earlier, pertaining to the unresolved pull request from the very beginning. An unresolvable issue was found in one of the Jupyter files (still not sure exacly what the deal was with that) but it doesn’t matter now, this site is pure and new and is brimming with potential. . Why not bring over the previous progress to this new site? . That would be because my old edits were mostly cries for help to the github gods to fix my broken website. It would be a little bit strange to have that on a perfectly sound, as-intended site. . Plus, with just this content, I already have a lot more done. I have a lot more progress to talk about and a lot of hindsight to document. Might as well start documentation from scratch along with the site. . Anticipations . It looks like we’ll expand upon our knowledge of Python this week. I’m exicted to use it to do funny things. . I’d really like to use a random number generator to make a page on my website which is different every time you load it. I’m not exactly sure how yet, but I’m sure it’s possible. Why not boost my aspirations? .",
            "url": "https://mister-dew.github.io/realdrew/2022/08/22/post1.html",
            "relUrl": "/2022/08/22/post1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mister-dew.github.io/realdrew/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mister-dew.github.io/realdrew/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Drew",
          "content": "Drew panicked over the course of four days because his fastpages website would not load correctly. Commits worked (vaguely) but it was difficult to present edits to pages which only showed 404 errors. . After starting from scratch, it seems like the website is good to go. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mister-dew.github.io/realdrew/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mister-dew.github.io/realdrew/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}