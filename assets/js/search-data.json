{
  
    
        "post0": {
            "title": "Boolean Expressions, Conditionals and Nested Conditionals Lesson Notes",
            "content": "3.5 Boolean Expresssions . Boolean expressions have two states, &quot;True&quot; and &quot;False&quot; (basically &quot;1&quot; and &quot;0&quot;). . Rational Operators . Operators ==, !=, &gt;, &lt;, &gt;=, and &lt;= are used to compare values. They can return true of false depending on the statement. They work with both integers and strings. . print(&quot;True:&quot;, 4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;, 5 &lt; 6) print(&quot;False:&quot;,7 &gt; 8) print(&quot;True:&quot;,3 == 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False&quot;,True == False) print(&quot;False:&quot;,[2,3,1] != [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt; [1,&#39;a&#39;]) . True: True True: True False: False True: True False: False True: True True: True False False False: False True: True False: False True: True . Logical Operators . Operators like &quot;and&quot;, &quot;or&quot;, or &quot;not&quot; can be used to assess the state of boolean operands. See their use below. . print(&quot;True:&quot;, True or False) print(&quot;False:&quot;, not True) print(&quot;True:&quot;, True and True) print(&quot;False:&quot;, not True) print(&quot;False:&quot;, True and False) print(&quot;True:&quot;, not False) . True: True False: False True: True False: False False: False True: True . 3.6 Conditionals . Conditionals only make certain things happen when conditions are met. This is most often seen with if/else statements. . Vocabulary . Copied from their blog. . Algorithm - A set of instructions that accomplish a task. . Selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. . If/Else Statements . if and else statements are the primary conditional statements. See their basic use below. . number = 3 # value that will affect true or false statement if number == 5: # if part determines if the statement is true or false compared to another part of the program print(&quot;Yes,&quot;, str(number), &quot;does equal 5.&quot;) else: #else part only executes if the if part is false print(&quot;No, &quot; + str(number) + &quot; does not equal 5.&quot;) . No, 3 does not equal 5. . As their blog says, solo if statements can be used as sort of interruptions when certain conditions are met. Here is there example. . progress = 0 while progress &lt; 100: print(str(progress) + &quot;%&quot;) if progress == 50: print(&quot;Half way there&quot;) progress = progress + 10 print(&quot;100%&quot; + &quot; Complete&quot;) . 0% 10% 20% 30% 40% 50% Half way there 60% 70% 80% 90% 100% Complete . 3.7 Nested Conditional Statements . Basically conditionals inside of conditional statements that make things happen on top of the other stuff. Vague, but it makes sense. . Examples . Here is the example provided by the group to show nested conditionals. . age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age &gt;= 18: print(&quot;You&#39;re 18 or older. Welcome to adulthood!&quot;) if isGraduated: print(&#39;Congratulations with your graduation!&#39;) if hasLicense: print(&#39;Happy driving!&#39;) . You&#39;re 18 or older. Welcome to adulthood! Happy driving! . Here&#39;s my take on the nested conditionals example. . year = 2022 if (year == 1776): print(&quot;The U.S. just declared independence, didn&#39;t they?&quot;) else: print(&quot;The U.S. has already gained independence, or perhaps doesn&#39;t exist...&quot;) if (year == 1848): print(&quot;Gold was just struck in California, wasn&#39;t it?&quot;) else: print(&quot;The Gold Rush is an afterthought, or perhaps hasn&#39;t yet happened...&quot;) if (year == 2022): print(&quot;Elon Musk bought Twitter not too long ago, didn&#39;t he?&quot;) else: print(&quot;Perhaps Elon Musk and Twitter do not yet exist, or are old news...&quot;) if (year == 3000): print(&quot;Flying cars have just been invented, haven&#39;t they?&quot;) else: print(&quot;You&#39;ll have to wait a bit longer for flying cars...&quot;) . The U.S. has already gained independence, or perhaps doesn&#39;t exist... The Gold Rush is an afterthought, or perhaps hasn&#39;t yet happened... Elon Musk bought Twitter not too long ago, didn&#39;t he? You&#39;ll have to wait a bit longer for flying cars... . Homework . Here is my take on the binary homework. . Hacks . System to repeat the user input if it is not within the valid range of 8-bit binary. . More conditionals with try and except . A Frontend version on top of the Python version. . def DecimalToBinary(input): if 0 &lt;= input &lt;= 255: pass else: print(int(input) + &quot;Intentional Error to Restart Loop&quot;) i = 7 binary = &quot;&quot; while i &gt;= 0: if input % (2**i) == input: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; input -= 2**i i -= 1 return binary # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;The reverse of 67 in binary is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) # input box def getUserInput(): try: userinp = int(input(&quot;Input an integer between 0 and 255.&quot;)) userbin = DecimalToBinary(userinp) print(&#39;&quot;&#39; + str(userinp) + &#39;&quot; in binary is &quot;&#39; + userbin + &#39;&quot;.&#39;) except: print(&quot;Invalid input.&quot;) getUserInput() getUserInput() . The reverse of 67 in binary is: 11000010 Invalid input. Invalid input. &#34;34&#34; in binary is &#34;00100010&#34;. . Here&#39;s the frontend version: . Convert to binary... . CONVERT . And here&#39;s the code behind it: . &lt;p style=&quot;font-family:&quot;&gt;Convert &lt;input id=&quot;bininput&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;0&quot; minlength=&quot;1&quot; maxlength=&quot;3&quot; max=&quot;255&quot; value=&quot;0&quot;&gt; to binary...&lt;/p&gt; &lt;button id=&quot;convertbtn&quot;&gt;CONVERT&lt;/button&gt; &lt;p id=&quot;output&quot;&gt;&lt;/p&gt; &lt;script&gt; console.log(&#39;initialized accurately&#39;) var opbox = document.getElementById(&quot;output&quot;); var convertbtn = document.getElementById(&quot;convertbtn&quot;); var inpbox = document.getElementById(&quot;bininput&quot;); function DecimalToBinary(parameter) { var input = Number(parameter); if (input &lt; 0) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; } else if (input &gt; 255) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; }; var i = 7; var binary = &quot;&quot;; while (i &gt;= 0) { if (input % (2**i) == input) { binary += &quot;0&quot;; i -= 1; } else { binary += &quot;1&quot;; input -= 2**i; i -= 1; }; }; return binary; } convertbtn.onclick = function() { console.log(&#39;pressed&#39;); var binconvert = DecimalToBinary(Number(inpbox.value)); if (binconvert == &quot;Invalid input.&quot;) { console.log(&#39;invalidinput&#39;) opbox.innerHTML = &quot;Invalid input.&quot;; } else { console.log(&#39;valid&#39;) opbox.innerHTML = String(Number(inpbox.value)) + &quot; in binary is &quot; + String(binconvert) + &quot;.&quot;; }; }; &lt;/script&gt; .",
            "url": "https://drewreed2005.github.io/realdrew/sections5-7notes/",
            "relUrl": "/sections5-7notes/",
            "date": " • Apr 14, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Calling and Developing Procedures Notes",
            "content": "What are procedures? . Procedure: a named group of programming instructions that may have parameters and return values . Parameters: input values of a procedure, specified by arguments . Arguments: specify the values of the parameters when a procedure is called . Modularity: separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality . Procedural Abstraction: providing a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . What are some other names for procedures?: function or method . Why are procedures effective?: Procedures allow certain series of algorithms and functions to be run more simply. They can put a set of complex actions under a distinct framework to be called upon later for ease of use. . Additional Notes . Calling Procedures (Python) . It&#39;s important to know what arguments and parameters are necessary when creating a procedure | You can call a procedure within other statements like &#39;print&#39; to show the return value | Procedures with return values can essentially be placed as variables representing whatever would be returned by the function (in most cases) | Some procedures do not return values, simply running to serve background purposes before ending | . Calling Procedures (JavaScript) . JavaScript uses function instead of def plus curly brace syntax | Below is an example (1) of a JavaScript function using an array: | . function plusMinus(arr) { var pos = 0; var neg = 0; var zero = 0; var length = arr.length; for (var i = 0; i &lt; arr.length; i++) { if (arr[i] &gt; 0) { pos += 1; } else if (arr[i] &lt; 0) { neg += 1; } else { zero += 1; } } console.log(&quot;There are &quot; + arr.length + &quot; total numbers&quot;); console.log(&quot;There are &quot; + pos + &quot; positive numbers&quot;); console.log(&quot;There are &quot; + neg + &quot; negative numbers&quot;); console.log(&quot;There are &quot; + zero + &quot; zeroes&quot;); } var array = [1, 1, 0 , -1, -1]; plusMinus(array); . There are 5 total numbers There are 2 positive numbers There are 2 negative numbers There are 1 zeroes . This creates an array based on the indexes of the array items | Here is the military time converter (example 2): | . function timeConversion(s) { var arr = s.slice(0,8).split(&#39;:&#39;); arr[0] = (s.indexOf(&#39;PM&#39;) &gt; -1) ? (arr[0] == 12 ? &#39;12&#39; : Number(arr[0]) + 12) : (arr[0] == 12 ? &#39;00&#39; : arr[0]); console.log(arr.join(&#39;:&#39;)); } var input = &quot;07:05:45PM&quot;; timeConversion(input); . 19:05:45 . Developing Procedures . Questions to ask yourself when developing procedures: . What am I going to name my procedure? (It should reflect the purpose of the code) | What parameters do I need? | What data would I need to take in to accomplish my goal? | Do I want my procedure to give a numerical value, or complete an action? | . Procedural abstraction is an important part of clarifying the purpose of various procedures. This promotes efficient collaboration. . According to the lesson, it is sometimes efficient to group multiple procedures into a single procedure, further abstracting and giving specific uses for possibly more general procedures. . Challenge 1 . I made the procedure and then called it within the print statement. . decimal = 7 def convertToBinary(n): if 0 &lt;= n &lt;= 255: #here&#39;s the program itself pass else: return &quot;Invalid input.&quot; #error if not valid for 8-bit binary i = 7 binary = &quot;&quot; while i &gt;= 0: if n % (2**i) == n: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; n -= 2**i i -= 1 return binary print(convertToBinary(decimal)) #this calls the function despite being in &#39;print&#39; . 00000111 . Challenge 2 . I created the findMax and findMin procedures and ran them with the numbers 4 and 3. I did this all in JavaScript for bonus points. . Optional Bonus (Hack) . See the bottom procedure findExtrema. It checks an array for its greatest and least values, then prints them in the console. . // Start by creating a procedure called findMax and set the parameters to numberA and numberB. // Within the procedure, write the code to determine which of the two parameters, numberA or numberB, is the larger value. Print that value. function findMax(numberA, numberB) { if (numberA !== numberB) { if (numberA &gt; numberB) { console.log(numberA); } else { console.log(numberB); }; } else { console.log(numberA, &quot;and&quot;, numberB, &quot;are equal&quot;) } } // Repeat the process, this time creating a procedure called findMin, which will print the parameter with a smaller value. function findMin(numberA, numberB) { if (numberA !== numberB) { if (numberA &gt; numberB) { console.log(numberB); } else { console.log(numberA); }; } else { console.log(numberA, &quot;and&quot;, numberB, &quot;are equal&quot;) } } // Call both functions so that the parameters numberA and numberB are given a value. var x = 4 var y = 3 findMax(x, y) findMin(x, y) // Optional bonus- create a procedure that can determine the minimum or maximum value out of more than two parameters. numarr = [3, 50, 20, 3134, 5555, 2, 73, 59] function findExtrema(array) { greatest = array[0] least = array[0] for (let i = 1; i &lt; array.length; i++) { if (array[i] &gt; greatest) {greatest = array[i]} if (array[i] &lt; least) {least = array[i]} }; console.log(&quot;The greatest is &quot; + String(greatest) + &quot;. The least is &quot; + String(least) + &quot;.&quot;) } findExtrema(numarr) . 4 3 The greatest is 5555. The least is 2. . Homework/Hacks . I did the &quot;APCSP&quot; to binary thing. The procedure is called charToBinary. It works by first using the procedure DecimalToBinary that I made to convert the decimal version of the given character (found through the innate ord Python function), and then appends it to a list of each of the characters. It then prints it. . The reason the output has a 0 in front of every 8-bit conversion is that the intended output is in 7-bit. . def DecimalToBinary(x): if 0 &lt;= x &lt;= 255: pass else: return(&quot;Error&quot;) i = 7 binary = &quot;&quot; while i &gt;= 0: if x % (2**i) == x: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; x -= 2**i i -= 1 return binary def charToBinary(x): binlist = [] for i in x: binlist.append(DecimalToBinary(ord(i))) print(str(x), &quot;in binary is:&quot;, binlist) # output is has an extra 0 at the front because it is in 8-bit binary, not 7-bit charToBinary(&quot;APCSP&quot;) . APCSP in binary is: [&#39;01000001&#39;, &#39;01010000&#39;, &#39;01000011&#39;, &#39;01010011&#39;, &#39;01010000&#39;] . Frontend Version with User Input . Here&#39;s a frontend version that lets you convert anything: . I would like to convert to binary. CONVERT . Nothing converted yet. . And here is the raw code for this version (including HTML to show IDs). . &lt;p&gt;I would like to convert &lt;input id=&quot;binaryinput&quot; style=&quot;text-align:left&quot; type=&quot;text&quot; minlength=&quot;1&quot; value=&quot;APCSP&quot;&gt; to binary. &lt;button id=&quot;convertbtn&quot;&gt;CONVERT&lt;/button&gt;&lt;br&gt;&lt;/p&gt; &lt;p id=&quot;binaryconversion&quot;&gt;Nothing converted yet.&lt;/p&gt; &lt;script&gt; var inpbox = document.getElementById(&quot;binaryinput&quot;); var opbox = document.getElementById(&quot;binaryconversion&quot;); var btn = document.getElementById(&quot;convertbtn&quot;); function DecimalToBinary(parameter) { var input = Number(parameter); if (input &lt; 0) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; } else if (input &gt; 255) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; }; var i = 7; var binary = &quot;&quot;; while (i &gt;= 0) { if (input % (2**i) == input) { binary += &quot;0&quot;; i -= 1; } else { binary += &quot;1&quot;; input -= 2**i; i -= 1; }; }; return binary; }; function stringToBinary(x) { var x = String(x); var binarr = []; for (i = 0; i &lt; x.length; i++) { binarr.push(DecimalToBinary(x.charCodeAt(i))); }; return binarr }; btn.onclick = function() { opbox.innerHTML = &#39;&quot;&#39; + String(inpbox.value) + &#39;&quot; in binary is [&#39; + String(stringToBinary(String(inpbox.value))) + &#39;].&#39;; }; &lt;/script&gt; .",
            "url": "https://drewreed2005.github.io/realdrew/sections12-13notes/",
            "relUrl": "/sections12-13notes/",
            "date": " • Apr 14, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Computers and Networks Work for Big Idea 4",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer . Processor GHz: 3.3 (3.3 GHz Dual-Core Intel Core i7) | Memory in GB: 16 (16 GB 2133 MHz LPDDR3) | Storage in GB: 251 GB of total Flash Storage (195 GB allocated to the Mac HD, 55.68 GB to BOOTCAMP) | OS: macOS Catalina version 10.15.7 (19H15) | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | . . Program File | Program Code | . . Processes | . . Ports | . These are communication endpoints in web servers that allow them to send and receive data from other sources. A single computer can run many different ports as long as they do not overlap, and they can be used to differentiate between different programs being run on the same computer. . Port 80 is usually used for HTTP traffic and port 443 for HTTPS traffic. . Data File | . . Inspect Running Code | Inspect Variables | . . Inspect running code: The process of analyzing and examining the source code of a program that is currently running to identify errors, optimize performance, or better understand how the program functions. . Inspect variables: The process of examining the values of variables that are being used by a program to identify issues or optimize performance. This can be done through debugging tools or other software that allows for real-time inspection of program variables. . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | . . Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . . Fault tolerance allows systems to complete tasks despite certain connections failing in the process. . Fault tolerance makes systems more reliable but it also requires a lot of resources and time if not balanced carefully. Non-fault-tolerant connections are shown in the black ink, an over-the-top fault tolerant version is in blue, and a balanced set of eight connections is marked in green. . Fault tolerance is also Satanic. . Video Examples . Example 1 . Example 2 . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot; computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://drewreed2005.github.io/realdrew/2023/04/05/bigidea4stuff.html",
            "relUrl": "/2023/04/05/bigidea4stuff.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Week 1 DVASS Tangibles - Drew Reed",
            "content": "Python Simulation Setup . Below is my progress on the Python blackjack simulation, which can be used as the basis for the rest of the lessons. . Card Class . I decided to use a class to define the cards and deck, since they&#39;d be easier to interact with using the other functions. . class Card: def __init__(self, suit, val): self.suit = suit self.val = val if val == 11: self.kind = &quot;Ace&quot; elif val == 12: self.kind = &quot;Jack&quot; elif val == 13: self.kind = &quot;Queen&quot; elif val == 14: self.kind = &quot;King&quot; else: self.kind = str(self.val) def show(self): return f&quot;{self.kind} of {self.suit}&quot; def ace_adj(self): if self.kind == &quot;Ace&quot;: self.val = 1 card = Card(&quot;Spades&quot;, 11) card.show() . &#39;Ace of Spades&#39; . Deck Class . Here is a class that is able to form itself full of cards and shuffle. . import random class Deck: def __init__(self): self.cards = [] self.build() def build(self): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): self.cards.append(Card(suit, val)) def show(self): card_disp = [card.show() for card in self.cards] return card_disp def shuffle(self): random.shuffle(self.cards) def draw_card(self): return self.cards.pop() deck = Deck() deck.shuffle() . Blackjack Game Procedures . Bringing the deck and the cards together, the code below simulates a game of blackjack. . For simplicity, there is no splitting with pairs or doubling down at the moment. I may add this later. . from IPython.display import clear_output as clr player_chips = 100 def game_start(): clr(wait=True) global player_hand #initializing hands and deck global dealer_hand global deck global p_bet deck = Deck() deck.shuffle() player_hand = [] dealer_hand = [] p_bet = bet(player_chips) #getting the player bet print(&quot;Initial draws:&quot;) #giving the initial draws d1 = hit(dealer_hand) print(f&quot;The dealer draws: {d1}&quot;) p1 = hit(player_hand) print(f&quot;You receive: {p1}&quot;) d2 = hit(dealer_hand) print(&quot;The dealer draws a face-down card...&quot;) p2 = hit(player_hand) print(f&quot;You receive: {p2}&quot;) if sum(player_hand) == 21: #instant player win on blackjack potentially if sum(dealer_hand) != 21: print(&quot;WOW! A blackjack! You win!&quot;) win(p_bet) play_again() return print(&quot;--&quot;) print(f&quot;Dealer&#39;s hand: {d1}, ???&quot;) player_turn() #once player turn finishes, the dealer turn occurs play_again() def bet(chips): print(f&quot;Current chips: {chips}&quot;) b = input(f&quot;How much would you like to bet? (Input an integer {str(player_chips)} or less.)&quot;) try: if int(b) &lt;= chips: return int(b) except: print(&quot;Invalid bet.&quot;) bet(chips) def sum(hand): sm = 0 for card in hand: if card.val &gt; 11: sm += 10 else: sm += card.val if sm &gt; 21: for card in hand: if card.val == 11: card.ace_adj() return sum(hand) return sm def hit(hand): res = deck.draw_card() if (res.val == 11) and (sum(hand) + 11 &gt; 21): #adjusting ace if it would break res.ace_adj() hand.append(res) return res.show() def hand_display(hand): disp_hand = [] for card in hand: disp_hand.append(card.show()) return &quot;, &quot;.join(disp_hand) def player_turn(): print(f&quot;Your hand: {hand_display(player_hand)}&quot;) if sum(player_hand) &gt; 21: print(&quot;You break! You lose.&quot;) lose(p_bet) return rsp = input(&quot;Would you like to hit (h) or stay (s)? (input either option)&quot;) if rsp == &quot;h&quot;: received = hit(player_hand) print(f&quot;You drew a {received}!&quot;) player_turn() elif rsp == &quot;s&quot;: print(&quot;You stand.&quot;) dealer_turn() else: print(&#39;Invalid input. Input &quot;h&quot; to hit or &quot;s&quot; to stand.&#39;) player_turn() def dealer_turn(): print(f&quot;Dealer&#39;s hand: {hand_display(dealer_hand)}&quot;) if sum(dealer_hand) &gt; 16: print(&quot;The dealer stays.&quot;) pass else: print(f&quot;The dealer draws: {hit(dealer_hand)}&quot;) if sum(dealer_hand) &gt; 21: print(&quot;The dealer breaks! You win.&quot;) win(p_bet) return dealer_turn() return if sum(player_hand) &gt; sum(dealer_hand): print(f&quot;Congratulations! You won with a hand worth {sum(player_hand)}!&quot;) win(p_bet) elif sum(dealer_hand) &gt; sum(player_hand): print(f&quot;Too bad! You lost to the dealer&#39;s hand, worth {sum(dealer_hand)}.&quot;) lose(p_bet) else: print(&quot;It&#39;s a push! You keep your bet.&quot;) return def win(bet): global player_chips player_chips += bet return def lose(bet): global player_chips player_chips -= bet return def play_again(): if player_chips != 0: pa = input(&#39;Would you like to play again? (Input &quot;y&quot; for yes and &quot;n&quot; for no.)&#39;) if pa.lower() == &quot;y&quot;: game_start() else: print(f&quot;You finished with {str(player_chips)} chips!&quot;) return else: print(&quot;You lost all of your chips! Better luck next time.&quot;) return game_start() . Current chips: 100 Initial draws: The dealer draws: 6 of Diamonds You receive: 5 of Spades The dealer draws a face-down card... You receive: Jack of Spades -- Dealer&#39;s hand: 6 of Diamonds, ??? Your hand: 5 of Spades, Jack of Spades You drew a 5 of Clubs! Your hand: 5 of Spades, Jack of Spades, 5 of Clubs You stand. Dealer&#39;s hand: 6 of Diamonds, 4 of Clubs The dealer draws: 9 of Clubs Dealer&#39;s hand: 6 of Diamonds, 4 of Clubs, 9 of Clubs The dealer stays. Congratulations! You won with a hand worth 20! You finished with 107 chips! . Tentative Lesson Plan . My lesson will mainly focus on these topics: . Lists (Review) | Iteration (Review) | Random Values | Simulations | . The lesson will be structured as follows. . Introduction: Simulations . Simulations are models of real-world phenomena or systems that use mathematical algorithms and computer programs simulate the real behavior and aspects of the subject being modeled. . Simulations are most often used to model complex or time-consuming things that would be difficult to test in real life, such as modeling the spread of diseases in certain ecosystems or testing the functionality of a potential product before it is made. . In this lesson, we will be looking at lists, iteration, and random values through the lens of simulations. . Review: Lists . In this section, I go over lists to set up for iteration. . Code plans: . # Unique concept: adding things to the list # Going over lists using the deck list # Unique concept: shuffling the list # Unique concept: getting rid of things with pop . Review: Iteration . I will go over three different kinds of loops here as a refresher. . Recursive Loops . Recursive loops are used throughout the Python blackjack model. This is seen with the interaction between the game_start() function and the play_again() function. . def game_start(): #after the game setup and outcome... play_again() def play_again(): if player_chips != 0: pa = input(&#39;Would you like to play again? (Input &quot;y&quot; for yes and &quot;n&quot; for no.)&#39;) if pa.lower() == &quot;y&quot;: game_start() #HERE else: print(f&quot;You finished with {str(player_chips)} chips!&quot;) return else: print(&quot;You lost all of your chips! Better luck next time.&quot;) return . For Loops . For loops are used quite often throughout the simulation and are helpful to easily be able to repeat a set of conditions to everything inside of a list/collection of data or to repeat a process a certain number of times. . An example of both of these things are very conveniently seen in the Deck class function build(). It also shows loops being nested. . def build(self): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): self.cards.append(Card(suit, val)) . Going piece by piece: . for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: . Whatever is mentioned below this will be repeated four times, once for each of the listed card suits. . for val in range(2, 15) . Here, the for loop is essentially doing the same thing as before, this time with a list of numbers starting with 2 and ending with 14. As a result, the function runs 13 times, each time with a new integer value that is assigned to the value of a card of a certain suit. . While Loops . While loops aren&#39;t used in the program, but they offer a different way to repeat a set of instructions in a program. The procedure below the while [condition] line will occur until the condition is made not true. . Student Interation: How could this build function be altered to function with a while loop within it? . def build(self): for suit in [&quot;Spades&quot;, &quot;Clubs&quot;, &quot;Diamonds&quot;, &quot;Hearts&quot;]: for val in range(2, 15): #HINT: try replacing this function self.cards.append(Card(suit, val)) #HINT: you may want to make a variable i to be the numbers in the range # you could increment it each loop . While loops also alter an alternative way to loop a set of instructions forever, until a precise thing occurs to break the loop. See the code below. . i = 0 while True: i += 1 ch = random.randint(1, 11) if ch == 10: print(f&quot;It took {str(i)} random generations to get 10.&quot;) break . It took 35 random generations to get 10. . Speaking of random generations... . Random Values . Because unpredictable randomness occurs in the real world, it&#39;s important to have a way to represent it. Simulations are able to use randomization, which could be in the form of random number generation or other methods like shuffle. . Card decks are a great example of how random values can be used to represent real-world scenarios. In the card simulation, the random module&#39;s shuffle function is used to quite literally shuffle the deck, seen below. . def shuffle(self): random.shuffle(self.cards) . Often, random selection methods use functions like randint or randrange as ways to select certain indexes in lists, or might use the random numbers in some other way. . Without shuffling the card order of the deck, can you think of a way that the aforementioned random module functions could be used to get a random card from the deck? . import random s_deck = Deck().show() #the deck shuffle is a separate function, so this is unsorted rando = random.randint(0, len(s_deck)) #generating a random number to use as index randsel = s_deck[rando] #selecting a random card with the index s_deck.pop(rando) #getting rid of the selected card from the deck print(randsel) . 10 of Diamonds . Possible Student Assignment . I might make an assignment here for the student to make a simple simulation that is at least mostly accurate to its real-world scenario. It must use: . A random value | At least one list or similar data type (dictionary, set, etc.) | Two different types of iteration | .",
            "url": "https://drewreed2005.github.io/realdrew/dvassweek1drew/",
            "relUrl": "/dvassweek1drew/",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Multiple Choice Quiz 4 Reflection",
            "content": "Results . I got 49/50. I got 49/50. I’m kind of disappointed that I didn’t get a full 50, but at the same time, there were quite a few questions I struggled with, so I guess it makes sense. . The Problem I Got Wrong . I only got one problem wrong this time. . Question 37 . I didn&#39;t know what constituted &quot;unreasonable.&quot; The error is pretty simple. I didn’t know what “unreasonable” was in the context of the time complexity of a function. . I now know that any algorithm with polynomial efficiency or lower is reasonable, and since n2 is polynomial, it would be reasonable. Easy mistake to fix. . Problems I Struggled With . I struggled with a few of the questions, once again often ones that had to do with internet concept questions. My specific reflections are below. . Question 7 . I&#39;ve never learned about what happens here. In my past experience with Big Idea 5, I don’t remember ever learning what happens when a new device is connected to the internet. However, I’ve lived with technology for my whole life and I did learn what an IP address is, so I had some vague idea of what would happen. . My uncertainty led me to turn this into a process of elimination. I know what a driver is, since I’ve had to install them for my Blue Yeti, drawing tablet, etc. It doesn’t have to do with the internet, as far as I know. Packets are the bits of information that get sent over the internet before being reconstructed, so that felt wrong. And I know for a fact that each device doesn’t get its own personal website. As a result, I basically learned that a new device gets assigned an IP address when it first connects to the internet. . Question 10 . The internet returns. This one was another process of elimination for me, though an easier one. When I heard “Web server,” for some reason I was thinking of some kind of local server, which I know doesn’t connect to the internet. However, I still got this one right because the other possible options were just so bad. Computer manufacturers don’t make a difference, additional hardware is excessive, and I don’t see why different formats of data can’t be represented if all data is ultimately sets of ones and zeroes. . Question 27 . Surprisingly, it&#39;s not the subject matter that confused me here. This was one of the problems where all of the answers contained so much text that they all felt like they could contend as correct answers (at least when I first read them). Part of the reason I struggled with this one is that it talked about losslessly transforming an image, but I had assumed it was referring to losslessly compressing an image. . Ultimately, though, the importance of it being lossless made it clear that only C could be correct, since A, B and C all lost some amount of the image data. . Overall Reflection . Here are some things that the test let me know I should study further: . Home in on specific internet concepts. Make sure to fully understand packages, internet protocols, how devices interact with the internet and each other, and other concepts from Big Idea 5. | For problems with lots of wordy answers, make sure to fully read the question. It will make it easier to rule out long bodies of texts without reading them fully, and to identify the correct answer when it appears. | Make sure to know the terminology behind time complexity especially. It’s good to know that any time complexity polynomial or lower is considered unreasonable when run with larger numbers. | .",
            "url": "https://drewreed2005.github.io/realdrew/mcq4reflection",
            "relUrl": "/mcq4reflection",
            "date": " • Mar 31, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "4.3a Parallel Computing Notes",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. . Test edit. . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- images -- - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom Video Notes . I decided to take notes on the College Board video to make sure I understood the content well. . Sequential computing is a model where code occurs one at a time in order Takes as long as the sum of its operations | . | Parallel computing breaks it down into smaller parts and does some at the same time Takes as long as the sum of its sequential operations plus its longest parallel | Parallel is typically faster than sequential, but requires newer hardware and works best when the tasks don&#39;t rely on each other | . | Distributed computing is a model that uses multiple devices to run a program | The &quot;speedup&quot; of a parallel task is determined by dividing the amount of time it took to do sequentially by the amount of time it took parallel | Computers automatically run their processes parallel to each other There are system tasks and user tasks | Tasks are done sequentially when the results of one are contingent on previous tasks | . | Here is a helpful image to remember how to determine the amount of time necessary to finish a parallel task: | . This shows how you can calculate speedup: | . AP Classroom Video Questions . Example 1 . My answer is 50 seconds. The fastest processing time would be produced by completing tasks Y and Z on the same processer, and leaving task X, which takes longer than the combined duration of Y and Z, on the remaining processor. Since X would run for 50 seconds at the same time as Y and Z, which sum up to 40 seconds, the processing time would be the minimum of 50 seconds. . The correct answer was 50 seconds. . Example 2 . The difference in execution time would be 25 seconds, since running them parallel would take at least 45 seconds due to task B&#39;s duration while running them sequentially woudl take 70 seconds, the sum of the times of tasks A and B. . The correct answer was 25 seconds. . List Comprehension Examples . Here&#39;s a basic example, using the math sqrt function to find the square roots. . from math import sqrt numbers = [64, 49, 16, 144, 169, 289, 225] roots = [int(sqrt(num)) for num in numbers] print(roots) . [8, 7, 4, 12, 13, 17, 15] . Here&#39;s an example with a more complicated loop, which displays all examples in the list pokemon with the letter &quot;q&quot; in them. It even incorporates lower so that it can detect names that start with capital &quot;Q&quot; as well. . pokemon = [&quot;Quagsire&quot;, &quot;Slugma&quot;, &quot;Gulpin&quot;, &quot;Qwilfish&quot;, &quot;Swalot&quot;, &quot;Rayquaza&quot;] qmon = [mon for mon in pokemon if &quot;q&quot; in mon.lower()] print(qmon) . [&#39;Quagsire&#39;, &#39;Qwilfish&#39;, &#39;Rayquaza&#39;] . Conditions like this also make for easy shorthands to create sorted number lists. . evenhund = [num for num in range(1, 101) if num % 2 == 0] print(evenhund) . [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100] . Earlier in the year, one of my friends made this system by making a huge list full of even numbers. Now, the list can be created in just one line of code. .",
            "url": "https://drewreed2005.github.io/realdrew/4-3anotes/",
            "relUrl": "/4-3anotes/",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Hashmaps, Sets, Hash Tables, Hashing and Collisions Notes",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that has a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1), or constant. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . (Questions are answered in the code comments.) . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # the output only contains the first instance of each of the unique numbers # the output also has brackets around it like a dictionary # according to a test, it also automatically orders it by increasing value # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # dictionaries also cannot have duplicate keys, like these sets . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . (Code comment questions are answered throughout.) . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # i see strings, integers, lists, and a nested dictionary inside the dictionary # Printing the dictionary print(lover_album) . These are two different methods to retrieve the data behind a certain key. . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . These are, similarly, alternatives to each other. . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . I made it a set to prevent the duplicate Taylor Swift from showing up. . lover_album[&quot;producer&quot;] = set([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # you could turn the list of producers into a set # Printing the dictionary print(lover_album) . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # you would .update the [&quot;genre&quot;] key by appending &quot;electropop&quot; # Printing the dictionary print(lover_album) . &quot;&quot;&quot; for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) &quot;&quot;&quot; # Write your own code to print tracks in readable format # you can see that below; I also reformatted the other data for k, v in lover_album.items(): if type(v) == list or type(v) == set: print(str(k).capitalize() + &quot;: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(v)) elif type(v) == dict: print(str(k).capitalize() + &quot;:&quot;) for num, track in v.items(): print(&quot; t&quot; + str(num) + &quot;: &quot; + track) else: print(str(k).capitalize() + &quot;: &quot; + str(v)) . Title: Lover Artist: Taylor Swift Year: 2019 Genre: Pop, Synth-pop Tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before Producer: Taylor Swift, Louis Bell, Joel Little, Frank Dukes, Jack Antonoff . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) # This is a very basic code segment, how can you improve upon this code? # I think it could be improved upon by reformatting the output to be more readable # It would also be good to tell the user what their options are # I did all of this below def search(): #here is search but better info = [] for k, v in lover_album.items(): info.append(k) search = input(&quot;What would you like to know about the album? (Options: &quot; + &quot;, &quot;.join(info) + &quot;)&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: data = lover_album.get(search.lower()) if type(data) == list or type(data) == set: print(search.capitalize() + &quot;: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(data)) elif type(data) == dict: print(search.capitalize() + &quot;:&quot;) for num, track in data.items(): print(&quot; t&quot; + str(num) + &quot;: &quot; + track) else: print(search.capitalize() + &quot;: &quot; + str(data)) search() . Tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . Hacks . Hacks Completed Throughout the Lesson . Answer ALL questions in the code segments | . I made sure to do that. . Expand upon the code given to you, possible improvements in comments | . For each of the code segments with possible improvements, I went through and improved them. . One way I did this was using the .capitalize() function to make the keys into grammatically-correct headings. I also improved the displays more comprehensively by reformatting the data displayed depending on the type of data using the type() function. . For example: . Data sets with type list or type set could be handled the same way:to prevent the code formatting brackets from showing up, I used &quot;, &quot;.join(list) in the print statement to get rid of it. Data sets with type dictionary could be iterated through to display the key, a colon, and the value using the for k,v in dict.items() format. I decided to tab intent each of these instances to set it apart from the &quot;Tracks&quot; header in this specific case. . All singular data sets were just displayed in a single print statement, with the key of the key, a colon, and the value. . Canva Diagrams . Personal Album Dictionary . My friend has been trying to get me to listen to music by a certain artist (Rav) for a while now, and I just recently listened through one of his more popular albums &quot;Beneath the Toxic Jungle&quot;. I noticed that it contained a lot of features that weren&#39;t mentioned in the song titles, so I decided that, in the track list, I would list all of the artists involved along with the title of the song. This shows the ability to nest dictionaries. . I then made a system to sift through the data and display it in an appealing way. . Since in previous examples, the get function was used, I decided to pull information from the keys in the other format to show understanding. . from datetime import datetime, date # Creating a dictionary with information about the album &quot;BENEATH THE TOXIC JUNGLE&quot; btj_album = { &quot;title&quot;: &quot;BENEATH THE TOXIC JUNGLE&quot;, #dictionaries can store strings,... &quot;artist&quot;: &quot;Rav&quot;, &quot;date&quot;: datetime(2015, 12, 19), #date objects,... &quot;genres&quot;: [&quot;Abstract Hip Hop&quot;, &quot;Jazz Rap&quot;, &quot;Lo-Fi Hip Hop, Experimental Hip Hop&quot;], #lists,... &quot;tracklist&quot;: { #and even more dictionaries 1: {&quot;title&quot;: &quot;1,000 Years In The Sea&quot;, &quot;mixer&quot;: [&quot;Kill Bill&quot;], &quot;producers&quot;:[&quot;Ljones&quot;]}, 2: {&quot;title&quot;: &quot;Solanine&quot;, &quot;producers&quot;:[&quot;dream Entact.&quot;]}, 3: {&quot;title&quot;: &quot;Save Face As...&quot;, &quot;features&quot;:[&quot;Kill Bill&quot;], &quot;mixer&quot;:[&quot;Kill Bill&quot;], &quot;producers&quot;:[&quot;Yuni Wa&quot;]}, 4: {&quot;title&quot;: &quot;Devil Fruit Smoothies&quot;, &quot;features&quot;:[&quot;JINZO THE TRAP LORD&quot;], &quot;mixer&quot;:[&quot;Kill Bill&quot;], &quot;producers&quot;:[&quot;MAITRO&quot;, &quot;Plaid&quot;]}, 5: {&quot;title&quot;: &quot;Addlerall&quot;, &quot;features&quot;:[&quot;Scuare&quot;], &quot;mixer&quot;:[&quot;Scuare&quot;], &quot;producers&quot;:[&quot;Birocratic&quot;]}, 6: {&quot;title&quot;: &quot;A Better Place&quot;, &quot;features&quot;:[&quot;Ashido Brown&quot;, &quot;Rekcahdam&quot;], &quot;mixer&quot;:[&quot;Rekcahdam&quot;], &quot;producers&quot;:[&quot;Edo Lee&quot;]}, 7: {&quot;title&quot;: &quot;Lavender&quot;, &quot;features&quot;:[&quot;Kill Bill&quot;], &quot;producers&quot;:[&quot;Datfootdive&quot;, &quot;Moar&quot;]}, 8: {&quot;title&quot;: &quot;Get Mine II&quot;, &quot;features&quot;:[&quot;Scuare&quot;, &quot;suddlenuance&quot;], &quot;mixer&quot;:[&quot;Kill Bill&quot;], &quot;producers&quot;:[&quot;Tantu&quot;]}, 9: {&quot;title&quot;: &quot;1,000 Years In The Mountains&quot;, &quot;producers&quot;:[&quot;Pacific Yew&quot;]}, &quot;Bonus Track&quot;: {&quot;title&quot;: &quot;Tachyon&quot;, &quot;producers&quot;:[&quot;Raistlin&quot;]} }, #contributors are all in list form to allow for proper iteration through each one } feat_list = [] #creating initial lists of features, mixers, producers, and all contributors mix_list = [] prod_list = [] cont_list = [] for num, track in btj_album[&quot;tracklist&quot;].items(): for k, v in track.items(): if k == &quot;features&quot;: for p in v: feat_list.append(p) elif k == &quot;mixer&quot;: for p in v: mix_list.append(p) elif k == &quot;producers&quot;: for p in v: prod_list.append(p) if k != &#39;title&#39;: for p in v: cont_list.append(p) btj_album[&quot;features&quot;] = set(feat_list) #a set of filtered info, no duplicates btj_album[&quot;mixers&quot;] = set(mix_list) #same formatting below btj_album[&quot;producers&quot;] = set(prod_list) btj_album[&quot;contributors&quot;] = set(cont_list) #list of all outside contributors # process to print album information def print_album(album): print(f&quot; &quot;{album[&#39;title&#39;]} &quot; by {album[&#39;artist&#39;]}&quot;) #title and artist display print(f&quot; tRelease Date: {album[&#39;date&#39;].strftime(&#39;%m-%d-%Y&#39;)}&quot;) #release date format print(f&quot; tGenres: &quot; + &quot;, &quot;.join(album[&#39;genres&#39;])) #genre listing, formatted print(f&quot; tTracklist:&quot;) #header for tracklist for part, track in album[&#39;tracklist&#39;].items(): print(f&quot; t t{str(part)}: {track[&#39;title&#39;]}&quot;) #leading with title, primary for key, info in track.items(): if key != &quot;title&quot;: #filtered to avoid double printing title print(f&quot; t t t t{key.capitalize()}: &quot; + &quot;, &quot;.join(info)) #info and details print(f&quot;Contributors: &quot; + &quot;, &quot;.join(btj_album[&#39;contributors&#39;])) #contributor list, no repeats print_album(btj_album) . &#34;BENEATH THE TOXIC JUNGLE&#34; by Rav Release Date: 12-19-2015 Genres: Abstract Hip Hop, Jazz Rap, Lo-Fi Hip Hop, Experimental Hip Hop Tracklist: 1: 1,000 Years In The Sea Mixer: Kill Bill Producers: Ljones 2: Solanine Producers: dream Entact. 3: Save Face As... Features: Kill Bill Mixer: Kill Bill Producers: Yuni Wa 4: Devil Fruit Smoothies Features: JINZO THE TRAP LORD Mixer: Kill Bill Producers: MAITRO, Plaid 5: Addlerall Features: Scuare Mixer: Scuare Producers: Birocratic 6: A Better Place Features: Ashido Brown, Rekcahdam Mixer: Rekcahdam Producers: Edo Lee 7: Lavender Features: Kill Bill Producers: Datfootdive, Moar 8: Get Mine II Features: Scuare, suddlenuance Mixer: Kill Bill Producers: Tantu 9: 1,000 Years In The Mountains Producers: Pacific Yew Bonus Track: Tachyon Producers: Raistlin Contributors: Moar, MAITRO, dream Entact., Scuare, Rekcahdam, Pacific Yew, Yuni Wa, Raistlin, suddlenuance, Kill Bill, Edo Lee, Tantu, Datfootdive, Birocratic, Ljones, JINZO THE TRAP LORD, Plaid, Ashido Brown . I added code comments throughout to describe what&#39;s going on. . Yes, that friend was AJ. I&#39;m like 90% sure he&#39;s also gonna do an album by Rav. . My Favorite Taylor Swift Song . I don&#39;t need ChatGPT to help me argue in favor of &quot;Teardrops On My Guitar&quot;. To be completely honest, I&#39;ve never been a fan of the more recent Taylor Swift music, though that&#39;s mostly due to the genre. It&#39;s nothing personal. I also wouldn&#39;t say I&#39;m a fan of country by any means, but, especially in my more recent personal life, country music has adopted a sort of nostalgic value. . This song has quite literally followed me through my life. Being released on her 2006 self-titled debut album &quot;Taylor Swift,&quot; it (along with her first single &quot;Tim McGraw&quot;) earned her some of her first share of popularity. It was cowritten by Liz Rose, who received a Songwriter of the Year award from Society of European Stage Authors and Composers the following year for her work on these two singles. In an interview about the song, Rose talked about how Swift was good at expressing the emotions she wished to portray in the song to her. Rose made it very clear that she was not stepping in or creating a corporate, filtered expression of Swift&#39;s idea, as she wanted Swift to &quot;be the vehicle.&quot; It was produced by Nathan Chapman, known for his work on many other early Taylor Swift songs as well as other artists like Lady Antebellum and, more recently, Revival. . If you know this song well enough, you know I&#39;m failing to address a big elephant in the room. The elephant&#39;s name is &quot;Drew.&quot; . For my whole life, my family has, mockingly or not, sung this song around me, played it in the car, etc. &quot;Drew looks at me&quot; was a lyric that wrapped itself around my brain fairly often. My dad bought her debut album on iTunes just so that they could play it in my mom&#39;s old van, which couldn&#39;t play music from my dad&#39;s phone unless it was saved through iTunes. When I picked up guitar, my parent said it was the first song I should learn. My girlfriend, an avid Taylor Swift and country fan, referenced it not long after I met her. If it&#39;s not clear, I have a lot of personal associations with this song. . And speaking of playing it on guitar, it&#39;s a very easy song to learn if you strip it of all of the complicated bits. The fact that it comes with so many potential variations to learn, though, like the somewhat melancholy Dsus4 chord in the second verse and the various pinky-finger add-ons that you can choose to play. . There&#39;s lots of other stuff I could talk about with this song, like how the actual &quot;Drew&quot; is actually named &quot;Andrew,&quot; like me. Or how the &quot;Drew&quot; from the song is now in jail for child abuse, while, fun fact, I&#39;m not. But I think I&#39;ll leave it at that. I&#39;m not trying to convince you to change your mind on your favorite. But now, if you ever hear that song again, you might think of me. And I think that&#39;s funny. .",
            "url": "https://drewreed2005.github.io/realdrew/hashmapsnotes/",
            "relUrl": "/hashmapsnotes/",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Space and Time Complexity Notes",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . Space and time complexity are an integral consideration to make about the functionality and running quality of a program. Failing to consider space and time complexity can get in the way of the functionality of the program. Creating bounds for the complexity of a program makes sure that it functions accurately. For example, if time complexity is not considered, then a time-based process that uses the data outputted from a certain long process may fail. . | There&#39;s also a level of convenience for the user to consider. If a program is demanding on a computer and takes a long time to run, people won&#39;t want to use it. . | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 #baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (625, 468) -- original image -- . Do you think this is a time complexity or space complexity or both problem? . I think it&#39;s a problem with both. Clearly, since the image wasn&#39;t able to display in VSCode and the process ran for around a minute and a half, this is not a well-optimized function for basic laptops. | . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) ncaa_bb_ranks = {1:&quot;Alabama&quot;,2:&quot;Houston&quot;, 3:&quot;Purdue&quot;, 4:&quot;Kansas&quot;} #look up a value in a dictionary given a key print(ncaa_bb_ranks[1]) . 263 Alabama . Space . This function takes two integer inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input integers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n #create a list of None based on the length or arr for i in range(n): reversed_arr[n-i-1] = arr[i] #stores the value at the index of arr to the value at the index of reversed_arr starting at the beginning for arr and end for reversed_arr return reversed_arr . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . . Main take away is that a new matrix is created. | . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 #integer division if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) #print(fibonacci(5)) #print(fibonacci(10)) #print(fibonacci(20)) print(fibonacci(30)) #print(fibonacci(40)) . 832040 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets print(generate_subsets([1,2,3])) print(generate_subsets([1,2,3,4,5])) #print(generate_subsets(numbers)) . [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []] [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3], [1, 2, 4, 5], [1, 2, 4], [1, 2, 5], [1, 2], [1, 3, 4, 5], [1, 3, 4], [1, 3, 5], [1, 3], [1, 4, 5], [1, 4], [1, 5], [1], [2, 3, 4, 5], [2, 3, 4], [2, 3, 5], [2, 3], [2, 4, 5], [2, 4], [2, 5], [2], [3, 4, 5], [3, 4], [3, 5], [3], [4, 5], [4], [5], []] . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . The difference in timing between the functions seems to be based upon the mathematical multipliers associated. For example, in the exponential case below, the time will likely be close to double the previous because the product is continuously multipled by 2 for each n. . For logarithmic, the difference in timing would likely be less extreme as time goes on, since logarithm functions grow longer more than they do greater. It makes sense that quadratic gets greater and greater as n increases, for example. . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 2.7874093055725098 seconds 9227465 Time taken: 4.232964992523193 seconds . Hacks . Below is my work to answer the hacks questions and understand space and time complexity a bit better. . Testing Timing for Remaining Types . Here are some questions and hypotheses I have going in: . Will the constant&#39;s mathematical implications match the difference in processing time? | Will the exponential processing means be faster than linear at the beginning, but slower when working with larger numbers? | Is logarithmic most beneficial with larger numbers? Where is the cutoff? | Where does linear search become slower than binary search? | . Using Time Functions . Below are my actual code tests for the duration of each processing algorithm. I decided to use the bodies of code below as samples to test with. . hundnumbers = list(range(100)) tennumbers = list(range(10)) . Testing the Timing of Each with hundnumbers . Let&#39;s see how fast each can process hundnumbers data. . import time #linear start_time = time.time() for num in hundnumbers: if num == 90: pass end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #quadratic start_time = time.time() for num in hundnumbers: for num2 in hundnumbers: if num == 90: pass end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #logarithmic start_time = time.time() binary_search(hundnumbers, 0, 99, 90) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #exponential start_time = time.time() fibonacci(90) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . Time taken: 0.0002040863037109375 seconds Time taken: 0.0024209022521972656 seconds Time taken: 9.894371032714844e-05 seconds Time taken: 200.348909876382940827 seconds . Testing the Timing of Each with tennumbers . Let&#39;s see if anything changes when we use tennumbers instead. . import time #linear start_time = time.time() for num in hundnumbers: if num == 8: pass end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #quadratic start_time = time.time() for num in hundnumbers: for num2 in hundnumbers: if num == 8: pass end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #logarithmic start_time = time.time() binary_search(tennumbers, 0, 9, 8) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) #exponential start_time = time.time() fibonacci(8) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . Time taken: 0.0001659393310546875 seconds Time taken: 0.0021457672119140625 seconds Time taken: 0.00019216537475585938 seconds Time taken: 0.0001430511474609375 seconds . It seems like most of my hypotheses were answered. . Quadratic processing talkes significantly longer than linear processessing | Logarithmic is usually faster, but only past around 20 values being tested This is an interesting consideration for space complexity | . | Exponential is also not that slow until the number gets larger, at which point it gets a lot slower | . Hacks Questions . We were asked to answer some questions about time and space complexity. Here are my responses. . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. | . Why is time and space complexity important when choosing an algorithm? | . Time and space complexity are important when choosing an algorithm because they determine how much time and memory an algorithm will require to solve a problem. An algorithm that is efficient in terms of time and space complexity will be faster and require less memory than an algorithm that is not efficient, making it a better choice for solving larger problems or problems that need to be solved quickly. . If the algorithm doesn&#39;t work, this is bad from both the perspective of a programmer and of a consumer. A consumer does not want to work with a laggy, slow program that fails to account for large amounts of data and programmers will find it difficult to work around processing algorithms that are very time-consuming. . Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain. | . No, you should not always use a constant time algorithm or never use an exponential time algorithm. The choice of algorithm depends on the specific problem being solved and the trade-offs between time and space complexity. In some cases, a constant time algorithm may not be able to solve the problem efficiently, while in other cases, an exponential time algorithm may be the only practical solution. It is important to consider the constraints and requirements of the problem at hand when choosing an algorithm. . What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? | . Some general patterns to determine time and space complexity are analyzing loops, recursive functions, and nested data structures. For time complexity, counting the number of operations executed by an algorithm related to/caused by the input size is often used to determine time complexity. For space complexity, analyzing the amount of memory required to store data as a function of the input size is often used to determine space complexity. . Time Complexity Analysis Questions . Below are my answers to the linked Time and Space Complexity analysis questions. . Question 1 . What is the time and space complexity of the following code? . a = 0 b = 0 for i in range(N): a = a + random() for i in range(M): b = b + random() . O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | My answer: 3 (Correct) . Reasoning: The two for loops are linear O(N) and O(M) respectively, but because they aren&#39;t nested, the time complexity isn&#39;t described by multiplying N and M. Instead, it would be O(N + M). The variables&#39; sizes are singular and not affected by the size of the input, so the space complexity can be represented as O(1) (linear). . Question 2 . What is the time complexity of the following code? . a = 0 for i in range(N): for j in reversed(range(i,N)): a = a + i + j . O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | My answer: 4 (Correct) . Reasoning: These are nested for loops, which were the exact example of quadratic time complexity we learned in class, so I was pretty easily able to identify it as quadratic (O(N*N)). . Question 3 . What is the time complexity of the following code? . k = 0 for i in range(n//2, n): for j in range(2, n, pow(2,j)): k = k + n / 2 . O(n) | O(nlog(n)) | O(n^2) | O(n^2(log(n))) | My answer: 2 (Correct) . Reasoning: I really wasn&#39;t sure about this one because I found the notation of the range function really confusing. I guess I haven&#39;t worked with it enough. I knew the first loop was linear, but the second one seemed like it was doing something like moving up in powers of two, like log with a base of 2. So, the time complexity was O(n * log(2)(n)) or O(nlog(n)). . Question 4 . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? . X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | My answer: 2 (Correct), but we didn&#39;t learn what &quot;asymptotically&quot; means . Reasoning: I had to look up &quot;asymptoticallly&quot; to figure it out. Now I know that it means that X is more efficient than Y when a number n is greater than a certain limiting (positive) constant. . Question 5 . What is the time complexity of the following code? . a = 0 i = N while (i &gt; 0): a += i i //= 2 . O(N) | O(Sqrt(N)) | O(N / 2) | O(log N) | My answer: 4 (Correct), but I wasn&#39;t confident in it . Reasoning: This was a weird one again because it seemed to resemble the log base 2 example from before, but hasn&#39;t been phrased as a while loop yet. Ultimately, I made an educated answer, but not a completely confident one. . Question 6 . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? . Time | Memory | Both of the above | None of the above | My answer: 3 (Correct) . Reasoning: This is just a basic concept that we learned from the lesson. . Question 7 . How is time complexity measured? . By counting the number of algorithms in an algorithm. | By counting the number of primitive operations performed by the algorithm on a given input size. | By counting the size of data input to the algorithm. | None of the above | My answer: 2 (Correct) . Reasoning: This just sounded like a textbook definition, though I didn&#39;t know what it meant by &quot;primitive.&quot; I knew it wasn&#39;t counting the size of the data, and I knew it wasn&#39;t as simple as just counting the number of algorithms. . Question 8 . What will be the time complexity of the following code? . for i in range(n): i=i*k . O(n) | O(k) | O(logk(n)) | O(logn(k)) | My answer: 3 (Correct) . Reasoning: Mathematically, it only makes sense to be 3. It couldn&#39;t be linear like 1 or 2, since the variable i, which dictates the continued run of the program, is being multiplied by k. In this case, another way to explain the program is that it loops until k has multiplied by itself enough to reach n, which describes how a point would be reached in a logarithmic graph. . Question 9 . What will be the time complexity of the following code? . value = 0 for i in range(n): for j in range(i): value=value+1 . O(n) | O(n+1) | O(n(n-1)) | O(n(n+1)) | My answer: 4 (Nope) . Correct answer: 3 . Reasoning: I had never seen a loop like this before and I wasn&#39;t really clear on how I could convert it to Big O notation. Now that I think about it more, range function makes n the ceiling that could never be reached. If n was 2, for example, I would end up being 0 and 1, but never 2. For that reason, O(n * (n - 1)) does make sense. . Question 10 . Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. . True | False | My answer: 2 (Correct) . Reasoning: Part of why I gave this answer is that whenever &quot;always runs faster&quot; is asked in conjunction to a question about time complexity, I will say false. But it&#39;s also because, though I&#39;m not familiar with &quot;worst-case running time,&quot; I know that linear algorithms (according to my tests) can sometimes be faster with logarithmic ones, especially working with smaller n values. .",
            "url": "https://drewreed2005.github.io/realdrew/space&timenotes",
            "relUrl": "/space&timenotes",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Big Idea 2 Multiple Choice Quiz Reflection",
            "content": "Results . I got 25/25. I got 25/25. I’m not surprised, since most of the problems were questions we had already been asked in the previous quizzes. As a result, there were very few that I struggled with. That doesn’t mean that there were none that I kind of had to think about, however. . Problems I Struggled With . Here are some problems that I wasn’t able to completely understand immediately. The bar for “struggle” had to be set pretty low here so that I could provide at least some reflection. . Question 1 . Binary jumpscare. Unlike some of my previous reflections might imply, I was actually completely sure of my answer here. When I first read it, however, I found the range confusing. Because a range was given, it wasn’t immediately obvious that I was looking for the minimum number of bits to fit that maximum. . Once it clicked, it was obvious. It just took a bit of mental multiplication. . Question 10 . So many similar spreadsheets. The main reason this one created some confusion for me was that all of the spreadsheets had relevant information. However, the first two had the most specific and inclusive data, so I figured they were the best response. . Overall Reflection . There isn’t much of anything in Big Idea 2 that is giving me trouble. The main thing I think I should practice is reading large text-heavy questions that provide a lot of extra information. .",
            "url": "https://drewreed2005.github.io/realdrew/bigidea2mcqreflection",
            "relUrl": "/bigidea2mcqreflection",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.4b (Using Programs with Data, SQL) Notes",
            "content": "Database Programming is Program with Data . The Tri 2 Final Project is an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource . What is a database schema? | . A database schema is essentially a column defined by certian information in a database. . What is the purpose of identity Column in SQL database? | . It is to locate which row of a data table a certain entry is found. . What is the purpose of a primary key in SQL database? | . The primary key is the main way to access a certain piece of information in a database. Generally, unlike the identity column, a primary key should never change for a piece of data. . What are the Data Types in SQL table? | . Integer, float, string, Boolean, images; really any data type or data structure (list, dictionary, class). . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you Google it, what do you think it does? | . From what I understand, a connection object is basically an object that is used to connect to a database so that you can interact with it with various other functions such as the cursor object below. To use it, the argument is a string with the path to the database. . The attributes of the connection object. Same for cursor object? | . The cursor object can select data and execute code within the database after connecting. It essentially allows you to do what you would otherwise do with sqlite3 in the terminal. . The attributes of the cursor object. Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | . There are many special variables, function variables, and class variables in both. The unique attributes that I&#39;m seeing are in_transaction:False, isolation_level: &#39;&#39;, row_factory: None, and total_changes: 0 in the conn object and arraysize, lastrowid, row_factory, and rowcount. . Is &quot;results&quot; an object? How do you know? | . It is an object because we can see that it has attributes, which are exclusive to objects. . The attributes of the object saved under the variable &#39;results&#39;. import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$178F1eHuRpw20ZGo$feb058fe482af33aa9e864986549c42245f3a70d87cd53b72bbd334aed5c0915&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$JPorVW1dBYaWtYdj$f6ff3ab3835f62e9e116ef793f25c33b1dd5df95ee46e02e4c6ed18b02b660b6&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$NrSysJ9GQueU8Qaj$764f0bd228ab1e86203ad4f6c6ee7dc24701a0103af76130e252fb99194d36ba&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$EA4t5WiMqOeqQtXC$243329b57d674ca11a23b0a7840f828a064414091eec0264a1272a5a7780821b&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$QwKSrtvysyLsWTTm$5da65ce9a81bd379ec5d653bee364838f3a3c9ca3e8aa11faa11d24db208ba29&#39;, &#39;1921-10-21&#39;) (7, &#39;AJ Ruiz&#39;, &#39;kkcbal&#39;, &#39;sha256$RN6Q5qWnLZldKoAN$c684956f996a55f5ecd847c984d5f037d2289a0afb5adc09ba7f0fbd3124a7dd&#39;, &#39;2006-05-18&#39;) (8, &#39;Drew Reed&#39;, &#39;mrdew&#39;, &#39;budthefox&#39;, &#39;2005-11-07&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? | . The create() function in the first lesson is, in my opinion, simpler and easier to use because it works within the SQLite User data directly. It helps me, at least, to pull the User attributes and data and interact with them in Python. However, this create() function can be because it&#39;s a bit easier to use on a smaller scale without reliance on objects. . Explain purpose of SQL INSERT. Is this the same as User __init__? | . SQL INSERT is very different from __init__ because, while __init__ initializes the User object and creates a set of attributes that the user can work with, SQL INSERT acts like a create function by adding in a new User object with the given attributes. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . A new user record mrdew has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | . The &quot;hacked&quot; part activates if the new password the person inputted is less than 2 characters. This is kind of a mean way to say that the password the person put in is not safe, and therefore is invalid. . Explain try/except. When would except occur? | . Using try allows you to make code run up until an error occurs, at which point the except condition is activated. This allows programs to provide failsafes for errors or invalid user interactions. . What code seems to be repeated in each of these examples and why is it repeated? | . Creating the connection and cursor objects is done in every block because, at the end of each, the connection and cursor are both closed. In order to use them again, they need to be re-activated. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | . DELETE can be a dangerous operation when left to user inputs. User error could lead to the deletion of important information that is difficult to retrieve. . What is the &quot;f&quot; and {uid} do? | . The &quot;f&quot; prepares a print statement to read {uid} as the value of the variable uid rather than the literal text &quot;{uid}&quot;. . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | Could you refactor this menu? Make it work with a List? | . def menu(): operation = input(&quot;Enter: (C)reate, (R)ead, (U)pdate, (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation) == 0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$178F1eHuRpw20ZGo$feb058fe482af33aa9e864986549c42245f3a70d87cd53b72bbd334aed5c0915&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$JPorVW1dBYaWtYdj$f6ff3ab3835f62e9e116ef793f25c33b1dd5df95ee46e02e4c6ed18b02b660b6&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$NrSysJ9GQueU8Qaj$764f0bd228ab1e86203ad4f6c6ee7dc24701a0103af76130e252fb99194d36ba&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$EA4t5WiMqOeqQtXC$243329b57d674ca11a23b0a7840f828a064414091eec0264a1272a5a7780821b&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$QwKSrtvysyLsWTTm$5da65ce9a81bd379ec5d653bee364838f3a3c9ca3e8aa11faa11d24db208ba29&#39;, &#39;1921-10-21&#39;) (7, &#39;AJ Ruiz&#39;, &#39;kkcbal&#39;, &#39;sha256$RN6Q5qWnLZldKoAN$c684956f996a55f5ecd847c984d5f037d2289a0afb5adc09ba7f0fbd3124a7dd&#39;, &#39;2006-05-18&#39;) (8, &#39;Drew Reed&#39;, &#39;mrdew&#39;, &#39;budthefox&#39;, &#39;2005-11-07&#39;) . Hacks . My Own Database . I decided to use the object oriented form of database because I prefer the orderliness that it affords me. . Features . Because I&#39;ve been working with Gamemaker recently to try to make an RPG game (mainly for fun, but also to try applying what I&#39;m learning in different ways), I decided to make a database with various (fake) video game bosses, with attributes for their stats, weaknesses, descriptions, etc. . To add a twist on the easier databases we&#39;ve been working with recently, I decided to make it like a user forum. Each character in the database has room for users to add their strategies on how to beat it. . On top of that, to leave a forum comment, I decided to make it based on the user database from 2.4a. You&#39;ll have to connect to one of the users in the original database using your username and password. This connection uses the other type we worked on today. . Initializing and Creating the Database . The big code block below initializes and creates the database. . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///vgenemy.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError class Comment(db.Model): __tablename__ = &#39;comments&#39; # Define the Notes schema id = db.Column(db.Integer, primary_key=True) note = db.Column(db.String(255), unique=False, nullable=False) userID = db.Column(db.String(255), unique=False, nullable=False) monsterID = db.Column(db.Integer, db.ForeignKey(&#39;enemies.id&#39;)) # Constructor of a Notes object, initializes of instance variables within object def __init__(self, uid, note): self.userID = uid self.note = note # Returns a string representation of the Notes object, similar to java toString() # returns string def __repr__(self): return &quot;Notes(&quot; + str(self.id) + &quot;,&quot; + self.note + &quot;,&quot; + str(self.userID) + &quot;)&quot; # CRUD create, adds a new record to the Notes table # returns the object added or None in case of an error def create(self): try: # creates a Notes object from Notes(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Notes table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read, returns dictionary representation of Notes object # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;userID&quot;: self.userID, &quot;note&quot;: self.note, &quot;monsterID&quot;: self.monsterID } class Enemy(db.Model): __tablename__ = &#39;enemies&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _desc = db.Column(db.String(255), unique=True, nullable=False) _att = db.Column(db.Integer, unique=False, nullable=False) _mag = db.Column(db.Integer, unique=False, nullable=False) _dfs = db.Column(db.Integer, unique=False, nullable=False) _spd = db.Column(db.Integer, unique=False, nullable=False) _comments = db.relationship(&#39;Comment&#39;, backref=&#39;enemies&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, desc, att, mag, dfs, spd): self._name = name # variables with self prefix become part of the object, self._desc = desc self._att = att self._mag = mag self._dfs = dfs self._spd = spd @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def desc(self): return self._desc @desc.setter def desc(self, desc): self._desc = desc @property def att(self): return self._att @att.setter def att(self, att): self._att = att @property def mag(self): return self._mag @mag.setter def mag(self, mag): self._mag = mag @property def dfs(self): return self._dfs @dfs.setter def dfs(self, dfs): self._dfs = dfs @property def spd(self): return self._spd @spd.setter def spd(self, spd): self._spd = spd # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from Enemy(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to enemies table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;desc&quot;: self.desc, &quot;att&quot;: self.att, &quot;mag&quot;: self.mag, &quot;dfs&quot;: self.dfs, &quot;spd&quot;: self.spd, } # CRUD update: updates all values # returns self def update(self, name=&quot;&quot;, desc=&quot;&quot;, att=1, mag=1, dfs=1, spd=1): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(desc) &gt; 0: self.desc = desc self.att = att self.mag = mag self.dfs = dfs self.spd = spd db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initEnemies(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; e1 = Enemy(name=&#39;Forest Guardian&#39;, desc=&#39;A lumbering green beast with sharp horns.&#39;, att=85, mag=70, dfs=80, spd=50) e2 = Enemy(name=&#39;Sea Guardian&#39;, desc=&#39;A strange, unpredictable fish with long whiskers.&#39;, att=60, mag=100, dfs=85, spd=80) e3 = Enemy(name=&#39;Terra Guardian&#39;, desc=&#39;A keen, sharp-clawed mole with a drill tail.&#39;, att=110, mag=80, dfs=60, spd=100) e4 = Enemy(name=&#39;Molten Guardian&#39;, desc=&#39;A giant lava monster with metal accessories.&#39;, att=85, mag=115, dfs=85, spd=90) e5 = Enemy(name=&#39;Sky Guardian&#39;, desc=&#39;A valiant, flying knight bird with armor.&#39;, att=100, mag=100, dfs=100, spd=100) enemies = [e1, e2, e3, e4, e5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for enemy in enemies: try: comment = &quot;Share your strategies here!&quot; enemy._comments.append(Comment(&quot;Admin&quot;, comment)) &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = enemy.create() print(f&#39;Created new enemy &quot;{object.name}&quot;.&#39;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Error creating {enemy.name} data.&quot;) initEnemies() . Created new enemy &#34;Forest Guardian&#34;. Created new enemy &#34;Sea Guardian&#34;. Created new enemy &#34;Terra Guardian&#34;. Created new enemy &#34;Molten Guardian&#34;. Created new enemy &#34;Sky Guardian&#34;. . Enemy Read Function . A read function is nice to have for future use in the commenting code. This is the code corresponding to the enemy database, however; it will not have full CRUD code because the list of monsters is simply there for reference. I made it a corresponding parent database for simplicity. . def e_read(): with app.app_context(): table = Enemy.query.all() json_ready = [enemy.read() for enemy in table] # each user adds user.read() to list return json_ready . The code above successfully creates all five of the template enemies. . Code for Adding Comments (Create) . Now that the enemies have been made in the database, I created a function below that lets the user comment on a specific monster. The parameters correspond to code in the verify function found later. . def make_comment(userID): with app.app_context(): id_inp = input(&quot;Please input the number corresponding to the enemy you would like to comment on.&quot;) try: id_sel = int(id_inp) except: print(&quot;Please input an integer corresponding to an enemy.&quot;) make_comment(userID) enemy = Enemy.query.filter_by(id=id_sel).first() if enemy: print(&quot;Enemy found. Please enter a comment.&quot;) c_enter = input(&quot;Please discuss your thoughts on/strategies for this enemy.&quot;) print(&quot;Your comment will look like this:&quot;) print(f&#39;{userID}: {c_enter}&#39;) print(&quot;Is this alright?&quot;) consent = input(&#39;Enter &quot;y&quot; for YES and &quot;n&quot; for NO.&#39;).lower() if consent == &quot;y&quot;: # Connect to the database file conn = sqlite3.connect(&#39;instance/vgenemy.db&#39;) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO comments (note, userID, monsterID) VALUES (?, ?, ?)&quot;, (c_enter, userID, id_sel)) # Commit the changes to the database conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() print(&quot;Comment posted successfully!&quot;) else: make_comment(userID) else: print(&quot;Enemy not found.&quot;) make_comment(userID) . Connecting to the Users Database . The code below uses the sqlite3 library to connect to the User database and verify the user with a user ID and password input. . import sqlite3 udb = &#39;instance/sqlite.db&#39; # this is location of database def verify(): # Connect to the database file conn = sqlite3.connect(udb) # Create a cursor object to execute SQL queries cursor = conn.cursor() # get user input uid = input(&quot;Enter your user ID: &quot;) password = input(&quot;Enter your password: &quot;) # Execute a SELECT statement to retrieve data from the table cursor.execute(&quot;SELECT * FROM users WHERE _uid = ? AND _password = ?&quot;, (uid, password)) # fetch the first matching row user = cursor.fetchone() #closing cursor cursor.close() conn.close() #checking if user with matching data exists if user: print(f&quot;Welcome, {user[1]}!&quot;) uid = user[2] for enemy in e_read(): print(f&#39;{enemy[&quot;id&quot;]}. {enemy[&quot;name&quot;]}&#39;) make_comment(uid) else: print(f&#39;User with ID &quot;{uid}&quot; and password &quot;{password}&quot; not found.&#39;) return . Testing Functionality . Here&#39;s a test to show the process of adding a comment. . verify() . Welcome, Drew Reed! 1. Forest Guardian 2. Sea Guardian 3. Terra Guardian 4. Molten Guardian 5. Sky Guardian Enemy found. Please enter a comment. Your comment will look like this: mrdew: He always charges up strong attacks, so guard after he does! He is weak to fire magic. Is this alright? Comment posted successfully! . Displaying Comments for a Certain Enemy . Now that I have successfully created code to comment on the enemies in the database, it&#39;s time to create some code to display the information and comments on a certain enemy. . I did so in the function below. . from IPython.display import clear_output def forum(): for enemy in e_read(): print(f&#39;{enemy[&quot;id&quot;]}. {enemy[&quot;name&quot;]}&#39;) id_inp = input(&quot;Please input the number corresponding to the enemy you would like to comment on.&quot;) try: id_sel = int(id_inp) except: print(&quot;Please input an integer corresponding to an enemy.&quot;) forum() with app.app_context(): enemy = Enemy.query.filter_by(id=id_sel).first() if enemy: table = Comment.query.all() comments = [comment.read() for comment in table] print(&quot; n&quot; + enemy._name + &quot; n&quot;) print(&#39;Base Stats:&#39;) print(f&#39;Attack: {enemy._att} | Magic: {enemy._mag} | Defense: {enemy._dfs} | Speed: {enemy._spd} n&#39;) print(&#39;Comments:&#39;) for comment in comments: if comment[&quot;monsterID&quot;] == id_sel: print(f&#39;{comment[&quot;userID&quot;]}: {comment[&quot;note&quot;]}&#39;) else: print(&quot;Enemy not found. Make sure to input a corresponding integer.&quot;) forum() . 1. Forest Guardian 2. Sea Guardian 3. Terra Guardian 4. Molten Guardian 5. Sky Guardian Forest Guardian Base Stats: Attack: 85 | Magic: 70 | Defense: 80 | Speed: 50 Comments: Admin: Share your strategies here! mrdew: He always charges up strong attacks, so guard after he does! He is weak to fire magic. . Finishing the Comments CRUD . I already made the make_comment function that essentially acts like a create function. The grading standards got changed to include the necessity to make a menu with create, read, update and delete, so I decided to go through and make the three remaining functions for the comments. . Read . I don&#39;t have a formal read function for comments, so I made it below. . import sqlite3 def c_read(): with app.app_context(): table = Comment.query.all() json_ready = [comment.read() for comment in table] # each user adds user.read() to list return json_ready c_read() . Update . This one is less self-explanatory and a bit more difficult, so I describe how it works below the code. . cdb = &#39;instance/vgenemy.db&#39; def c_update(userID): # Printing all of the user&#39;s comments i = 0 u_comments = [] for comment in c_read(): if comment[&#39;userID&#39;] == userID: i += 1 print(str(i) + f&#39;. {comment[&quot;userID&quot;]}: {comment[&quot;note&quot;]}&#39;) u_comments.append(comment) e_comment = input(&quot;Which comment would you like to edit?&quot;) try: c_sel = int(e_comment) - 1 # using user input as index chosen_c = u_comments[c_sel] pass except: print(&quot;Invalid input. Enter an integer corresponding to a listed comment.&quot;) c_update(userID) new_note = input(&quot;What would you like your comment to say instead?&quot;) print(&quot;Your comment will look like this:&quot;) print(f&#39;{userID}: {new_note}&#39;) print(&quot;Is this alright?&quot;) consent = input(&#39;Enter &quot;y&quot; for YES and &quot;n&quot; for NO.&#39;).lower() if consent == &quot;y&quot;: # Connect to the database file conn = sqlite3.connect(cdb) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE comments SET note = ? WHERE id = ?&quot;, (new_note, chosen_c[&quot;id&quot;])) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No ID {chosen_c[&#39;id&#39;]} was not found in the table.&quot;) else: print(&quot;Your comment has been updated successfully!&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() else: return . 1. mrdew: He always charges up strong attacks, so guard after he does! He is weak to fire magic. Your comment will look like this: mrdew: He always charges up strong attacks, so guard after he does. He takes more damage from magic attacks, so try setting up weather if you can! Is this alright? Your comment has been updated successfully! . I left a sample of it running with my username above. It works by first printing out all of the comments created by the logged-in user. The user then selects a comment to be edited based on the number associated with it. That number corresponds to the index of one of the listed comments, which the user can then change by inputting a new comment. That new comment replaces the old one with the execute function. . Delete . The delete code borrows a lot from the update code, so most of how that one worked applies to this one. The main difference is the execute code. . def c_delete(userID): # Printing all of the user&#39;s comments i = 0 u_comments = [] for comment in c_read(): if comment[&#39;userID&#39;] == userID: i += 1 print(str(i) + f&#39;. {comment[&quot;userID&quot;]}: {comment[&quot;note&quot;]}&#39;) u_comments.append(comment) d_comment = input(&quot;Which comment would you like to delete?&quot;) try: c_sel = int(d_comment) - 1 # using user input as index chosen_c = u_comments[c_sel] pass except: print(&quot;Invalid input. Enter an integer corresponding to a listed comment.&quot;) update(userID) print(&quot;Your comment will be permanently deleted. Is that alright?&quot;) consent = input(&#39;Enter &quot;y&quot; for YES and &quot;n&quot; for NO.&#39;).lower() if consent == &quot;y&quot;: # Connect to the database file conn = sqlite3.connect(cdb) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;DELETE FROM comments WHERE id = ?&quot;, (chosen_c[&#39;id&#39;],)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No ID {chosen_c[&#39;id&#39;]} was not found in the table.&quot;) else: print(&quot;Your comment has been deleted successfully!&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() else: return . Menu with CRUD Procedures . Now that all of the CRUD features are done, I decided to make a menu that takes advantage of the user log-in capabilities I created before. The user starts by logging in (based on the information provided to the users database). After that, the user can make comments, read other comments, or update and delete their own comments. . Because of the forum-like nature of this menu system, the c_read function created above is not used in the menu directly. Instead, the forum function, which also reads comment data, is placed in the menu instead. . udb = &#39;instance/sqlite.db&#39; def login(): # Connect to the database file conn = sqlite3.connect(udb) # Create a cursor object to execute SQL queries cursor = conn.cursor() # get user input uid = input(&quot;Enter your user ID: &quot;) password = input(&quot;Enter your password: &quot;) # Execute a SELECT statement to retrieve data from the table cursor.execute(&quot;SELECT * FROM users WHERE _uid = ? AND _password = ?&quot;, (uid, password)) # fetch the first matching row user = cursor.fetchone() #closing cursor cursor.close() conn.close() #checking if user with matching data exists if user: print(f&quot;Welcome, {user[1]}!&quot;) uid = user[2] c_menu(uid) else: print(&quot;User not found. Make sure that your user ID and password are inputted correctly.&quot;) login() # Even COOLER menu to run other cells from one control point def c_menu(userID): operation = input(&quot;Enter: (C)reate, (R)ead, (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: for enemy in e_read(): print(f&#39;{enemy[&quot;id&quot;]}. {enemy[&quot;name&quot;]}&#39;) make_comment(userID) elif operation.lower() == &#39;r&#39;: forum() elif operation.lower() == &#39;u&#39;: c_update(userID) elif operation.lower() == &#39;d&#39;: c_delete(userID) elif len(operation) == 0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) c_menu(userID) # repeat the menu try: login() # log in to your account except: print(&quot;Bye-bye!&quot;) . Welcome, Drew Reed! 1. Forest Guardian 2. Sea Guardian 3. Terra Guardian 4. Molten Guardian 5. Sky Guardian Enemy found. Please enter a comment. Your comment will look like this: mrdew: His eyes glow red when he&#39;s charging a magic attack, and since they do less damage, you can spend that turn attacking or healing. If his eyes glow blue, it means he&#39;s charging a strong physical attack, so guard! Is this alright? Comment posted successfully! 1. mrdew: He always charges up strong attacks, so guard after he does. He takes more damage from magic attacks, so try setting up weather if you can! 2. mrdew: His eyes glow red when he&#39;s charging a magic attack, and since they do less damage, you can spend that turn attacking or healing. If his eyes glow blue, it means he&#39;s charging a strong physical attack, so guard! Your comment will be permanently deleted. Is that alright? Your comment has been deleted successfully! . Reflection . I had never worked with parent-child objects before this, nor had I understood how to use ForeignKey attributes before this, but I worked on it for a very long time and eventually still got it to work. . Doing this made me realize that sometimes, the procedural, non-object-oriented method we learned in class today is just easier. The classes were a lot to juggle, and I found myself really struggling to jump between the two different methods. . At the same time, I was doing that to demonstrate knowledge. If I didn&#39;t have to do any of that, I could have more easily used two separate sqlite tables together. . Procedural Abstraction Question . We were tasked to answer where procedural abstraction can be seen in our new databases. In mine, it can very easily be seen all throughout the process, starting with the Comment and Enemy class functions and ending with the forum function. In each case, I created new functions to prevent other functions from becoming too bulky or difficult to understand. . For example, I made sure that the primary focus of verify was to log the user in before making a comment. Then, I had it transition into the make_comment function when it was time for that step in the process. . I also used it for e_read so that I could grab the up-to-date enemy table data in an easy-to-manipulate JSON format whenever I needed to in other functions, including make_comment and forum. I think this was some pretty valuable foresight. . The CRUD all works with named procedures to make the menu more accessible. .",
            "url": "https://drewreed2005.github.io/realdrew/2-4blessonnotes/",
            "relUrl": "/2-4blessonnotes/",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4a (Using Programs with Data, SQLAlchemy) Notes",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object:Our Flask servers that we created our databases on obviously used Flask previously. It often ends up in conjunction with... | SQLAlchemy object: This is always associated with our recent database creations. It is used both to work with others&#39; data and create our own. | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class . | class User purpose:Abstracts a user into a specific, named object and creates variables for each of its attributes and traits. . | db.Model inheritance: Takes attributes and aspects of db.Model when creating the Users class. . | __init__ method: Acts as the constructor for the class, which defines each of the object&#39;s attributes. . | @property (getter), @[column].setter (setter): Getter and setter functions, allows for reading an attribute respectively. . | Additional methods: delete and update functions that I use later. . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;, dob=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() else: self.dob = dob db.session.add(self) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work. | . Create All Tables from db Object:The create_all() function creates the SQLite table, allowing for the user objects to be added into it. | User Object Constructors: The user object is created differently for each user variable below. The constructors create a user object with the attributes defined by the arguments provided to the User class. . | Try / Except: Using the try condition means that, if the user creation fails, there is a failsafe to the error in the except case that doesn&#39;t completely destroy the process. It also acts as a validation process. . | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Created new uid toby Created new uid niko Created new uid lex Created new uid whit Created new uid indi Created new uid raven . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by:Finds a specific user and its data based on the given UID, which will then have its password used as a checker. | user.password: Used to varify the password input after getting the UID in question. | def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except:The find_by_uid function is used to define the user function as the user with the given uid variable. However, the find_by_uid process will fail if a user with the inputted uid doesn&#39;t exist. As a result, the print function under the try condition will have an error when trying to read the user variable if it was never defined, and the except condition will occur, using pass to transition in to the user creation process. | user = User(...): The user variable is defined as a User object with the name, user ID and password inputted above. The placement of this definition/initialization process is important because of the user.dob definition (described below). . | user.dob and try/except: After defining user as the User object, the program attempts to create the user&#39;s date of birth based on the inputted year, month and day by directly adding the attribute using user.dob. If the date of birth was inputted incorrectly, the .strptime function will fail and the except condition will be triggered, setting a default user date of birth as the current date. . | user.create() and try/except: The user.create() function adds the user object to the database. This is put within a try condition because, if for some reason this fails, the except function will be used to cancel the process and state that an unknown error occurred. . | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 7, &#39;name&#39;: &#39;AJ Ruiz&#39;, &#39;uid&#39;: &#39;ajbal&#39;, &#39;dob&#39;: &#39;04-16-2006&#39;, &#39;age&#39;: 16} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all:This represents the full table of User data, which is then defined as the local table variable which is iterated through to create the JSON. | json_ready assignment: The json_ready variable represents the correctly-formatted JSON data formed by the procedure beside it. It is then returned with the function. | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;AJ Ruiz&#39;, &#39;uid&#39;: &#39;ajbal&#39;, &#39;dob&#39;: &#39;04-16-2006&#39;, &#39;age&#39;: 16}] . Hacks . Below is evidence of my completion of each of the hacks. . 2.4 College Board Quiz Questions . Here are my results on the 2.4 College Board quiz. . I got 6/6. The questions were all fairly self-explanatory. However, in many cases, it required reading through the problem very thoroughly. . The main reason a lot of the questions weren&#39;t challenging was that certain aspects of the problem were clearly irrelevant to the prompt given, so if I saw an answer providing the use of that aspect in some way, chances were that it was incorrect. Question 3 had most of the &quot;contents&quot; column as completely useless information, and Question 4 had the &quot;Sort by Subject&quot; procedure that was clearly irrelevant to the given prompt. . The only question I had to take some time to think about was question 2, because each of the responses were so detailed and specific to the information provided that I had to focus pretty hard on each of them. . Update Function . In the code cell below, I created a function to update user data in the database. . def update(): # first require uid input uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if user != None: print(&#39;Found user with user ID &quot;&#39; + uid + &#39;&quot;.&#39;) pass else: print(&quot;User not found.&quot;) return # validate user with password password = input(&quot;Enter your password to verify your identity.&quot;) if check_credentials(uid, password): print(&quot;Password varified. You will now input updated user information.&quot;) pass else: print(&quot;Invalid password.&quot;) return # create new User attributes newname = input(&quot;Enter your name.&quot;) newuid = input(&quot;Input a user ID. It can be a new one if you&#39;d like.&quot;) check = find_by_uid(newuid) if (check != &quot;None&quot;) and (check != uid): print(f&quot;The user ID {newuid} is already being used by another user.&quot;) return newps = input(&quot;Input a password. It can be a new one if you&#39;d like.&quot;) newdob = input(&quot;Enter your date of birth in &#39;YYYY-MM-DD&#39; format.&quot;) try: dobconv = datetime.strptime(newdob, &#39;%Y-%m-%d&#39;).date() except ValueError: dobconv = datetime.today() print(f&quot;Invalid date {newdob}: incorrect YYYY-mm-dd format. Date defaulted to {dobconv}&quot;) # update the user in the database with app.app_context(): try: object = user.update(name=newname, uid=newuid, password=newps, dob=dobconv) print(&quot;Updated user: n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error.&quot;) update() . Found user with user ID &#34;kkcbal&#34;. Password varified. You will now input updated user information. Updated user: {&#39;id&#39;: 7, &#39;name&#39;: &#39;AJ Ruiz&#39;, &#39;uid&#39;: &#39;kkcbal&#39;, &#39;dob&#39;: &#39;05-18-2006&#39;, &#39;age&#39;: 16} . Delete Function . Below is a function that allows for the deletion of a certain user if they verify their user ID and password. . def delete(): # first require uid input uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) if user != None: print(&#39;Found user with user ID &quot;&#39; + uid + &#39;&quot;.&#39;) pass else: print(&quot;User not found.&quot;) return # validate user with password password = input(&quot;Enter your password to verify your identity.&quot;) if check_credentials(uid, password): print(&#39;Password varified. User with ID &quot;&#39; + uid + &#39;&quot; will be deleted...&#39;) pass else: print(&quot;Invalid password.&quot;) return with app.app_context(): try: rslt = user.delete() print(&quot;User has been deleted successfully.&quot;) except: print(&quot;There was an unknown error deleting the given user.&quot;) delete() . Found user with user ID &#34;lex&#34;. Password varified. User with ID &#34;lex&#34; will be deleted... User has been deleted successfully. . I decided to delete the user Alexander Graham Bell for an example. After running all of the above processes, the SQLite table looks like this: . ID 3 (Alexander Graham Bell) has been deleted. ID 7 (AJ Ruiz) has been updated since his initial creation (see the output of the Create function).",
            "url": "https://drewreed2005.github.io/realdrew/2-4alessonnotes/",
            "relUrl": "/2-4alessonnotes/",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.3 (Extracting Information from Data, Pandas) Notes",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Identifying Outliers (Interaction) . Some outliers include the grade in student 4 (&quot;Junior&quot;), 5 (&quot;20&quot;) and 8 (&quot;9th Grade&quot;), and the Student ID &quot;nil&quot; for student 9. . Student 4&#39;s GPA also could or could not be correct. This could just be an outlier that&#39;s accurate or it could be a weighting problem. . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) #HOW TO HIDE INDEX, FOR LATER . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 300], &quot;duration&quot;: [50, 40, 45, 35] #I added new values } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 300 35 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 300 35 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) #prints with new data set in mind . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . I hope you saw it during class. . AP Prep . I didn&#39;t make my own questions this time because I learned that we weren&#39;t really intended to do that. I did take the College Board practice quiz, though. . 2.3 College Board Practice Problems . Here are the results of the 2.3 practice questions. . I got 6/6. All of the questions had very clear answers, so I don&#39;t have a lot to reflect on. They were common sense questions above all else. . Personal Dataset Work . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . I decided to try applying Pandas sorting methods to my events database from the Cafe Gato project. . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): global eventdf &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://cgato.duckdns.org/api/events/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement eventdf = pd.DataFrame(json) # filter endpoint for country stats print(eventdf.loc[0:5, &#39;date&#39;:&#39;name&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . date email end_time 0 03/13/2023 fixer@icloud.com 13:00 1 03/01/2023 lucky@magic.com 15:00 2 03/07/2023 downer@icloud.com 13:45 3 02/28/2023 cat@gmail.com 14:00 4 03/04/2023 drewdafox@gmail.com 14:00 event_details 0 We&#39;re gonna fix it! 1 This is the month that St. Patrick&#39;s Day takes... 2 We&#39;re gonna break it down! 3 adsfasdf 4 Test for the class event_name id name 0 The Fix Mix Flicks 3 Fixer Upper 1 Beginning of March Celebration 5 Lucky Leprechaun 2 The Down Breaker Clowns 6 Breaker Downer 3 cat 7 cat 4 Test Day for APCSP 8 Drew Reed . I decided to use Pandas for a process I spent a lot of time and effort on in the frontend... . Date Sorting . Below, I&#39;ve sorted the data both by soonest and by latest. . Earliest . Below is sorted by earliest, plus only shows certain columns to save space. . print(eventdf.loc[0:4, &#39;date&#39;:&#39;event_name&#39;].sort_values(by=[&#39;date&#39;], ascending=True)) . date email end_time 3 02/28/2023 cat@gmail.com 14:00 1 03/01/2023 lucky@magic.com 15:00 4 03/04/2023 drewdafox@gmail.com 14:00 2 03/07/2023 downer@icloud.com 13:45 0 03/13/2023 fixer@icloud.com 13:00 event_details 3 adsfasdf 1 This is the month that St. Patrick&#39;s Day takes... 4 Test for the class 2 We&#39;re gonna break it down! 0 We&#39;re gonna fix it! event_name 3 cat 1 Beginning of March Celebration 4 Test Day for APCSP 2 The Down Breaker Clowns 0 The Fix Mix Flicks . Latest . Below, the data is sorted by latest. . print(eventdf.loc[0:4, &#39;date&#39;:&#39;event_name&#39;].sort_values(by=[&#39;date&#39;], ascending=False)) . date email end_time 0 03/13/2023 fixer@icloud.com 13:00 2 03/07/2023 downer@icloud.com 13:45 4 03/04/2023 drewdafox@gmail.com 14:00 1 03/01/2023 lucky@magic.com 15:00 3 02/28/2023 cat@gmail.com 14:00 event_details 0 We&#39;re gonna fix it! 2 We&#39;re gonna break it down! 4 Test for the class 1 This is the month that St. Patrick&#39;s Day takes... 3 adsfasdf event_name 0 The Fix Mix Flicks 2 The Down Breaker Clowns 4 Test Day for APCSP 1 Beginning of March Celebration 3 cat . Other Online Data . I decided to use a free health statistics API from RapidAPI and try to see things about it with Pandas. It mostly covers the basic health information of servings of common ingredients (so not full recipe details). . It&#39;s a fairly complicated data set, so I ended up spending a while just trying to isolate important data. Below, you can see that I managed to isolate the nutrition information. . import pandas as pd import requests # GET code url = &quot;https://edamam-food-and-grocery-database.p.rapidapi.com/parser&quot; querystring = {&quot;ingr&quot;:&quot;apple&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f9dc4c060fmsh192fef0e86699c6p109981jsn882369c51285&quot;, &quot;X-RapidAPI-Host&quot;: &quot;edamam-food-and-grocery-database.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) json = response.json() nutrients = json[&#39;parsed&#39;][0][&#39;food&#39;][&#39;nutrients&#39;] #fooddf = pd.DataFrame(json[1][&#39;nutrients&#39;]) #print(fooddf) print(nutrients) . {&#39;ENERC_KCAL&#39;: 52.0, &#39;PROCNT&#39;: 0.26, &#39;FAT&#39;: 0.17, &#39;CHOCDF&#39;: 13.81, &#39;FIBTG&#39;: 2.4} . The data above is only for &quot;apple,&quot; however. I decided to try to expand the amount of data by removing the querystring. . In order to translate the acronyms, I had to look at the documentation for the API to correctly label it. . import pandas as pd import requests # GET code url = &quot;https://edamam-food-and-grocery-database.p.rapidapi.com/parser&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f9dc4c060fmsh192fef0e86699c6p109981jsn882369c51285&quot;, &quot;X-RapidAPI-Host&quot;: &quot;edamam-food-and-grocery-database.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) #fetch with no query json = response.json() fooddata = [] #for appending data here for data in json[&#39;hints&#39;]: #reformatting the information for the pandas table newdict = {&#39;Name&#39;:data[&#39;food&#39;][&#39;label&#39;], &#39;Calories&#39;:data[&#39;food&#39;][&#39;nutrients&#39;][&#39;ENERC_KCAL&#39;], &#39;Protein (g)&#39;:data[&#39;food&#39;][&#39;nutrients&#39;][&#39;PROCNT&#39;], &#39;Fat (g)&#39;:data[&#39;food&#39;][&#39;nutrients&#39;][&#39;FAT&#39;], &#39;Carbohydrates (g)&#39;:data[&#39;food&#39;][&#39;nutrients&#39;][&#39;CHOCDF&#39;], &#39;Fiber (g)&#39;:data[&#39;food&#39;][&#39;nutrients&#39;][&#39;FIBTG&#39;]} fooddata.append(newdict) fooddf = pd.DataFrame(fooddata) #print(fooddf) . Since that prints a whole lot of data, I decided to narrow it to the top five. . Here is the top five most protein-rich ingredients in the list. So that it would stay within one line, I made it cut off at &#39;Fat (g)&#39;. . print(fooddf.loc[0:5, &#39;Name&#39;:&#39;Fat (g)&#39;].sort_values(by=[&#39;Protein (g)&#39;], ascending=False)) . Name Calories Protein (g) Fat (g) 4 Cheese, Brick 371.0 23.24 29.68 3 Cheese, Blue 353.0 21.40 28.74 5 Cheese, Brie 334.0 20.75 27.68 0 Butter, Salted 717.0 0.85 81.11 1 Butter, Whipped, With Salt 717.0 0.85 81.11 2 Butter Oil, Anhydrous 876.0 0.28 99.48 . The data that it&#39;s letting me pull is usually at the start of the aphabet. There may be more with the full, paid version of the API. This shows that some variations of cheeses have more protein than others in the full list. . Hack Helpers . To declutter my blog, I decided to delete this section since it&#39;s in the source article anyway. For my own personal reference, it can be found here. .",
            "url": "https://drewreed2005.github.io/realdrew/2-3notes/",
            "relUrl": "/2-3notes/",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 2.2 (Data Compression, Images) Notes",
            "content": "He wants you to give me a seed point. Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . HACKS:Answering Questions . What are commands you use in terminal to access files? | . Often, we use cd and the file path names to enter and exit folders and directories. Sometimes, to see what the exact file path name is, we&#39;ll use ls to list the contents of a folder. It&#39;s a Bash terminal. . What are the command you use in Windows terminal to access files? | . I&#39;m not a Windows user, but I do know that they also use cd but it works slightly differently. They also use dir instead of ls and cd instead of pwd. . What are some of the major differences? | . The main difference as far as I know is that Windows runs Bash commands through WSL. File paths also have different prefixes and overall text in Windows because the File Explorer system is different from Mac&#39;s Finder. . Provide what you observed, struggled with, or leaned while playing with this code. | . One thing I definitely saw was that image file names are a big deal, particularly when calling specific image paths. The volcano image always caused an error because the code said jpg but the image itself is a jpeg. Another thing I saw was the specific necessary formatting I had to put the image data within to display a specific image with the given functions below. The libraries require some rigid use. . Why is path a big deal when working with images? | . Path is what tells the program where to look for the image in question. If it can&#39;t find where to look, the program can&#39;t apply effects to it. . How does the meta data source and label relate to Unit 5 topics? | . In Unit 5, we talked about crediting intellectual property to the person/people responsible for it. Addressing image sources when defining them lets us credit the owner fo the intellectual property. . Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . IPython is intersting not only because Jupyter Notebooks used to be IPython Notebooks, but because IPython, in a similar vein, provides interactive Python cells like those in notebooks. These cells are an alternative method to display and alter images in Jupyter Notebooks. . IPython and Pandas can be used for such things as analyzing and displaying data sets. WOAH, DATA STRUCTURES... . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) # BONUS: printing smiley face smiley_face = image_data(images=[{&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Awesome Smiley&quot;, &#39;file&#39;: &quot;awesomesmiley.jpeg&quot;}]) image_display(smiley_face) . Reading and Encoding Images (IMPLEMENTATIONS HERE) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . PIL Implementation . See all of the stuff in the hacks later. (Click here) . base64 . Image formats (JPG, PNG) are often called Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS. . How is Base64 similar or different to Binary and Hexadecimal? | Translate first 3 letters of your name to Base64. | . base64 Implementation . Base64 is similar to binary and hexadecimal in that it works in specific amounts of bits that hold just enough information for their purposes. While binary has advantages at being a simple form of storing information, Base64 helps to store more complicated data. . First three letters of my name: &quot;Dre&quot; (capitalized) . First three letters in Base64: (&quot;RHJl&quot;) . First three letters of my name: &quot;dre&quot; (not capitalized) . First three letters in Base64: (&quot;ZHJl&quot;) . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . io, BytesIO Implementation . Where have you been a consumer of buffering? | . Buffering is something scattered all over the internet. I most often experience it when watching YouTube or Netflix, since videos require a lot of frames of image data to be loaded over the internet. Many websites have this problem as well:I often find myself waiting for images to load in even on sites like College Board. . From your consumer experience, what effects have you experienced from buffering? | . Buffering really primarily affects my decision to use a site or program or not. I can&#39;t think of any specific website as an example, but I have often stopped consistently playing certain video games because of load times. For example, I used to really enjoy playing Animal Crossing: New Horizons during COVID, but it wasn&#39;t optimized well enough for the Switch console and ended up buffering for more than a whole minute every time I tried to boot up the game. . Buffering can also be helpful for the functionality of a program in my experience. For example, most video games use an &quot;input buffering&quot; system to let an early button press function even after the press is over. This makes the experience more fluid. . How do these effects apply to images? | . Since images are made up of a lot of data (since they are a complex visual form of media), the process of loading an image may be taxing and what information is being pulled and read may be buffered, resulting in lag like we see on many sites. . Data Structures, Imperative Programming Style, and Working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Interacting:Questions . Does this code seem like a series of steps are being performed? | . Yes, because they really are. . Describe Grey Scale algorithm in English or Pseudo code. | . Below, NumPy is used to convert an image to grayscale. This works by taking the average of the three RGB values, then setting each of them as the average. This works because, on the RGB scale, if all three of the RGB values are equal, then they combine to make a shade of gray. If they are all 255, it is black; if they are all 0, it is white. . A special case is put in place for if the image is a PNG. PNG images are special because they are rendered in the RGBA scale, not just RGB. This doesn&#39;t affect the color scale, however; the A value is kept the same while the RGB values are set as the average after the process. . Describe scale image. What is before and after on pixels in three images? | . All of the images below are displayed with a width of 320 pixels, with height adjusted according to the width-height ratio. Before this filtration, the image is displayed with its width and height dictated by the actual resolution of the image, possibly with some slight restrictions from the CSS styling of this blog. Afterward, the width is always set to 320px, and the height is changed according to the initial height-width ratio. . Is scale image a type of compression? If so, does it line it up with College Board terms described? | . Typically, image scaling is not considered a type of data compression, since it doesn&#39;t reduce the amount of data required to represent an image. Instead, image scaling involves changing the size of an image by either increasing or decreasing its resolution. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Awesome Smiley&quot;, &#39;file&#39;: &quot;awesomesmiley.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Awesome Smiley VectorStock JPEG RGB Original size: (216, 233) Scaled size: (320, 345) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpeg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpeg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . My Hacks . These are my hacks. I made sure to respond to every hack mentioned in this section of the template. . Early Seed award . Check out the awesome smiley face added throughout the file. He is BEGGING you to give me a seed point. . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | . I made sure to answer all unanswered questions throughout this note template. I added additional code comments to help understand the code being used, especially with the code above. . In this blog, add College Board practice problems for 2.2 | . See below... . College Board Practice Quiz . Here are the results from the 2.2 practice quiz. . I got 3/3. All of the questions in this quiz were pretty self-explanatory and common sense. . 2.2 College Board Practice Problems . Back when I finished my first draft of this blog and the hacks, I didn&#39;t realize that this section was referring to a College Board quiz; I thought we had to make our own practice questions. I did so below. . Q1. What is true about lossy compression and lossless compression? . Lossy compression involves losing time by perfectly recreating the original file. | Lossless compression involves creating a user report of any errors found in the file. | Lossy compression involves discarding non-necessary information to decrease file size, while lossless compression just eliminates redundant data. | Lossless compression is always preferable to lossy data because lossy data can create serious discrepancies between the original and the compressed version. | Q2. What is sequencing? . A logic structure in which instructions are executed one at a time, in order. | A method of programming which requires instructions to be connected to each other with distinct numerical instructions. | A logic structure in which the most time-consuming functions are executed first and the least time-consuming last. | A method of asynchronous programming used by large teams to connect separate strings of code for efficient collaboration. | One Lossy Image and One Lossless Image . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . This image should be lossily compressed... . This is a PNG image. ...while this image should likely be losslessly compressed. (Though it looks like it has already been lossily compressed before.) . This is a JPEG image. Which kind of compression is based on many factors including file type. Typically, PNGs use lossless compression, and less is lost in simpler images. JPEG images trend toward lossier compression, especially with complex designs. . Ultimately, if an image is very simple, it would more likely be lossily compressed, since nothing of importance will be lost. . When it comes to non-images, videos are often more lossily compressed because the image data takes up a lot of space and individual frames being compressed may not come off as too obvious. Usually files in .zip or .7z format are losslessly compressed, while things such as MPEG and MP3 files are more often lossily compressed. . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . This is the one I haven&#39;t done, since my part of the project doesn&#39;t use images. It is all HTML elements and CSS styling. . Custom PIL Use . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | . I did redscale, bluescale, and greenscale below, along with a weird RGB scale that I was curious about. . Redscale, Bluescale, and Greenscale Filters . See the code below for redscale, bluescale, and greenscale filters. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Awesome Smiley&quot;, &#39;file&#39;: &quot;awesomesmiley.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create redscale Base64 image version def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to red scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create red scale of image redval = pixel[0] # only preserving the red val if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((redval, 0, 0, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((redval, 0, 0)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Create greenscale Base64 image version def image_management_add_html_green(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;green_data&#39;] = [] # key/value for data converted to red scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create green scale of image greenval = pixel[1] # only preserving the green val if len(pixel) &gt; 3: image[&#39;green_data&#39;].append((0, greenval, 0, pixel[3])) # PNG format else: image[&#39;green_data&#39;].append((0, greenval, 0)) # end for loop for pixels img.putdata(image[&#39;green_data&#39;]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Create bluescale Base64 image version def image_management_add_html_blue(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;blue_data&#39;] = [] # key/value for data converted to red scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create blue scale of image blueval = pixel[2] # only preserving the blue val if len(pixel) &gt; 3: image[&#39;blue_data&#39;].append((0, 0, blueval, pixel[3])) # PNG format else: image[&#39;blue_data&#39;].append((0, 0, blueval)) # end for loop for pixels img.putdata(image[&#39;blue_data&#39;]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: redcopy = image greencopy = image bluecopy = image image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; red image -&quot;) image_management(redcopy) image_management_add_html_red(redcopy) display(HTML(redcopy[&#39;html_red&#39;])) print(&quot; green image -&quot;) image_management(greencopy) image_management_add_html_green(greencopy) display(HTML(greencopy[&#39;html_green&#39;])) print(&quot; blue image -&quot;) image_management(bluecopy) image_management_add_html_blue(bluecopy) display(HTML(bluecopy[&#39;html_blue&#39;])) print() . -- original image -- . red image - . green image - . blue image - . -- original image -- . red image - . green image - . blue image - . . And just out of curiosity, I tried a filter that only filtered out green values. I figured it would make it look weird since the greenscale version looked the most normal. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;VectorStock&quot;, &#39;label&#39;: &quot;Awesome Smiley&quot;, &#39;file&#39;: &quot;awesomesmiley.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create redscale Base64 image version def image_management_add_html_weird(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;weird_data&#39;] = [] # key/value for data converted to the weird scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create red scale of image redval = pixel[0] # preserving the red val blueval = pixel[2] # and preserving the blue val if len(pixel) &gt; 3: image[&#39;weird_data&#39;].append((redval, 0, blueval, pixel[3])) # PNG format else: image[&#39;weird_data&#39;].append((redval, 0, blueval)) # end for loop for pixels img.putdata(image[&#39;weird_data&#39;]) image[&#39;html_weird&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; weird image -&quot;) image_management_add_html_weird(image) display(HTML(image[&#39;html_weird&#39;])) print() . -- original image -- . weird image - . . It actually didn&#39;t turn out that weird. . Other PIL Filters . There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Below, I put text over the smile image. . from PIL import Image, ImageDraw, ImageFont # get an image with Image.open(&quot;images/awesomesmiley.jpeg&quot;).convert(&quot;RGBA&quot;) as base: # make a blank image for the text, initialized to transparent text color txt = Image.new(&quot;RGBA&quot;, base.size, (255, 255, 255, 0)) # get a drawing context d = ImageDraw.Draw(txt) # draw text, full opacity d.text((10, 100), &quot;There is text on my smiley face!&quot;, fill=(255, 255, 255, 255)) out = Image.alpha_composite(base, txt) display(out) . I used the default font because other fonts were giving me issues and I didn&#39;t want to have to import a .ttf file myself. .",
            "url": "https://drewreed2005.github.io/realdrew/python/2023/03/06/unit2-2notes.html",
            "relUrl": "/python/2023/03/06/unit2-2notes.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Trimester 2 Final College Board MC Reflection",
            "content": "Results . I got 48/50. This is the first time I’ve gotten questions wrong on these College Board tests, and also the one I struggled with the most. . Problems I Got Wrong . Here are the two problems that I got wrong, both for different reasons. . Question 28 . JavaScript&#39;s &quot;substring&quot; procedure messed me up. As with many problems that I have faced in this class, I am blaming the fact that I got the answer wrong on JavaScript. I’m kind of kidding, but only kind of. . Though I did read the substring procedure call in the table, when I was looking at it, I was still considering the last parameter the index-based endpoint of the substring rather than the length of the segment taken. That’s how it works with the innate JavaScript substring/substr function. As a result, I thought that any code with len(oldString) - 4 as a parameter would then be incorrect since the endpoint should be two substring characters away from the end, not four. . Question 49 . This feels like a trick question. I picked option D mainly because it felt most in line with the wording of “limitation.” It’s a bit of a trick that observations need to be made before “running” the simulation; obviously that’s not true, but I understood that option to mean something closer to “Many observations must be made in order to create and use a useful simulation.” Since the question set up the urban conditions and the complicated nature of the situation, I had assumed the observations would be a limitation. . At the same time, I knew that B was also technically a correct answer, and I’ve answered that exact option on multiple simulation questions before this. It just felt too general for the given situation and made me not want to click it. . Problems I Struggled With . Here are some problems that I had trouble with, many of which I ended up looking up to be sure of my answer. I still haven’t had to look up a question before selecting an answer yet, but I got closer this time than ever before. . Question 8 . My knowledge of Unit 5 falters here. My answer to this question was driven by the smallest shreds of remaining information in my brain about this unit. This is one that I definitely had to look up before I was willing to submit it, and I’m surprised my initial answer was correct. . A digital certificate is also called a public key certificate. This knowledge alone will prevent me from making this same mistake again. . Question 29 . Struggling to read the long set of Boolean. I’ve never seen a set of nested Boolean expressions that contain AND, OR, AND NOT, so I was having trouble telling what would take precedent. I eventually figured out that a OR b would be true because b is true, and since c is true, b AND c becomes true, and the NOT makes it false. Just an overall strange piece of code, but I think I can understand it better now. . Overall Reflection . Here are some things to remember from what I struggled with on this MCQ: . All the stuff about privacy and security from Big Idea 5 (cookies and keys especially) | NOT, AND and OR expressions | I got a simulation problem wrong, so I would say look at those. I really think I understand them fine, though. | Otherwise, I would just look through these problems to see which answers were correct and to look at how they choose incorrect answers so that I know if I’m being tricked. | .",
            "url": "https://drewreed2005.github.io/realdrew/mcqfinaltri2reflection",
            "relUrl": "/mcqfinaltri2reflection",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Events Page Guide for Review",
            "content": "Full Site Link . Please navigate the site linked here to see these achievements first-hand. . Frontend UI . The program contains validations for user inputs in both the frontend and the backend. . Frontend Validation . The validation in the frontend runs based on these conditions: . Description Image . All fields must be filled in. | | . Name, email, event name and event details must all be less than 100 characters to prevent spam. | | . The date inputted must be in the future, but cannot be more than a year in the future. | | . The start and end time of the event must be during the open hours (listed on the &quot;Hours&quot; page). | | . The event cannot last longer than 3 hours so that the events room isn&#39;t too booked all the time. They must be at least 15 minutes long. | | . Name, email, event name, and password must not be duplicates. | | . Additionally, no more than five events can coincide within a time period at a time. There aren&#39;t that many events in the database, so producing an example alert would be difficult and essentially necessitate spam. . Create, Read Options . The create (POST) option exists in the form of the input boxes that let you add an event. . The read (GET) option is the table below it . BONUS: Delete Option . Above the table, a set of input boxes to delete an event allow you to do so if you input the event name and password. . Backend Database . This section focuses on the backend code. You can use the table of contents at the top to skip to raw backend code. . Code Quality and Comments . In order to really see this, skip to the &quot;Raw Code -&gt; Backend Python Code&quot;. I put at least a few comments on every function and class. . Supporting Create and Read . Below is the model code code. . def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None . And below this is the read code. . def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;email&quot;: self.email, &quot;event_name&quot;: self.event_name, &quot;event_details&quot;: self.event_details, &quot;date&quot;: self.date, &quot;start_time&quot;: self.start_time, &quot;end_time&quot;: self.end_time, &quot;password&quot;: self.password } . API GET and POST Methods . The POST method is seen below. . class _Create(Resource): def post(self): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name name = body.get(&#39;name&#39;) if name is None or len(name) &lt; 2: return {&#39;message&#39;: f&#39;Submitter &#39;s name is missing, or is less than 2 characters&#39;}, 210 # validate uid email = body.get(&#39;email&#39;) if email is None or len(email) &lt; 2: return {&#39;message&#39;: f&#39;Email is missing, or is less than 2 characters&#39;}, 210 # look for the rest of the data event_name = body.get(&#39;event_name&#39;) event_details = body.get(&#39;event_details&#39;) date = body.get(&#39;date&#39;) if (date is None) or (len(date) != 10) or (int(date[6:10]) &lt; 2023) or (int(date[6:10]) &gt; 2024): return {&#39;message&#39;: f&#39;Date is missing, formatted incorrectly, or within an invalid time range.&#39;}, 210 start_time = body.get(&#39;start_time&#39;) end_time = body.get(&#39;end_time&#39;) password = body.get(&#39;password&#39;) &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; eo = Event(name=name, email=email, event_name=event_name, event_details=event_details, date=date, start_time=start_time, end_time=end_time, password=password) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database event = eo.create() # success returns json of user if event: return jsonify(event.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {event_name}, either a format error or the event &quot;{event_name}&quot; is a duplicate&#39;}, 210 . And below this is the GET. . class _Read(Resource): def get(self): events = Event.query.all() # read/extract all users from database json_ready = [event.read() for event in events] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps . BONUS: Delete Method . Below is the additional delete method, which has been connected to the frontend as shown above. . class _Delete(Resource): def delete(self): body = request.get_json() #getting the database data for a given event event_id = body.get(&#39;id&#39;) #isolating the ID of the given entry status = deleteID(event_id) #uses the deleteID function from the model if status: return {&#39;message&#39;: f&#39;Successfully deleted event with id {event_id} &#39;} else: return {&#39;message&#39;: f&#39;Event with id {event_id} not found&#39;}, 240 . Raw Code . So that it is all accessible, I figured I would include all of the relevant files for my part of the project. . Frontend Javascript Code . Here is all the code that goes into the frontend. See the comments throughout to understand what is being done and why. . let sorted = false; var pulldata = &quot;&quot;; const read_url = &quot;https://cgato.duckdns.org/api/events&quot;; const read_options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; // &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;, }, }; const post_url = &quot;https://cgato.duckdns.org/api/events/create&quot;; const del_url = &quot;https://cgato.duckdns.org/api/events/delete&quot;; const table = document.getElementById(&quot;evtablecont&quot;); function showEvTable() { create_Table(); document.getElementById(&#39;evlogbtn&#39;).style = &quot;display:none&quot;; document.getElementById(&#39;logrefbtn&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;delControls&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;event_name_del&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;password_del&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;deletebtn&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;evtable&#39;).style = &quot;display:block&quot;; document.getElementById(&#39;filters&#39;).style = &quot;font-size:25px;display:block&quot;; } function time_Dif(start, end) { var hourdif = 60 * (Number(end.substring(0, 2)) - Number(start.substring(0, 2))); var mindif = Number(end.substring(3, 5)) - Number(start.substring(3, 5)); return hourdif + mindif } // THIS IS A PLACEHOLDER FUNCTION FOR WHEN THE API IS RUNNING function submit_Form() { try { fetch(read_url, read_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); }; // valid response will have json data response.json().then(data =&gt; { var form_list = [document.getElementById(&#39;name&#39;).value, document.getElementById(&#39;email&#39;).value, document.getElementById(&#39;event_name&#39;).value, document.getElementById(&#39;event_details&#39;).value, document.getElementById(&#39;date&#39;).value, document.getElementById(&#39;start_time&#39;).value, document.getElementById(&#39;end_time&#39;).value, document.getElementById(&#39;password&#39;).value]; // for loop to ensure all fields were filled in for (let i = 0; i &lt; form_list.length; i++) { if (form_list[i] == &#39;&#39;) { alert(&quot;There was an error processing your form. Make sure all fields are filled in.&quot;); return; }; }; for (let i = 0; i &lt; 4; i++) { if (form_list[i].length &gt; 100) { alert(&quot;There was an error processing your form. Certain input fields have too many characters. Make sure that your name, email, event name, and details are all no more than 100 characters long. (This is a measure to prevent spam.)&quot;) return; }; }; // Defining some variables for validation var tempdate = document.getElementById(&#39;date&#39;).value; var tempstime = document.getElementById(&#39;start_time&#39;).value; var tempetime = document.getElementById(&#39;end_time&#39;).value; var datefix = tempdate.substr(5, 2) + &#39;/&#39; + tempdate.substr(8, 10) + &#39;/&#39; + tempdate.substr(0, 4); const hourdict = [{&quot;open&quot;:10, &quot;close&quot;:18}, {&quot;open&quot;:8, &quot;close&quot;:17}, {&quot;open&quot;:8, &quot;close&quot;:17}, {&quot;open&quot;:8, &quot;close&quot;:17}, {&quot;open&quot;:8, &quot;close&quot;:17}, {&quot;open&quot;:8, &quot;close&quot;:17}, {&quot;open&quot;:10, &quot;close&quot;:18}]; form_list[4] = datefix; var fulldate = datefix + &quot; &quot; + tempstime; let ev_date = new Date(fulldate); let cur_date = new Date(); console.log(ev_date, cur_date); let ev_dow = ev_date.getDay() // validating date var datedif = Math.ceil((ev_date - cur_date) / (1000 * 60 * 60 * 24)); if (1 &gt; datedif || 365 &lt; datedif) { alert(&quot;There was an error processing your form. Make sure the date you have inputted is less than a year in the future.&quot;); return; }; // validating day of the week considering open hours if (Number(tempstime.substring(0, 2)) &lt; hourdict[ev_dow][&quot;open&quot;] || Number(tempstime.substring(0, 2)) &gt;= hourdict[ev_dow][&quot;close&quot;]) { alert(&quot;There was an error processing your form. It seems that your event starts before opening/after closing on &quot; + datefix + &quot;.&quot;); return; } else if (Number(tempetime.substring(0, 2)) &lt;= hourdict[ev_dow][&quot;open&quot;] || Number(tempetime.substring(0, 2)) &gt; hourdict[ev_dow][&quot;close&quot;]) { alert(&quot;There was an error processing your form. It seems that your event ends before opening/after closing on &quot; + datefix + &quot;.&quot;); return; }; // validating event duration (must be at least 15 minutes, less than 3 hours, start must be before end) var timedif = time_Dif(tempstime, tempetime); //in minutes if (timedif &lt; 15 || timedif &gt; 180) { alert(&quot;There was an error processing your form. Make sure that your event lasts at least 15 minutes, but no more than 3 hours.&quot;) return; }; // validating coincidence and email var coinc = 0; for (let i = 0; i &lt; data.length; i++) { temppull = data[i]; if (temppull[&#39;date&#39;] == datefix) { if (Number(tempstime.substring(0, 2)) &lt;= Number(temppull[&#39;start_time&#39;].substr(0, 2)) &lt; Number(tempetime.substring(0, 2)) || Number(tempstime.substring(0, 2)) &lt; Number(temppull[&#39;end_time&#39;].substr(0, 2)) &lt;= Number(tempetime.substring(0, 2))) {coinc = coinc + 1;}; }; if (temppull[&#39;email&#39;] == form_list[1]) { alert(&quot;There was an error processing your form. It seems that an event has already been created by that email. If someone has used your address to create an event without your consent, contact our staff.&quot;); return; }; }; if (coinc &gt; 5) { alert(&quot;There was an error processing your form. Make sure that your event&#39;s timing does not coincide with the timing of more than five other events.&quot;); return; }; // if all validations successful const body = { &quot;name&quot;: document.getElementById(&#39;name&#39;).value, &quot;email&quot;: document.getElementById(&#39;email&#39;).value, &quot;event_name&quot;: document.getElementById(&#39;event_name&#39;).value, &quot;event_details&quot;: document.getElementById(&#39;event_details&#39;).value, &quot;date&quot;: datefix, &quot;start_time&quot;: document.getElementById(&#39;start_time&#39;).value, &quot;end_time&quot;: document.getElementById(&#39;end_time&#39;).value, &quot;password&quot;: document.getElementById(&#39;password&#39;).value }; const post_options = { method: &#39;POST&#39;, body: JSON.stringify(body), headers: { &#39;Content-Type&#39;:&#39;application/json&#39;, &#39;Authorization&#39;: &#39;Bearer my-token&#39;, }, }; console.log(body); fetch(post_url, post_options) .then(response =&gt; response.json().then(data =&gt; { console.log(data); }) ) alert(&quot;Thank you, &quot; + form_list[0] + &quot;, for submitting an event! Watch your email for a confirmation message. n n(Warning: Please do not submit two events at a time! Your events may end up being cancelled as a result.)&quot;); }); }); } catch (err) { alert(&quot;There was an error processing your form. (Failed to send to/pull from the database, or there was an error in the formatting of your form. Make sure you&#39;re on unrestricted WiFi.)&quot;); }; }; // prepare HTML result container for new output function create_Table() { // fetch the API fetch(read_url, read_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); } // valid response will have json data response.json().then(data =&gt; {table_Make(data)}) }); }; function table_Make(list) { table.innerHTML = &quot;&quot;; list.forEach(user =&gt; { // build a row for each user const tr = document.createElement(&quot;tr&quot;); // td&#39;s to build out each column of data const name = document.createElement(&quot;td&quot;); const email = document.createElement(&quot;td&quot;); const event_name = document.createElement(&quot;td&quot;); const event_details = document.createElement(&quot;td&quot;); const date = document.createElement(&quot;td&quot;); const start_time = document.createElement(&quot;td&quot;); const end_time = document.createElement(&quot;td&quot;); // filter times var temp_stime = user.start_time; var temp_etime = user.end_time; if (Number(temp_stime.substring(0, 2)) &gt; 12) { var temp_shr = Number(temp_stime.substring(0, 2)) - 12; var new_stime = String(temp_shr) + temp_stime.substring(2, 5) + &quot; PM&quot;; } else { var new_stime = temp_stime + &quot; AM&quot; } if (Number(temp_etime.substring(0, 2)) &gt; 12) { var temp_ehr = Number(temp_etime.substring(0, 2)) - 12; var new_etime = String(temp_ehr) + temp_etime.substring(2, 5) + &quot; PM&quot;; } else { var new_etime = temp_etime + &quot; AM&quot; } // add content from user data name.innerHTML = user.name; email.innerHTML = user.email; event_name.innerHTML = user.event_name; event_details.innerHTML = user.event_details; date.innerHTML = user.date; start_time.innerHTML = new_stime; end_time.innerHTML = new_etime; // add data to row tr.appendChild(name); tr.appendChild(email); tr.appendChild(event_name); tr.appendChild(event_details); tr.appendChild(date); tr.appendChild(start_time); tr.appendChild(end_time); // add row to table table.appendChild(tr); }); }; var soonval = &quot;placeholder&quot;; var soon_fulldate = &quot;placeholder&quot;; var temp_soondate = &quot;placeholder&quot;; var lateval = &quot;placeholder&quot;; var late_fulldate = &quot;placeholder&quot;; var temp_latedate = &quot;placeholder&quot;; function sort_Events() { var orderval = document.getElementById(&quot;timesort&quot;).value; var monthval = document.getElementById(&quot;monthfil&quot;).value; var sorted_List = []; // fetch the API fetch(read_url, read_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); }; // valid response will have json data response.json().then(data =&gt; { var testcopy = [...data]; var d_length = testcopy.length; if (orderval == &quot;time_submitted&quot;) { testcopy.forEach(event =&gt; {sorted_List.push(event)}); } else if (orderval == &quot;soonest&quot;) { for (let j = 0; j &lt; d_length; j++) { let i = 0; testcopy.forEach(event =&gt; { if (i == 0) { soon_fulldate = event[&#39;date&#39;] + &quot; &quot; + event[&#39;start_time&#39;]; temp_soondate = new Date(soon_fulldate); soonval = event; } else { var temp_fulldate = event[&#39;date&#39;] + &quot; &quot; + event[&#39;start_time&#39;]; var temp_evdate = new Date(temp_fulldate); if (temp_evdate.getTime() &lt; temp_soondate.getTime()) { soon_fulldate = event.date + &quot; &quot; + event.start_time; temp_soondate = new Date(soon_fulldate); soonval = event; }; }; i = i + 1; }); sorted_List.push(soonval); for (let i = 0; i &lt; testcopy.length; i++) { if (testcopy[i] == soonval) { testcopy.splice(i, 1); }; }; }; } else if (orderval == &quot;latest&quot;) { for (let j = 0; j &lt; d_length; j++) { let i = 0; testcopy.forEach(event =&gt; { if (i == 0) { late_fulldate = event[&#39;date&#39;] + &quot; &quot; + event[&#39;start_time&#39;]; temp_latedate = new Date(late_fulldate); lateval = event; } else { var temp_fulldate = event[&#39;date&#39;] + &quot; &quot; + event[&#39;start_time&#39;]; var temp_evdate = new Date(temp_fulldate); if (temp_evdate.getTime() &gt; temp_latedate.getTime()) { late_fulldate = event.date + &quot; &quot; + event.start_time; temp_latedate = new Date(late_fulldate); lateval = event; }; }; i = i + 1; }); sorted_List.push(lateval); for (let i = 0; i &lt; testcopy.length; i++) { if (testcopy[i] == lateval) { testcopy.splice(i, 1); }; }; }; }; var final_List = []; for (let k = 0; k &lt; sorted_List.length; k++) { if (sorted_List[k][&#39;date&#39;].substring(6, 10) == monthval.substring(0, 4)) { if (sorted_List[k][&#39;date&#39;].substring(0, 2) == monthval.substring(5, 7)) {final_List.push(sorted_List[k])} else {}; } else {}; }; table_Make(final_List); }); }); }; function delete_Event() { var del_ename = document.getElementById(&quot;event_name_del&quot;).value; var del_password = document.getElementById(&quot;password_del&quot;).value; var success = false; fetch(read_url, read_options) // response is a RESTful &quot;promise&quot; on any successful fetch .then(response =&gt; { // check for response errors if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); }; // valid response will have json data response.json().then(data =&gt; { data.forEach(event =&gt; { if (event[&#39;event_name&#39;] == del_ename &amp;&amp; event[&#39;password&#39;] == del_password) { // if all validations successful const del_ID = event[&#39;id&#39;]; const body = { &#39;id&#39;:del_ID }; const del_options = { method: &#39;DELETE&#39;, body: JSON.stringify(body), headers: { &#39;Content-Type&#39;:&#39;application/json&#39;, &#39;Authorization&#39;: &#39;Bearer my-token&#39;, }, }; console.log(body); fetch(del_url, del_options) .then(response =&gt; response.json().then(data =&gt; { console.log(data); }) ) alert(&#39;You have successfully deleted the event &quot;&#39; + event[&#39;event_name&#39;] + &#39;&quot; from the events database.&#39;); success = true; } }) if (success == false) {alert(&quot;There was an error in one of the two fields you have filled in. Make sure that your event name and password both match the case used when first created. (You can copy-paste the event name from the data below.)&quot;)} }) }) } . Backend Python Code . This is the code behind our backend server. It is primarily responsible for running the database we use. . Events Model Code . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from random import randrange from datetime import date import os, base64 import json from __init__ import app, db from sqlalchemy.exc import IntegrityError &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Event(db.Model): __tablename__ = &#39;events&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) #_uid = db.Column(db.String(255), unique=True, nullable=False) _email = db.Column(db.String(255), unique=False, nullable=False) _event_name = db.Column(db.String(255), unique=False, nullable=False) _event_details = db.Column(db.String(255), unique=False, nullable=False) _date = db.Column(db.String(255), unique=False, nullable=False) _start_time = db.Column(db.String(255), unique=False, nullable=False) _end_time = db.Column(db.String(255), unique=False, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, email, event_name, event_details, date, start_time, end_time, password): self._name = name self._email = email self._event_name = event_name self._event_details = event_details self._date = date self._start_time = start_time self._end_time = end_time self._password = password #here&#39;s the name getter @property def name(self): return self._name #here&#39;s the name setter @name.setter def name(self, name): self._name = name #here&#39;s the email getter @property def email(self): return self._email #here&#39;s the email setter @email.setter def email(self, email): self._email = email #here&#39;s the event_name getter @property def event_name(self): return self._event_name #here&#39;s the event_name setter @event_name.setter def event_name(self, event_name): self._event_name = event_name #here&#39;s the event_details getter @property def event_details(self): return self._event_details #here&#39;s the event_details setter @event_details.setter def event_details(self, event_details): self._event_details = event_details #here&#39;s the date getter @property def date(self): return self._date #here&#39;s the date setter @date.setter def date(self, date): self._date = date #here&#39;s the start_time getter @property def start_time(self): return self._start_time #here&#39;s the start_time setter @start_time.setter def start_time(self, start_time): self._start_time = start_time #here&#39;s the end_time getter @property def end_time(self): return self._end_time #here&#39;s the end_time setter @end_time.setter def end_time(self, end_time): self._end_time = end_time #here&#39;s the password getter @property def password(self): return self._password #here&#39;s the password setter @password.setter def password(self, password): self._password = password # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;email&quot;: self.email, &quot;event_name&quot;: self.event_name, &quot;event_details&quot;: self.event_details, &quot;date&quot;: self.date, &quot;start_time&quot;: self.start_time, &quot;end_time&quot;: self.end_time, &quot;password&quot;: self.password } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, email=&quot;&quot;, event_name=&quot;&quot;, event_details=&quot;&quot;, date=&quot;&quot;, start_time=&quot;&quot;, end_time=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(email) &gt; 0: self.email = email if len(event_name) &gt; 0: self.event_name = event_name if len(event_details) &gt; 0: self.event_details = event_details if len(date) &gt; 0: self.date = date if len(start_time) &gt; 0: self.start_time = start_time if len(end_time) &gt; 0: self.end_time = end_time if len(password) &gt; 0: self.password = password db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initEvents(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table e1 = Event(name=&quot;Thomas Edison&quot;, email=&quot;tedison@lightbulb.edu&quot;, event_name=&quot;The Edison Troupe Meet&quot;, event_details=&quot;We 10 selected geniuses will meet in the events room for a convergence.&quot;, date=&quot;02/23/2023&quot;, start_time=&quot;13:00&quot;, end_time=&quot;14:00&quot;, password=&quot;tedisonrules20&quot;) e2 = Event(name=&quot;John Mortensen&quot;, email=&quot;jmortensen@powayusd.com&quot;, event_name=&quot;Extra Credit Code Meetup&quot;, event_details=&quot;Come to work on ideation and any confusion with the Full Stack CPT project. No phones.&quot;, date=&quot;02/25/2023&quot;, start_time=&quot;10:00&quot;, end_time=&quot;12:00&quot;, password=&quot;codec0decod3bro&quot;) e3 = Event(name=&quot;Karl Giant&quot;, email=&quot;giantrichguy@wallstreet.org&quot;, event_name=&quot;Karl and Cats&quot;, event_details=&quot;Karl would like to see cats with friends (if he can fit in the building).&quot;, date=&quot;02/26/2023&quot;, start_time=&quot;16:00&quot;, end_time=&quot;17:00&quot;, password=&quot;i_am-the-f4th3r&quot;) events = [e1, e2, e3] #Builds sample events data for event in events: try: event.create() except IntegrityError: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; db.session.remove() print(f&quot;Records exist, duplicate data, or error: {event.event_name}&quot;) &quot;&quot;&quot; def deleteID(event_id): event = Event.query.get(event_id) #getting an event from the database based on ID #user = Wordle.query.filter_by(name=name).first() if event != None: print(&quot;Query 1:&quot;, event) #prints the one query if it finds one db.session.delete(event) #deletes the event with the db.session innate function db.session.commit() #commits the change return True else: print(&quot;event &quot;+str(event_id)+&quot; not found&quot;) #if the event isn&#39;t found, the display is provided return False . Events API File . from flask import Flask, Blueprint, request, jsonify from flask_restful import Api, Resource # used for REST API building from datetime import * from flask_cors import CORS from model.events import Event, deleteID event_api = Blueprint(&#39;event_api&#39;, __name__, url_prefix=&#39;/api/events&#39;) # API docs https://flask-restful.readthedocs.io/en/latest/api.html api = Api(event_api) class EventAPI: class _Create(Resource): def post(self): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate name name = body.get(&#39;name&#39;) if name is None or len(name) &lt; 2: return {&#39;message&#39;: f&#39;Submitter &#39;s name is missing, or is less than 2 characters&#39;}, 210 # validate uid email = body.get(&#39;email&#39;) if email is None or len(email) &lt; 2: return {&#39;message&#39;: f&#39;Email is missing, or is less than 2 characters&#39;}, 210 # look for the rest of the data event_name = body.get(&#39;event_name&#39;) event_details = body.get(&#39;event_details&#39;) date = body.get(&#39;date&#39;) if (date is None) or (len(date) != 10) or (int(date[6:10]) &lt; 2023) or (int(date[6:10]) &gt; 2024): return {&#39;message&#39;: f&#39;Date is missing, formatted incorrectly, or within an invalid time range.&#39;}, 210 start_time = body.get(&#39;start_time&#39;) end_time = body.get(&#39;end_time&#39;) password = body.get(&#39;password&#39;) &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; eo = Event(name=name, email=email, event_name=event_name, event_details=event_details, date=date, start_time=start_time, end_time=end_time, password=password) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create user in database event = eo.create() # success returns json of user if event: return jsonify(event.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {event_name}, either a format error or the event &quot;{event_name}&quot; is a duplicate&#39;}, 210 class _Read(Resource): def get(self): events = Event.query.all() # read/extract all users from database json_ready = [event.read() for event in events] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps class _Delete(Resource): def delete(self): body = request.get_json() #getting the database data for a given event event_id = body.get(&#39;id&#39;) #isolating the ID of the given entry status = deleteID(event_id) #uses the deleteID function from the model if status: return {&#39;message&#39;: f&#39;Successfully deleted event with id {event_id} &#39;} else: return {&#39;message&#39;: f&#39;Event with id {event_id} not found&#39;}, 240 # building RESTapi endpoint api.add_resource(_Create, &#39;/create&#39;) api.add_resource(_Read, &#39;/&#39;) api.add_resource(_Delete, &#39;/delete&#39;) .",
            "url": "https://drewreed2005.github.io/realdrew/guideforreviewevents/",
            "relUrl": "/guideforreviewevents/",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Cafe Gato Events - College Board Outline",
            "content": "Overview . My portion of our group project, Cafe Gato (an online marketing campaign for a hypothetical cat cafe), is an events database. A user can use a frontend endpoint to create an event (provided it passes validation requirements) and view other events read from a backend endpoint. This data can be filtered by various attributes on the frontend. . Video . The video can be found here. This is an edited version created for the teachers’ review ticket. An unedited version can be created if necessary for College Board standards. . Purpose and Function . The purpose of the program is to promote community interaction and cat cafe business consistency through user-created events hosted by the cat cafe. Another purpose of the program is to aid a given cat cafe business in validating and organizing the events that will be hosted at their location. . The function of the program is to add user-created events to a cat cafe-hosted database, with validation requirements built into the input to ensure all events in the system are valid. Other functions include allowing users or administrators to delete events for any reason and allowing interested customers to look at and sort future events so that they can possibly attend one. . Input and Output . The input of the program is various written event attributes in the form of text inputs on the frontend. The output is the alert which either points out an error in the attributes or expresses that the event has been added to the database. The event’s presence itself within the database is also an output. . Data Abstraction . The list sorted_List is shown being formed based on the values of the sort input windows. In order either soonest to latest or latest to soonest (based on the frontend input windows), events are pushed to sorted_List. . The list sorted_List is shown being finished here and, at the end, the list is used as a reference for the formation of the final_List variable, which is formed with only entries from the given month. . The sorted_List variable represents a list of events organized either soonest to latest or latest to soonest, depending on the input values. . Importance . The data within this list, including its index order, is important because its organization is then translated to the final_List variable which selectively carries over values from it. Without this specific list, the data would be very difficult to order correctly. . In terms of purpose, this list allows users to see events in date order, meaning that users in the community can more easily see which events they may go to. . Managing Complexity . This list helps the programs because it allows the program to take advantage of the way that indexes can represent a chronological organization of data. That chronological organization means that, with just a basic for loop which increments the index value of i by one, adding to the final_List list variable with the push function allows it to remain in in chronological order despite removing specific entries. . If, for example, the data was defined as a bunch of individual variables, this would make the program far more complex because the data would be numerous and uncollected. Having it in the form of a list allows it to efficiently represent both its data and is chronological placement relative to the date sort prompt. . Procedural Abstraction . function table_Make(list) { table.innerHTML = &quot;&quot;; list.forEach(user =&gt; { // build a row for each user const tr = document.createElement(&quot;tr&quot;); // td&#39;s to build out each column of data const name = document.createElement(&quot;td&quot;); const email = document.createElement(&quot;td&quot;); const event_name = document.createElement(&quot;td&quot;); const event_details = document.createElement(&quot;td&quot;); const date = document.createElement(&quot;td&quot;); const start_time = document.createElement(&quot;td&quot;); const end_time = document.createElement(&quot;td&quot;); // filter times var temp_stime = user.start_time; var temp_etime = user.end_time; if (Number(temp_stime.substring(0, 2)) &gt; 12) { var temp_shr = Number(temp_stime.substring(0, 2)) - 12; var new_stime = String(temp_shr) + temp_stime.substring(2, 5) + &quot; PM&quot;; } else { var new_stime = temp_stime + &quot; AM&quot; } if (Number(temp_etime.substring(0, 2)) &gt; 12) { var temp_ehr = Number(temp_etime.substring(0, 2)) - 12; var new_etime = String(temp_ehr) + temp_etime.substring(2, 5) + &quot; PM&quot;; } else { var new_etime = temp_etime + &quot; AM&quot; } // add content from user data name.innerHTML = user.name; email.innerHTML = user.email; event_name.innerHTML = user.event_name; event_details.innerHTML = user.event_details; date.innerHTML = user.date; start_time.innerHTML = new_stime; end_time.innerHTML = new_etime; // add data to row tr.appendChild(name); tr.appendChild(email); tr.appendChild(event_name); tr.appendChild(event_details); tr.appendChild(date); tr.appendChild(start_time); tr.appendChild(end_time); // add row to table table.appendChild(tr); }); }; . This code shows the algorithm behind the function table_Make. . This code shows the table_Make function being called by the create_Table function. . This function contributes to the program by allowing it to express the database data in a table that is easy for a user to understand. It converts the traditional military time format that the database uses to standard AM/PM time. Its use of the parameter list allows the function to be used to display both the default data set of the database and a sorted version of it. . Algorithm Implementation . This function starts by emptying the table to make sure that new data is not added on top of the old data. A forEach function is then used to iterate through every event dictionary provided in the list (which is the parameter). All of the rows are first created under descriptive variables. Then, the start time and end time are selected if the hour is expressed as a number greater than 12 and converted to a PM time. If not, &quot; AM&quot; is simply concatenated to the back of a replacement variable for both the start time and the end time. These replacement variables, which are created regardless of whether or not the time is selected, are then defined as the innerHTML of the start and end time rows respectively. The other rows have their innerHTML defined as the corresponding variables shown in the dictionaries. These columns of information are appended into a row, and that row is then appended to a table that collects all of it. . Iteration is used when iterating through the events in the event parameter using the forEach function. . Selection is used with an if statement that defines a replacement “PM” time for military times with hours expressed as numbers greater than 13. . Sequencing is used to ensure that all used variables are defined before being called. The columns are also filled in in order before being appended to the rows, and the rows are fully filled in before being appended to the table. . Testing . In this section, I test this table creation function function. . Test Conditions . The first call of table_Make has the parameter list expressed as the following: . [ { &quot;date&quot;: &quot;03/01/2023&quot;, &quot;email&quot;: &quot;lucky@magic.com&quot;, &quot;end_time&quot;: &quot;15:00&quot;, &quot;event_details&quot;: &quot;This is the month that St. Patrick&#39;s Day takes place, so we&#39;re celebrating.&quot;, &quot;event_name&quot;: &quot;Beginning of March Celebration&quot;, &quot;name&quot;: &quot;Lucky Leprechaun&quot;, &quot;start_time&quot;: &quot;13:00&quot; } ] . The second test defines the parameter as the following: . [ { &quot;date&quot;: &quot;03/13/2023&quot;, &quot;email&quot;: &quot;fixer@icloud.com&quot;, &quot;end_time&quot;: &quot;13:00&quot;, &quot;event_details&quot;: &quot;We&#39;re gonna fix it!&quot;, &quot;event_name&quot;: &quot;The Fix Mix Flicks&quot;, &quot;name&quot;: &quot;Fixer Upper&quot;, &quot;start_time&quot;: &quot;11:50&quot; } ] . Test Outputs . The outputs of the tests produce different tables and rely on different parts of the code (the selection if statement specifically) for their outputs. See the explanations below. . Test 1 . For both the start and end time, the procedure relied on the if (Number(temp_(e or s)time.substring(0, 2)) &gt; 12) because both times were PM times. . Test 2 . While the end time for this one still called on the if condition, since the start time “11:50” is an AM time, it called on the else condition which instead concatenated &quot;AM&quot; to the unchanged time data string. .",
            "url": "https://drewreed2005.github.io/realdrew/eventscboutline",
            "relUrl": "/eventscboutline",
            "date": " • Feb 26, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Story Demo",
            "content": "left text left portrait game image This is a test to see how far the text in this box goes. I just want to see how much I can fit before I have to make a new line. (CUTOFF) right text right portrait scene_box_inscene_box_out",
            "url": "https://drewreed2005.github.io/realdrew/cstory",
            "relUrl": "/cstory",
            "date": " • Feb 24, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Layout Demo",
            "content": "top fish mid fish bottom fish game image This is a test to see how far the text in this box goes. I just want to see how much I can fit before I have to make a new line. (CUTOFF) top fish mid fish bottom fish scene_box_inscene_box_out",
            "url": "https://drewreed2005.github.io/realdrew/cgame",
            "relUrl": "/cgame",
            "date": " • Feb 18, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Night at the Museum 2 Blog",
            "content": "Introduction . Due to prior commitments, I was only able to stay until around 6:45 when we were called at 6, so I didn’t get to see a lot of the following periods’ projects. However, while I was there, I was able to look at plenty of our periods’ projects and reflect on their functionality. We also got some valuable feedback that I discuss below. . Our Presentation . When we presented Cafe Gato to the people at the event, we received a lot of valuable feedback. I made sure to note it before we presented our full stack the following day. . The people we saw enjoyed the events page, but some were a bit frustrated by how unclear the open hours could be at times. It probably would have been best to list the hours on the events page rather than giving them their own page. Otherwise, they seemed to enjoy the freedom that the events database gave them. . The Wordle game was a hit because people recognized it and enjoyed it. Having it be unlimited made people want to stay for a while to play it. The RPG was similarly popular, but harder to recognize as a familiar type of game. People enjoyed the freedom it provided you in terms of what you can do before fighting the boss, but some people commented that which terms could be typed in for various actions weren’t completely clear. . The reviews database was also popular because Tanisha gave them the goal of raising the average star rating above 4.0. This made people more inclined to test the functionality of the system. The only issue that came up was that the numerical rating wasn’t properly bounded between 1 and 5, so someone was able to come buy and mess up the rating temporarily. . Group picture Other Groups . During and after our period to present, we all took turns going around to various other projects and seeing their functions. We were pretty impressed by what we saw. . We thought this program was really insightful and helpful for people looking to improve their diet. We were very impressed by the functionality and frontend styling of this site. It seemed to have a wide range of uses for academic students. We spent some time playing this game. Aside from some strange functionality with countries that had long names (&quot;Congo, the Dominican Republic of&quot; was a bit hard to guess due to the formatting), it was kind of addictive and really tested our knowledge. This site made me wish I was more interested in cars. I&#39;m sure someone who really knew a lot about them would enjoy it a lot. Luke&#39;s &quot;Movie Chat&quot; was the most charming dysfunctional program I ever gosh darn seen in my life. I left a recommendation for the new Puss in Boots movie. It was hard to get to everyone because it was very crowded, but overall, the output was impressive. We kept saying things like “What if we had done ___ instead?” or “I kind of which we had done something like that…” . Other Classes . Here’s a funny little FNAF 3D art piece. . Uh oh I really liked this octopus for some reason. Aliya agrees.",
            "url": "https://drewreed2005.github.io/realdrew/natmblog2",
            "relUrl": "/natmblog2",
            "date": " • Feb 16, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Big Idea 5.5 and 5.6 Notes - Legal/Ethical Concerns and Safe Computing",
            "content": "5.5 - Lesson Notes . We talked a lot about copyright and how it is sometimes exploited to claim ownership of things that companies do not own purely because there’s some slight resemblance. Ultimately, we came to the conclusion that copyright as a concept is very important, but its execution leaves room for smaller creators or work inspired by a separate source to be exploited and blocked. . We also talked about how we would always expect credit for our artistic or academic endeavors; we wouldn’t want people stealing our essays, artwork or music compositions without clear credit. . On GitHub, we use licenses to ensure that our work is properly credited by giving instructions for the use of our code/content. . Hacks Reflection . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. . The licenses ask different things of those who wish to make work plagiar-inspired by ours. Some licenses, like the MIT license, allows for closed source versions of the original work as long as the original authors are credited. GPL, on the other hand, asks that no closed source versions be created; the work can be used in pretty much any other way aside from that. . In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . See the “Lesson Notes” section above. . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. . Our group decided on an open source MIT license. Our site doesn’t provide one completely unique service. Instead, we apply our own takes on various existing ideas and collect them into a single service. With that in mind, it didn’t make sense to close off our work in a serious way; we just want credit for our original work. . We copyrighted it under all of our names. 5.6 - Lesson Notes . We started by talking a lot about what happens when we Google ourselves. Most of us said that we see people who have the same name, but others said they could find their picture and various other information about them on social media accounts, Linkedin, etc. . We talked about things we would be okay with being online (everyone was okay with names, but some didn’t want even photos, email, or any sort of means of contact available) and other things that we definitely wouldn’t want online (social security number, bank account information, computer and account passwords, daily schedule, etc.). . We moved on to talking about how we’re able to protect that information. Someone brought up two-factor authentication, and that moved us onto the topic of how we can protect this information. We talked about encryption and other types of personal identification for logins and symmetrical/asymmetrical cryptography, but never got to things like biometrics. We talked about two-factor authentication (like getting confirmation emails), and how we can avoid malware and phishing. . The latter brought us to a broader topic of how we can prevent the more vulnerable among us from being exploited by scammers and phising attempts. We talked about having the responsiblility to teach those who aren’t very tech-savvy (especially the elderly) about how those scams work and make sure they have resources they can go to in order to check if they are being scammed or not. I brought up that I think it’s important for search engines and other programs like remote-access software providers to take some responsibility in the problem when their programs are used for these scams; this would mean Google, Firefox, Microsoft Edge, etc. would have to pay more attention to fake popups on misspelled URLs, and remote access software should have clearer disclaimers about possible scams or even have certain limits on remote access from across the globe (since most people who run tech scams in the United States don’t live locally, but instead in India). . Hacks Reflection . Describe PII you have seen on project in CompSci Principles. . There were a bunch of projects that were presented last week that advertised some kind of personal login system and leaderboard system. However, on a more personal level, the grade checker software, for example, asked for some more personal information about your school (which would locate you), as well as your name, grade (close to age), and grades. This would require some kind of strong encryption. . What are your feelings about PII and your personal exposure? . Personally, I am fine with my name, picture, and age being out there. I do theatre, so it’s kind of a good thing to have my name out there. When you look up my name and look past all of the other old white guys, you’ll find local newspaper articles that talk about my roles in Del Norte productions, which makes me a little worried about being found by people like my overseas online friends or people across the globe who watch my YouTube channel (it’s not huge and is mostly inactive, but when I upload something in the near future, I’ll gain some more viewership). Overall, I’m very cautious with my personal information. I get squeamish when a trustworthy site asks me to input personal information; even sites like my bank concern me. I know a lot about scams, though, from watching videos of people leading scammers on or stealing their information, so I feel that I’ll be able to avoid having my personal information stolen by some kind of scam. . Describe good and bad passwords? What is another step that is used to assist in authentication. . Good passwords are passwords that contain a unique set of characters that cannot be guessed by knowing other personal information about you. Bad passwords are predictable knowing you or cliche, like “password1234” or your name backward. Two-factor authentication, such as when you’re sent a confirmation email, is a good way to confirm that you’re really the person accessing your account, since only the person with the email’s password can use the email to confirm their identity. . Try to describe Symmetric and Asymmetric encryption. . Symmetric encryption uses the same key to encrypt and decrypt data, while asymmetric encryption uses two keys: a public encryption key and a private decryption key. . Provide an example of encryption we used in AWS deployment. . AES-256 encryption is one of the defaults for AWS. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. . I don’t know what it was that I downloaded (I download a lot of dubious game roms for emulators, so there’s a lot it could’ve been), but something gave me a virus that just opened up Tor browser to (what I’m assuming is a) fake shopping page. I’m pretty sure trying to buy any of the items would have asked me for personal information that it would just steal. . I watch lots of videos about various tech support scams from people like Kitboga and Jim Browning. There are scams that involve fake refunds that claim to refund way more money than intended (by editing the HTML of your bank page), and you have to pay it back with gift cards. Other scams ask for you to advertise fake house listings for them, then redirect interested buyers of the fake ads to the scammers. .",
            "url": "https://drewreed2005.github.io/realdrew/5'5&5'6notes",
            "relUrl": "/5'5&5'6notes",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Big Idea 5.3 and 5.4 Notes - Computer Bias and Crowdsourcing",
            "content": "5.3 - Lesson Notes . The hacks for this section are to summarize and give our takes on the discussion from class. . Algorithmic Bias . Computer bias often comes in the form of algorithms. Algorithms like to appeal to their common markets, such as Facebook including advertisements that are more appealing to the older generation while TikTok appeals to the youth. . We had a long discussion about female voices on A.I. systems. Ultimately, we decided that, while the roots of the decision may show signs of stereotyping, the fact that there are many more voices to choose from and that the creators likely collected consumer data about different voices makes it more likely that they picked a female default because it simply appealed more to the majority. . Algorithms are quite prominent in applications that want you glued to them: YouTube, Instagram, Netflix, Amazon, etc. While it can be harmful if, for example, someone consumes political content on YouTube and ends up stuck in an extremist echochamber without hearing other sides, usually these algorithms are to the benefit of the user. By curating content based on your past experience, sites like Netflix and YouTube get better at recommending media that you will enjoy most. I would argue that it is a net benefit for both parties. . Are HP Computers Racist? . No. While the data definitely doesn’t paint a very includive or responsible picture of HP testers, there isn’t any clear intent to discriminate behind the camera. Either way, it’s definitely a harmful quirk of the camera’s poor programming, and is definitely the fault of HP for not realizing. . I would argue that the best way to prevent this bad outcome is to test systems, especially those that are intended to work with people with lots of different appearances, with wide, diverse ranges of testers. A good way to collect a lot of data may be to film lots of different people in a public area. . 5.4 - Lesson Notes . Crowdsourcing is using large groups of people to collect data. We can see it quite commonly with sites like Wikipedia, Swagbucks, and Opinion Outpost, and it has a hand in cryptocurrency, block chain algorithms, and COVID data. . Crowdsourcing exists in what we’ve learned about in this class. It can be seen with data in RapidAPI data sets and with Github. We should try to incorporate it into our group CPT projects. . Hacks . How can crowdsourcing be used for our CPT project? . CompSci has 150ish principles students. Describe a crowdsource idea and how you might initiate it in our environment. | . It would be good to get feedback on our website’s games from other CSP students because it may help us get more detailed solutions or suggestions for various issues. This can apply to all branches of our project as well, and be initiated through Slack. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? | . Using a wider range of students would be ideal for testing the Reviews and Events databases, since their filtering and validation systems are better tested with many entries. If we got many Del Norte students to help make events and reviews on the site, we would have a better base to work with. However, this also increases the risk of spam. .",
            "url": "https://drewreed2005.github.io/realdrew/5'3&5'4notes",
            "relUrl": "/5'3&5'4notes",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Cafe Gato - Individual College Board Content Review",
            "content": "Overview . My portion of our group project, Cafe Gato (an online marketing campaign for a hypothetical cat cafe), is an events database. A user can use a frontend endpoint to create an event (provided it passes validation requirements) and view other events read from a backend endpoint. This data can be filtered by various attributes on the frontend. . Below, I go over how I will meet the College Board expectations. . Purpose and Function . The purpose of the program is to allow the user to get involved in their community by creating events at a local cafe. From the perspective of the cafe using the program, the purpose is to optimize and automate the process of organizing events at their cafe. . The function of the program is that the user inputs various attributes in required fields on the frontend. Those attributes are sent to a backend server, validated, and if all conditions pass, they are added to the events database. On the frontend, the user can then see all validated events and filter them by date, start time, etc. . Data Abstraction . When date-filtered events are read from the database, the JSON data is parsed procedurally and events are ordered in a list of dictionaries by date. The list would then be called when the read table is made. . What the list will be called isn’t set in stone, but it would probably be something like chronDateList. It contains events in index based on date. . Managing Complexity . Using the above list of ordered dates manages complexity because the only other way to store the information would be through individual variables, which would be unpredictable and difficult to iterate efficiently considering that an unlimited number of events should be able to be stored overall. . Procedural Abstraction . A procedure likely called chronSort(list) or something like that. The list parameter determines which list of events is sorted. This helps because it lets multiple filters be on at a time. I could have events from every day listed in exact order, or I could let the user specify a certain date/month and only sort that list once it has already been specified. Doing this allows the program to parse through less data. . Algorithm Implementation . chronSort has to include some sequencing so that processes occur in the correct order. Selection will be present when the next most recent date is found and appended to the list. Iteration will be used in the process of parsing through the list in question. . Testing . Here would be my two tests: . Using chronSort to sort a list of events from March 2023. | Using chronSort to sort a list of events from April 2023. | They would result in completely different outputs, as not only would the lists of events be different, exactly which of the events in the order of their creation are earliest should be different, so the process of iteration would end up being slightly different. . Video Plan . I plan to show looking through the set of events on the page and messing with the filters; then moving the process of creating an event that meets the validation requirements, and refreshing the table to show it appearing; and finally making an invalid event and showing it not appearing. . If there’s time (I would likely speed up the video if possible), I’d love to show the process of using the pin to update or delete a user’s event. .",
            "url": "https://drewreed2005.github.io/realdrew/individualcbplan",
            "relUrl": "/individualcbplan",
            "date": " • Jan 27, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "Big Idea 5.1 and 5.2 Notes - Benefits, Harms and the Digital Divide",
            "content": "5.1 - Lesson Notes . In general technology has the benefit of streamlining many processes in the modern day. Certain processes may not want to be streamlined right now, or there may be downsides to streamlining (such as tools for violence). . Dopamine is often a product of things like video games and social media, but they both have many harms such as too much escapism or, in the case of social media, high personal standards due to overexposure. . Blog Reflection . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing. | Here are some harms. &gt;1. Computers could replace humans in certain professions, making people lose their jobs and overall decreasing the number of open jobs for people. &gt;2. Computers can be relied upon too heavily for knowledge, making us have less personal intelligence (Open AI as an example). &gt;3. Computers are programmed and cannot always understand the nuances that humans can. As a result, if we place too much emphasis on them, we may end up publicizing biased accounts of historical or current events. . And here are some benefits. &gt;1. Many tasks that are already handled by computers can be improved as technology improves without many downsides to human involvement. &gt;2. It may be easier to gain independent knowledge when it’s easier to find answers for what we need to know. &gt;3. While technology can be used for violence and warfare, it can also be used to defend from it and prevent it. . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? | Personally, while I do sometimes play video games or use social media, my involvement with these things has not decreased my involvement in high school. School has had the opposite effect, actually: I don’t use social media or play video games very often because I’m too busy with school work. . I think as video games have begun to implement intentionally addictive gameplay loops, it’s getting easier for especially the youth to get addicted. I think people who are old enough to know how to budget their time should not have to worry about restricting their online time as much, but parents should be expected to enforce measures to prevent this sort of addiction when identified. . 5.2 - Lesson Notes . A major point of interest since COVID has been the digital divide. Quarantine requirements led many to rely heavily upon technology for school, work, and communication. Many, however, do not have access to technology. . As our society overall turns toward technology, those who do not have access ends up being left behind. While some do not use technology by choice, many don’t have access for financial reasons. Technological access can be expensive, and this growing digital divide can leave the less fortunate even further from the wealthy. . Blog Reflection . How does someone empower themself in a digital world? | . It is pretty much necessary for someone to gain access to technology in the modern world to “empower” oneself. Using technology, we have a lot of influence over our personal image. It is also important to not reveal aspects of our lives that could get us punished in some way on the internet, as it may stay there forever. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. | . The empowered help people by providing them the platform to empower themselves. For example, since Del Norte as a collective has the funds to lend students Chromebooks, they help empower them by giving them access. Empowered people can also help those who aren’t by teaching them how to best use their online access for their own benefit. . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? | . I would argue that paper or red tape don’t have much effect on digital empowerment as time goes on. I would argue that the main “paper” that blocks digital empowerment is money; money is generally what restricts people’s digital empowerment. It is this barrier that exists to some degree at Del Norte (though less, since we live in a generally high-income area), and definitely exists elsewhere. I would argue that red tape has little effect on digital empowerment as time goes on, since restrictions hardly relate to the biggest issue of the digital device. . As technological means of completing tasks becomes preferable, what is perhaps the larger blockade to digital empowerment is the early transition away from paper. Digital responsibility is an important thing to teach people, and those who aren’t taught how to be responsible may end up acting in ways online that harm them. .",
            "url": "https://drewreed2005.github.io/realdrew/5'1&5'2notes",
            "relUrl": "/5'1&5'2notes",
            "date": " • Jan 26, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "CPT Presentation Notes - How We Will Sell Our Ideas",
            "content": "Structure . They started with purpose and audience for their program. Their program would be to keep track of school clubs. . They then gave two goals for their program so that we know what their ultimate goal is. This helps us see where they were going. . They then went over the wireframe for their site. Afterward, they showed how they’d use CRUD in conjunction with the school club database. . They accounted for many specific things that would be potential problems with their idea, such as the possibility of spam on their database and who would have access (ASB). . Throughout, they addressed certain challenges that would come with their program. This showed awareness. . At the end, they had every group member show off what they would do by each week of the process. They had this information also fully organized into a SCRUM Board, then showed off their AGILE Manifesto. . Visual Aspects . They first showed a wireframe of their website’s home page. They then showed a visual representation of how data would be sent to and read from the database. . In their presentation, they provided multiple instances where they would show (numerically) “WHAT?” a certain part of the program would be, “HOW?” it would work, and “WHY?” it was important. . At the end, they used a UML diagram to show how accessing the website would lead to certain increments on the database. . What We Will Present . Our original idea, Cafe Gato, is a website for a (not real) cat cafe. The purpose of our whole website is to represent an ideal online website marketing campaign for a theoretical cat cafe. (The fact that it is a cat cafe is someone incidental. It could be another kind of site. The reason we chose a cat cafe is that is shows how theming could be used in such a campagin.) . We plan on adding these features: . A food review option which allows people who visited the restaurant to leave reviews on the food directly on our site (with a five-star rating scale.) The entries will be stored in a database. You will be able to filter by stars. | . | An events creation form which lets users schedule events in the events room of the cafe. Certain validation requirements will be set such that the same person will not be able to schedule many spam events, schedule events on invalid dates or at invalid times, etc. | . | A games page on which users can play games for certain discounts. A Wordle-esque game with a new word every day. Solving the Wordle and coming in with it lets you get a slight discount. It isn’t a large one so as to not impede business or profit. | . | A Cat RPG where speedrunning gets you better and better times on the leaderboard. Coming in with a top 10 score can give you certain discounts is the current idea. | . | . | .",
            "url": "https://drewreed2005.github.io/realdrew/cptpresentationnotes",
            "relUrl": "/cptpresentationnotes",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "College Board MCQ Test 2 Reflection",
            "content": "Results . I got 50/50. I feel that I have very noticeably improved since the last MCQ Test. I didn’t need to look up any of the problems at all, aside from one or two double-checks if there was another answer that I felt may have been partially correct. . Problems I Struggled With . Here are some problems that didn’t necessarily stump me or challenge me all that much critically, but made me stop and think throughout the quiz. . Question 1 . It may have been because it was just the first problem, but Q1 had me stumped for a minute. . I understand it now, but it took me a second. My brain kind of auto-corrected the sequence in the code to IF -&gt; ELIF -&gt; ELSE rather than the erroneous IF -&gt; `IF` -&gt; ELSE structure. After a certain point, I figured that the error must come from that strange structural choice, and I was able to figure it out from there. . Question 13 . This was another one that I didn’t have trouble understanding, but still almost tricked me because I wasn’t paying attention. . I almost missed the third option. I hadn’t considered formatting the statements the way the III. option does, so it almost slipped my mind. . Robot Questions . I felt the same way about pretty much all of the problems involving robot simulations: they weren’t hard, but they took a while for me to figure out and answer. . This one is a good example of an easier one. From this, I was able to tell that the problem would arise at a fork where the robot would have to turn left but would instead turn right due to sequencing. . Many of the other problems, however, weren’t as easy to solve because they essentially required you to analyze every answer. This wasn’t necessary incredibly difficult, but it could be time-consuming and tedious . Question 22 . It took a lot of reading to understand this one. . This one was just confusing. I was talking to my friend about it for a while during class and we disagreed until I managed to prove that Algorithm B worked. Eventually, we figured it out. . Question 30 . This one was a mix of being a bit complex with a graph to look at, and a bit tedious because I had to verify through all of the possible answers for two correct ones. . For some reason, the graph made it seem more complicated. I kept forgetting that the coordinate represented the midpoint. . Question 34 . I really didn’t know what to put for this one when I first read it. . We didn&#39;t really learn a specific number/fraction. I picked my answer mainly because a number 50 or higher felt like too much searching. This is one I ended up double-checking with Google just to be sure, but I’m glad I managed to figure it out on my own first. . Question 45 . I really don’t have justification as to why I struggled with it. It was just a lot of similar words mixed with my kind of rusty knowledge of what “heuristic” meant. . My brain just struggled to put this one together. Question 50 . My brain just struggled to put this one together. I might have been a bit burned out after doing the whole MCQ, but it took a second for how counting with hexidecimal would work. . I eventually realized each of the leftmost digits could be multiplied by 16 instead of 10 to account for 16-base counting, and the 6 could stay the same. 5 times 16 is a nice, even 80, and plus six is 86, translating to “V”. Just to be sure, I quickly Googled this one at the end to double-check. I didn’t want to be let down at the end by my own burnout. . Overall Reflection . Here are some things to remember from what I struggled with on this MCQ: . If a problem makes it clear that one of the answer choices creates an error of some sort, take a look at the procedure’s formatting. If the formatting seems super alient in certain parts, chances are it’s where the error is. | On problems with a set of possibly correct answers are provided, and you can choose as many as you want as the correct anwser make sure to check every single option. | Remember “heuristic”: it’s an approach that sacrifices the perfection of the output for ease of programming in a situation where making a perfect procedure to solve the problem would be impossible or require too much effort. | With hexidecimal, every single “tens” digit character is worth 16, so just multiply that number by 16 when converting two-bit into decimal. | .",
            "url": "https://drewreed2005.github.io/realdrew/mcqtest2reflection",
            "relUrl": "/mcqtest2reflection",
            "date": " • Jan 23, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Create Task Student Submission Scoring 3",
            "content": "Submission 1 . This is a rock-paper-scissors simulation. It’s super basic and unfortunately very lame. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The student correctly identifies the program’s purpose, function, inputs and outputs. | . Data Abstraction | 0 | 0 | The list RPS is shown being created, but it’s not shown being directly called. | . Managing Complexity | 0 | 0 | The list RPS does not manage complexity, and the explanation as to how it supposedly does is unconvincing. It could have just been done with a random number generator. | . Procedural Abstraction | 0 | 0 | The function rpsGame is shown being defined and called. However, the written part doesn’t explain how it contributes to the functionality of the program. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure, but the description of how it works is very minimal. | . Testing | 1 | 1 | The procedure is tested with two different arguments that show different outputs. | . Submission 2 . This is a program that plays a game of hangman with a five-letter word, giving you six possible wrong guesses. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The purpose, function, inputs and outputs are clearly defined | . Data Abstraction | 1 | 1 | words5 is shown being defined and called within a procedure. | . Managing Complexity | 1 | 1 | The student clearly describes how using it in a list makes the program less complex, and provides an example of how not using one would be more complex (instead, the five letters of the word would have to be five separate variables). | . Procedural Abstraction | 1 | 1 | The guessWords function is shown being defined and called. Its functionality to the program is made clear. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above, and how it works is made very clear. | . Testing | 1 | 1 | Two calls are shown with clearly different code being executed and different results. | . Submission 3 . This is a program that provides various information about every U.S. state. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The program’s purpose, function, input and output are all described. | . Data Abstraction | 0 | 0 | The list is not shown being called. The first code segment is pretty much pointless. | . Managing Complexity | 0 | 0 | The student explains how the list manages complexity very vaguely, and never provides an alternative to using a list that would be less efficient. | . Procedural Abstraction | 0 | 0 | The procedure updateScreen is shown being defined, but never being called. It also incorrectly describes what the function of the procedure is exactly. | . Algorithm Implementation | 0 | 0 | Iteration is not used in the updateScreen procedure. | . Testing | 0 | 0 | Two calls are made from updateScreen, not to it. The written part describes two completely different actions from the user, not conditions tested by the parameter. | . Submission 4 . This is a game that simulates catching fish from a boat in a high-speed situation. Just a little fishing game. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The purpose, function, input and output are all identified well. | . Data Abstraction | 1 | 1 | The list fishtypes is shown being created and called. Its importance is clearly described. | . Managing Complexity | 0 | 1 | I disagree that using a list makes the program easier to deal with, since the amount of each type of fish caught is less identifiable when represented by list indexes. Having three separate variables for the three fish types doesn’t seem any more complicated. College Board gives a point for this because the student does do a decent job justifying the use of a list. | . Procedural Abstraction | 1 | 1 | The procedure +clone+movement+... is shown being created and called. Its importance to the program’s functionality is clear. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above. | . Testing | 0 | 0 | The tests do not show multiple arguments being used to alter the output/behavior of the given procedure; they instead just show two completely different code segments that can be called. | . Final Reflection . Here’s what I can learn from the mistakes these students, in all three of the grading notes, made: . Though this problem wasn’t as present in this set of examples, make sure that the “Purpose” is stated to be why the function of the program even matters, or what that function does for the user. DO NOT just state what the program literally does as the “Purpose.” | Make sure that the use of a list is genuinely important to the complexity of the program. I probably won’t have to worry about this, but don’t just use one because you feel like it when variables would work just as well. | Make SURE that the selected procedure for Procedural Abstraction has at least one parameter. Not having at least one ruins both Procedural Abstraction and Testing, as you need to call the procedure with two different arguments for the point. Speaking of which… | . | For Testing, make sure that the two tests are simply the procedure in question being called with distinctly different arguments that alter the output of the procedure. | .",
            "url": "https://drewreed2005.github.io/realdrew/studentctscoring2",
            "relUrl": "/studentctscoring2",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Database and API Notes",
            "content": "Database and Table Terms . The foundations of database is defining one or more Tables. In Python, a database can be constructed using the foundations we learned in modeling a Class. . A &quot;Table&quot; is a Model/Schema within a Database. | A &quot;Table&quot; definition in Python/SQLAlchemy is manifested by defining a &quot;Class&quot; and &quot;Attributes&quot; in Python. | A Python Class can inherit database functionality from SQLAlchemy. This is a method Python developers use to turn a Class into a Table within a SQL Database. | Writing methods in the Class for Create, Read, Update, Delete (CRUD) is how a developer initiates database operations. | . Backend Model . Below is a sample backend model using the User class from the OOP notes. It inherets the attributes of User and uses various imported programs. . &quot;&quot;&quot; database dependencies to support sqliteDB examples &quot;&quot;&quot; from __init__ import app, db from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &quot;&quot;&quot; Key additions to User Class for Schema definition &quot;&quot;&quot; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # Defines a relationship between User record and Notes table, one-to-many (one user to many notes) posts = db.relationship(&quot;Post&quot;, cascade=&#39;all, delete&#39;, backref=&#39;users&#39;, lazy=True) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=date.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob # CRUD TIME def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, &quot;posts&quot;: [post.read() for post in self.posts] } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None .",
            "url": "https://drewreed2005.github.io/realdrew/dbapinotes/",
            "relUrl": "/dbapinotes/",
            "date": " • Jan 17, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "View and Frontend Notes",
            "content": "Skipping the review stuff, here are some valuable notes: . What is CRUD? . C - Create R - Read U - Update D - Delete . In the case of this lesson, we will be... . Creating new student records | Reading a list of students | Updating student data | Deleting records | . Example with Table . Below is an example of the View part of a data collection table, created with HTML 5. . /* &lt;table&gt; &lt;tr&gt; &lt;th&gt;&lt;label for=&quot;name&quot;&gt;Name&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;email&quot;&gt;Email&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;password&quot;&gt;Password&lt;/label&gt;&lt;/th&gt; &lt;th&gt;&lt;label for=&quot;phone&quot;&gt;Phone&lt;/label&gt;&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;email&quot; name=&quot;email&quot; id=&quot;email&quot; placeholder=&quot;abc@xyz.org&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt;&lt;/td&gt; &lt;td &gt;&lt;button onclick=&quot;create_User()&quot;&gt;Create&lt;/button&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; */ . And here&#39;s what it ends up looking like: . Name Email Password Phone . | | | | Create | . Each table element is given a unique ID to be called back later. The &quot;values&quot; of each input element will be used in code. . Other Formatting Example . Here is an example that is not formatted in a table, which uses many of the same input stipulations. . /* &lt;form action=&quot;create_User()&quot;&gt; &lt;p&gt;&lt;label&gt; Name: &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; User ID: &lt;input type=&quot;text&quot; name=&quot;uid&quot; id=&quot;uid&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Password: &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; required&gt; Verify Password: &lt;input type=&quot;password&quot; name=&quot;passwordV&quot; id=&quot;passwordV&quot; required&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Phone: &lt;input type=&quot;tel&quot; name=&quot;phone_num&quot; id=&quot;phone_num&quot; pattern=&quot;[0-9]{3}-[0-9]{3}-[0-9]{4}&quot; placeholder=&quot;999-999-9999&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt;&lt;label&gt; Birthday: &lt;input type=&quot;date&quot; name=&quot;dob&quot; id=&quot;dob&quot;&gt; &lt;/label&gt;&lt;/p&gt; &lt;p&gt; &lt;button&gt;Create&lt;/button&gt; &lt;/p&gt; &lt;/form&gt; */ . Name: . User ID: . Password: Verify Password: . Phone: . Birthday: . Create . Connecting to Code . You may notice that each of these connect to the function create_User(). That is found in the JavaScript code below. . function create_User(){ // extract data from inputs const name = document.getElementById(&quot;name&quot;).value; const email = document.getElementById(&quot;email&quot;).value; const password = document.getElementById(&quot;password&quot;).value; const phone = document.getElementById(&quot;phone&quot;).value; const requestOptions = { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, &#39;Authorization&#39;: &#39;Bearer my-token&#39;, }, }; //url for Create API const url=&#39;/crud_api/create/&#39; + name + &#39;/&#39; + email+ &#39;/&#39; + password + &#39;/&#39; + phone; //Async fetch API call to the database to create a new user fetch(url, requestOptions).then(response =&gt; { // prepare HTML search result container for new output const resultContainer = document.getElementById(&quot;result&quot;); // trap error response from Web API if (response.status !== 200) { const errorMsg = &#39;Database response error: &#39; + response.status; console.log(errorMsg); // Email must be unique, no duplicates allowed document.getElementById(&quot;pswError&quot;).innerHTML = &quot;Email already exists in the table&quot;; return; } // response contains valid result response.json().then(data =&gt; { console.log(data); //add a table row for the new/created userId const tr = document.createElement(&quot;tr&quot;); for (let key in data) { if (key !== &#39;query&#39;) { //create a DOM element for the data(cells) in table rows const td = document.createElement(&quot;td&quot;); console.log(data[key]); //truncate the displayed password to length 20 if (key === &#39;password&#39;){ td.innerHTML = data[key].substring(0,17)+&quot;...&quot;; } else{ td.innerHTML = data[key];} //add the DOM data element to the row tr.appendChild(td); } } //append the DOM row to the table table.appendChild(tr); }) }) } . This creates an API with the data inputted into the fields above, pulling from the values in the boxes. . Where to Get Started . It&#39;s important to show that theoretically the system works even before the data input is in working condition (a &quot;View&quot; model). An example of this would be to create a static body of JSON data separate from your intended API content, then use that to show that the Read part is working, and possibly other aspects depending on what the CRUD program includes. . How I Will Use CRUD . I plan on making a user input form on the &quot;Events&quot; page of the Cafe Gato website, on which the user can schedule an event in the events room of the cafe from a selected duration of time. A form must be submitted on the page. .",
            "url": "https://drewreed2005.github.io/realdrew/view&frontendnotes/",
            "relUrl": "/view&frontendnotes/",
            "date": " • Jan 12, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "Create Task Student Submission Scoring 2",
            "content": "Submission 1 . This is a memory game in which you are shown pictures of five animals (according to the code, always being “Cat,” “Dog,” “Duck,” “Monkey,” and “Fish”) and you have to identify which ones you rememember seeing . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The student doesn’t state the program’s purpose, instead just saying what it is. Not exactly its function, but just what it is. | . Data Abstraction | 0 | 0 | Multiple lists are shown, but not the lists being called. | . Managing Complexity | 0 | 0 | How the lists manage complexity is poorly described. No alternative is provided. | . Procedural Abstraction | 0 | 0 | The function evaluateGuess is shown being created and called. However, how it contributes to the functionality is not explained. | . Algorithm Implementation | 0 | 0 | Sequencing, selection, and iteration are all used in the procedure, but the description of how it works is very minimal. | . Testing | 1 | 1 | The procedure is tested with two different plausible sets of variables with different results. | . Submission 2 . This is a program that creates short poems based on a set of words you provide it. It basically just concatenates them together, it looks like. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The purpose is clearly stated to be to explore the user’s creativity through poetry. | . Data Abstraction | 0 | 1 | nounList is shown being defined. However, the procedure in which it is called is not shown, instead showing the base defined procedure for some reason. This is why I didn’t give it the point. | . Managing Complexity | 1 | 1 | The student clearly describes how using it in a list makes the program less complex, and provides an example of if it wasn’t used. | . Procedural Abstraction | 1 | 1 | The createPoem function is shown, with its importance to the function clearly explained. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above, and how it works is made very clear. | . Testing | 1 | 1 | Two calls are shown with clearly different results. | . Submission 3 . The program compares abstract stats assigned to various Marvel superheroes, then determines who won. It’s not made clear to the user exactly how the winner is determined. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | He states what the program does (its function) rather than its purpose. | . Data Abstraction | 1 | 1 | Data is shown being stored and called in the list firstCharacterList. | . Managing Complexity | 1 | 1 | The student clearly describes how storing the URL data for each character decreases complexity, as it consolidates seven variables into one list. | . Procedural Abstraction | 1 | 1 | The function findWinner is shown being defined and called. It is clear how its presence contributes to the functionality of the program. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above. | . Testing | 1 | 1 | Two calls are shown with clearly different results. | . Submission 4 . This is a Scratch MIT program which simulates an 8-letter version of Wordle, called “Octordle.” . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The purpose is stated to be to challenge the user’s critical thinking. Its function is well-described. | . Data Abstraction | 0 | 0 | Though a list called guesses is used, since only its length is called and not the actual elements of the list, it doesn’t meet the College Board criteria. | . Managing Complexity | 0 | 0 | The list is only used for its length, it doesn’t manage complexity. | . Procedural Abstraction | 1 | 1 | The procedure isitcorrect is shown being defined and called, and it has the parameter checkanswer. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above. | . Testing | 0 | 0 | Two different arguments are not shown, instead just describing the conditions. | .",
            "url": "https://drewreed2005.github.io/realdrew/studentctscoring2",
            "relUrl": "/studentctscoring2",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Model and Object Oriented Programming Notes",
            "content": "Terminology . Object-Oriented Programming (OOP) uses classes as blueprints for creating Objects. Classes have Attributes assigned to the object with the keyword self and Methods specific to the object. . Additional info: . an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . The Initial Code . This is the code provided to us as an example. . # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$Z1N...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$lmi...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$skw...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$z3s...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$unQ...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$Z1N...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$lmi...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$fRT...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$z3s...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$unQ...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$Z1NzXec5YjlZqD34$376c6ff4ca05a88823d928ecce732678ad08afb6edf4e244a728b314a7a72319&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$lmiD42i5byXOIJrh$02d0889e17d1961a3238eab5d70c0eb6a45d3a9f6af965b5046ab9a9adb13aba&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$fRTRHDPqtsZ9wZUf$e8f1a773fc2f8a82ba9355fde0ec1979d444e1275b12ab272b9cc4b575d553a3&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$z3sNJVuGtqrRP127$23fff7259b500d92c473a3588fd98889cb16e4ce6bd1616ff7d4981a2b5b32fa&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$unQlpwEcj1L9YhZc$7beeec4d8dff0e3eeff6fd2a465fbbcc551889a3bff0cecefa6bb02a66e351f9&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$Z1NzXec5YjlZqD34$376c6ff4ca05a88823d928ecce732678ad08afb6edf4e244a728b314a7a72319&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$lmiD42i5byXOIJrh$02d0889e17d1961a3238eab5d70c0eb6a45d3a9f6af965b5046ab9a9adb13aba&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$fRTRHDPqtsZ9wZUf$e8f1a773fc2f8a82ba9355fde0ec1979d444e1275b12ab272b9cc4b575d553a3&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$z3sNJVuGtqrRP127$23fff7259b500d92c473a3588fd98889cb16e4ce6bd1616ff7d4981a2b5b32fa&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$unQlpwEcj1L9YhZc$7beeec4d8dff0e3eeff6fd2a465fbbcc551889a3bff0cecefa6bb02a66e351f9&#34;}] . Hacks . Here is a section for my completion of the hacks from this lesson. . New Attributes and Test . Below, I added the classOf attribute, the dob attribute, and the updated tester which shows the calculation of the user&#39;s age. . See the tester in action at the bottom (focus on Test 5 and Test 6). . from datetime import date #old code comments deleted to de-clutter; you can see them above class User: def __init__(self, name, uid, password, classOf, dob): self._name = name self._uid = uid self.set_password(password) self._classOf = classOf self._dob = dob @property def name(self): return self._name @name.setter def name(self, name): self._name = name @property def uid(self): return self._uid @uid.setter def uid(self, uid): self._uid = uid def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; #here&#39;s the classOf getter @property def classOf(self): return self._classOf #here&#39;s the classOf setter @classOf.setter def classOf(self, classOf): self._classOf = classOf #here&#39;s the date of birth getter @property def dob(self): return self._dob #here&#39;s the date of birth setter @dob.setter def dob(self, dob): self._dob = dob # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # NEW: AGE CALCULATOR (from provided template) def calculate_age(dob): today = date.today() return today.year - dob.year - ((today.month, today.day) &lt; (dob.month, dob.day)) if __name__ == &quot;__main__&quot;: # defining user objects again u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, classOf=&#39;1865&#39;, dob=(1847, 2, 11)) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;, classOf=&#39;1874&#39;, dob=(1856, 7, 10)) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;, classOf=&#39;1865&#39;, dob=(1847, 3, 3)) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;, classOf=&#39;1783&#39;, dob=(1765, 12, 8)) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;, classOf=&#39;1932&#39;, dob=(1917, 11, 9)) users = [u1, u2, u3, u4, u5] #HERE IS THE START OF MY UNIQUE TESTS print(&quot;Test 5, find the oldest user&quot;) agelist = [] for user in users: tempdob = date(user._dob[0], user._dob[1], user._dob[2]) age = calculate_age(tempdob) agelist.append(age) max_age = max(agelist) for index, item in enumerate(agelist): if item == max_age: oldest = index for index, user in enumerate(users): if index == oldest: print(&quot;* &quot;, end=&quot;&quot;) print(user._name + &quot;:&quot;, agelist[index], &quot;years old.&quot;) print(&quot;Test 6, show user graduation dates&quot;) for user in users: print(user.name, &quot;graduated in&quot;, user.classOf + &quot;.&quot;) dob = date(2004, 12, 31) #age = calculate_age(dob) . Test 5, find the oldest user Thomas Edison: 175 years old. Nicholas Tesla: 166 years old. Alexander Graham Bell: 175 years old. * Eli Whitney: 257 years old. Hedy Lemarr: 105 years old. Test 6, show user graduation dates Thomas Edison graduated in 1865. Nicholas Tesla graduated in 1874. Alexander Graham Bell graduated in 1865. Eli Whitney graduated in 1783. Hedy Lemarr graduated in 1932. . Cafe Gato Objects . Below is an example of using objects for my portion of our group project (linked here). As shown on that page, my use of CRUD mainly involves letting a user create a personal event at the cafe, with details clearly listed in a readable table. . To go along with that, below, I&#39;ve created the object Event, which includes all attributes that are also listed on the frontend version. . Attributes, Getters and Setters . class Event: def __init__(self, name, email, event_name, event_details, date, start_time, end_time): self._name = name self._email = email self._event_name = event_name self._event_details = event_details self._date = date self._start_time = start_time self._end_time = end_time #here&#39;s the name getter @property def name(self): return self._name #here&#39;s the name setter @name.setter def name(self, name): self._name = name #here&#39;s the email getter @property def email(self): return self._email #here&#39;s the email setter @email.setter def email(self, email): self._email = email #here&#39;s the event_name getter @property def event_name(self): return self._event_name #here&#39;s the event_name setter @event_name.setter def event_name(self, event_name): self._event_name = event_name #here&#39;s the event_details getter @property def event_details(self): return self._event_details #here&#39;s the event_details setter @event_details.setter def event_details(self, event_details): self._event_details = event_details #here&#39;s the date getter @property def date(self): return self._date #here&#39;s the date setter @date.setter def date(self, date): self._date = date #here&#39;s the start_time getter @property def start_time(self): return self._start_time #here&#39;s the start_time setter @start_time.setter def start_time(self, start_time): self._start_time = start_time #here&#39;s the end_time getter @property def end_time(self): return self._end_time #here&#39;s the end_time setter @end_time.setter def end_time(self, end_time): self._end_time = end_time . Tests . Here are two tests that are applicable with our site. . (The date attribute is formatted as a string in the &quot;mm/dd/yyyy&quot; format and the start_time and end_time attributes are both formatted as &quot;hh/mm&quot;, with hours in military time. This is due to how the &lt;input type=&quot;date&quot;&gt; and &lt;input type=&quot;time&quot;&gt; tags format their values. With that in mind, the tests are...) . A test that lists the dates of the events and identifies the earliest. | A test that lists the start and end time of each event (in AM/PM format) and identifies whether or not the event occurs at a valid time for the day of the week it takes place in. | from datetime import * if __name__ == &quot;__main__&quot;: #defining the three events for testing e1 = Event(name=&quot;Thomas Edison&quot;, email=&quot;tedison@lightbulb.edu&quot;, event_name=&quot;The Edison Troupe Meet&quot;, event_details=&quot;We 10 selected geniuses will meet in the events room for a convergence.&quot;, date=&quot;02/23/2023&quot;, start_time=&quot;13:00&quot;, end_time=&quot;14:00&quot;) e2 = Event(name=&quot;John Mortensen&quot;, email=&quot;jmortensen@powayusd.com&quot;, event_name=&quot;Extra Credit Code Meetup&quot;, event_details=&quot;Come to work on ideation and any confusion with the Full Stack CPT project. No phones.&quot;, date=&quot;02/25/2023&quot;, start_time=&quot;09:00&quot;, end_time=&quot;11:00&quot;) e3 = Event(name=&quot;Karl Giant&quot;, email=&quot;giantrichguy@wallstreet.org&quot;, event_name=&quot;Karl and Cats&quot;, event_details=&quot;Karl would like to see cats with friends (if he can fit in the building).&quot;, date=&quot;02/26/2023&quot;, start_time=&quot;16:00&quot;, end_time=&quot;17:00&quot;) events = [e1, e2, e3] # START OF TEST 1 print(&quot;TEST 1 BELOW:&quot;) datelist = [] for event in events: datelist.append(date(int(event._date[6:10]), int(event._date[0:2]), int(event._date[3:5]))) soonest = datelist[2] for index, date in enumerate(datelist): if date &lt;= soonest: soonest = date soonind = index for index, event in enumerate(events): if index == soonind: print(&quot;* &quot;, end=&quot;&quot;) print(event._event_name + &quot;:&quot;, event._date) # START OF TEST 2 print(&quot; nTEST 2 BELOW:&quot;) startlist = [] endlist = [] for event in events: if 0 &lt; int(event._start_time[0:2]) &lt; 12: startlist.append(str(int(event._start_time[0:2])) + &quot;:&quot; + event._start_time[3:5] + &quot; AM&quot;) elif int(event._start_time[0:2]) &gt; 12: startlist.append(str(int(event._start_time[0:2]) - 12) + event._start_time[2:5] + &quot; PM&quot;) elif int(event._start_time[0:2]) == 12: startlist.append(&quot;12:&quot; + event._start_time[3:5] + &quot; PM&quot;) else: startlist.append(&quot;12:&quot; + event._start_time[3:5] + &quot; AM&quot;) if 0 &lt; int(event._end_time[0:2]) &lt; 12: endlist.append(str(int(event._end_time[0:2])) + &quot;:&quot; + event._end_time[3:5] + &quot; AM&quot;) elif int(event._end_time[0:2]) &gt; 12: endlist.append(str(int(event._end_time[0:2]) - 12) + event._end_time[2:5] + &quot; PM&quot;) elif int(event._start_time[0:2]) == 12: endlist.append(&quot;12:&quot; + event._end_time[3:5] + &quot; PM&quot;) else: endlist.append(&quot;12:&quot; + event._end_time[3:5] + &quot; AM&quot;) for index, event in enumerate(events): if datetime.weekday(datelist[index]) &lt; 5: if (8 &lt;= int(event._start_time[0:2]) &lt; 17) and (8 &lt; int(event._end_time[0:2]) &lt;= 17): print(&quot;Valid: &quot;, end=&quot;&quot;) else: print(&quot;Invalid: &quot;, end=&quot;&quot;) else: if (10 &lt;= int(event._start_time[0:2]) &lt; 18) and (10 &lt; int(event._end_time[0:2]) &lt;= 18): print(&quot;Valid: &quot;, end=&quot;&quot;) else: print(&quot;Invalid: &quot;, end=&quot;&quot;) print(event._event_name, &quot;(&quot; + startlist[index], &quot;to&quot;, endlist[index] + &quot;)&quot;) . TEST 1 BELOW: * The Edison Troupe Meet: 02/23/2023 Extra Credit Code Meetup: 02/25/2023 Karl and Cats: 02/26/2023 TEST 2 BELOW: Valid: The Edison Troupe Meet (1:00 PM to 2:00 PM) Invalid: Extra Credit Code Meetup (9:00 AM to 11:00 AM) Valid: Karl and Cats (4:00 PM to 5:00 PM) . (The &quot;Extra Credit Code Meetup&quot; was invalid because it was scheduled for 9:00 AM on a Saturday. According to the cafe hours, they open at 10:00 AM on Saturdays, meaning the event is scheduled for before opening. This makes it invalid.) .",
            "url": "https://drewreed2005.github.io/realdrew/oopnotes/",
            "relUrl": "/oopnotes/",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Test CSS for Cafe Gato",
            "content": "| Cats | Menu | Hours | Events | Shop | . . . 9AM: Kitty Breakfast . The cats may need to take a short break from playing with toys or sitting on high-up hammocks to eat their own breakfast. (Don&#39;t worry: we make sure they&#39;re all fed plenty!)If you come on the weekend, the kitties will already have been fed.",
            "url": "https://drewreed2005.github.io/realdrew/sampcss",
            "relUrl": "/sampcss",
            "date": " • Jan 7, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "College Board Create Task Student Submission Scoring",
            "content": "Submission 1 . This submission, taking place completely within the console, allows the user to input the side lengths of a triangle and then outputs the trigonometric ratios created by each side length in a table. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 0 | 0 | The purpose is not described, but instead the function of the program. The purpose is unclear. The video shows the program working as intended. | . Data Abstraction | 1 | 1 | The data stored in sideIndex is abstracted under a clear name. It is called later under the correct conditions for the elements’ purposes. | . Managing Complexity | 0 | 0 | In the written response, the sideIndex list is shown, but the way that it manages complexity is unconvincing. It would be just as efficient to put the elements within the list in the conditionals that it is called within. | . Procedural Abstraction | 1 | 1 | The ratioCalculate funciton is shown, which calculates the ratio of the side lengths. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure, though only a little bit for the latter. | . Testing | 1 | 1 | The procedure is tested with two different plausible sets of variables with different results. | . Submission 2 . This submission allows the user to create a customizable simulation based on the rules of John Conway’s Game of Life, in which the user can place and remove tiles to be modified in the simulation. It is supposed to entertain the user. . Grading . Reporting Category | Student Score | College Board Score | Comments | . Program Purpose and Function | 1 | 1 | The purpose is stated to be entertainment, and the function is to create a simulation which follows the rules of John Conway’s Game of Life. There is clear incorporation of input and output with the tiles. | . Data Abstraction | 1 | 1 | The data stored in startGrid, currentGrid, and nextGrid is clearly called and relevant throughout the function to depict the state of the thousands of tiles. | . Managing Complexity | 1 | 1 | The grid lists very clearly show how complexity is managed, as 10,800 tiles is unreasonable to try to manage with individual variables or unstructured means of data storage. | . Procedural Abstraction | 1 | 1 | The intermixing of the replaceList and resetall functions thorughout the program show their relevance and functionality. Their names clearly describe their functions. The written portion meets all criteria. | . Algorithm Implementation | 1 | 1 | Sequencing, selection, and iteration are all used in the procedure above. | . Testing | 1 | 1 | Two calls are shown with clearly different results. | . Reflection . I ended up scoring exactly the same as the College Board criteria. There was one case (Submission 1’s “Algorithm Implementation”) that I graded it a 0 initially, but then realized that there was a for loop at the bottom of the function in question. I thought there wasn’t iteration, which was the reason I had given it a 0 in the first place, so I changed it to a 1. . While I ended up grading things the same, being forced to scrutinize the Create Task rubric makes me a lot more confident that I’ll be able to meet the requirements easily. How will I do it? I wrote a bit about that below. . How I Can Meet the Requirements? . Very clearly distinguish between purpose and function. The function is what the program literally does and the purpose is why that function matters/what its effect is on the user. | Store and call information in a list, specifically information that is made more easily accessible by it being in a list. | Include a aptly-named method that incorporates sequencing (correctly ordering events chronologically in the function), selection (can be an if statement or other conditional), and iteration (loops, baby). | The written portion should contain two distinct, realistic tests that show the functionality of the program. | The written portion should include very distinct screenshots of the list, where it is called, the procedure, where it is called, and any other described evidence that is necessary for the grade. | .",
            "url": "https://drewreed2005.github.io/realdrew/studentctscoring",
            "relUrl": "/studentctscoring",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Boolean Expressions, Conditionals and Nested Conditionals Lesson Notes",
            "content": "3.5 Boolean Expresssions . Boolean expressions have two states, &quot;True&quot; and &quot;False&quot; (basically &quot;1&quot; and &quot;0&quot;). . Rational Operators . Operators ==, !=, &gt;, &lt;, &gt;=, and &lt;= are used to compare values. They can return true of false depending on the statement. They work with both integers and strings. . print(&quot;True:&quot;, 4 == 4) print(&quot;True:&quot;,1 &gt; 0) print(&quot;False:&quot;,7 &lt; 3) print(&quot;True:&quot;, 5 &lt; 6) print(&quot;False:&quot;,7 &gt; 8) print(&quot;True:&quot;,3 == 3) print(&#39;&#39;) # Same as above, but now for other values other than int print(&#39;True:&#39;,&quot;as&quot; == &quot;as&quot;) print(&quot;False&quot;,True == False) print(&quot;False:&quot;,[2,3,1] != [2,3,1]) print(&quot;True:&quot;,&#39;af&#39; &lt; &#39;bc&#39;) print(&quot;False:&quot;,&#39;ce&#39; &gt; &#39;cf&#39;) print(&quot;True:&quot;,[1,&#39;b&#39;] &gt; [1,&#39;a&#39;]) . True: True True: True False: False True: True False: False True: True True: True False False False: False True: True False: False True: True . Logical Operators . Operators like &quot;and&quot;, &quot;or&quot;, or &quot;not&quot; can be used to assess the state of boolean operands. See their use below. . print(&quot;True:&quot;, True or False) print(&quot;False:&quot;, not True) print(&quot;True:&quot;, True and True) print(&quot;False:&quot;, not True) print(&quot;False:&quot;, True and False) print(&quot;True:&quot;, not False) . True: True False: False True: True False: False False: False True: True . 3.6 Conditionals . Conditionals only make certain things happen when conditions are met. This is most often seen with if/else statements. . Vocabulary . Copied from their blog. . Algorithm - A set of instructions that accomplish a task. . Selection - The process that determines which parts of an algoritm is being executed based on a condition that is true or false. . If/Else Statements . if and else statements are the primary conditional statements. See their basic use below. . number = 3 # value that will affect true or false statement if number == 5: # if part determines if the statement is true or false compared to another part of the program print(&quot;Yes,&quot;, str(number), &quot;does equal 5.&quot;) else: #else part only executes if the if part is false print(&quot;No, &quot; + str(number) + &quot; does not equal 5.&quot;) . No, 3 does not equal 5. . As their blog says, solo if statements can be used as sort of interruptions when certain conditions are met. Here is there example. . progress = 0 while progress &lt; 100: print(str(progress) + &quot;%&quot;) if progress == 50: print(&quot;Half way there&quot;) progress = progress + 10 print(&quot;100%&quot; + &quot; Complete&quot;) . 0% 10% 20% 30% 40% 50% Half way there 60% 70% 80% 90% 100% Complete . 3.7 Nested Conditional Statements . Basically conditionals inside of conditional statements that make things happen on top of the other stuff. Vague, but it makes sense. . Examples . Here is the example provided by the group to show nested conditionals. . age = 19 isGraduated = False hasLicense = True # Look if person is 18 years or older if age &gt;= 18: print(&quot;You&#39;re 18 or older. Welcome to adulthood!&quot;) if isGraduated: print(&#39;Congratulations with your graduation!&#39;) if hasLicense: print(&#39;Happy driving!&#39;) . You&#39;re 18 or older. Welcome to adulthood! Happy driving! . Here&#39;s my take on the nested conditionals example. . year = 2022 if (year == 1776): print(&quot;The U.S. just declared independence, didn&#39;t they?&quot;) else: print(&quot;The U.S. has already gained independence, or perhaps doesn&#39;t exist...&quot;) if (year == 1848): print(&quot;Gold was just struck in California, wasn&#39;t it?&quot;) else: print(&quot;The Gold Rush is an afterthought, or perhaps hasn&#39;t yet happened...&quot;) if (year == 2022): print(&quot;Elon Musk bought Twitter not too long ago, didn&#39;t he?&quot;) else: print(&quot;Perhaps Elon Musk and Twitter do not yet exist, or are old news...&quot;) if (year == 3000): print(&quot;Flying cars have just been invented, haven&#39;t they?&quot;) else: print(&quot;You&#39;ll have to wait a bit longer for flying cars...&quot;) . The U.S. has already gained independence, or perhaps doesn&#39;t exist... The Gold Rush is an afterthought, or perhaps hasn&#39;t yet happened... Elon Musk bought Twitter not too long ago, didn&#39;t he? You&#39;ll have to wait a bit longer for flying cars... . Homework . Here is my take on the binary homework. . Hacks . System to repeat the user input if it is not within the valid range of 8-bit binary. . More conditionals with try and except . A Frontend version on top of the Python version. . def DecimalToBinary(input): if 0 &lt;= input &lt;= 255: pass else: print(int(input) + &quot;Intentional Error to Restart Loop&quot;) i = 7 binary = &quot;&quot; while i &gt;= 0: if input % (2**i) == input: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; input -= 2**i i -= 1 return binary # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;The reverse of 67 in binary is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) # input box def getUserInput(): try: userinp = int(input(&quot;Input an integer between 0 and 255.&quot;)) userbin = DecimalToBinary(userinp) print(&#39;&quot;&#39; + str(userinp) + &#39;&quot; in binary is &quot;&#39; + userbin + &#39;&quot;.&#39;) except: print(&quot;Invalid input.&quot;) getUserInput() getUserInput() . The reverse of 67 in binary is: 11000010 Invalid input. Invalid input. &#34;34&#34; in binary is &#34;00100010&#34;. . Here&#39;s the frontend version: . Convert to binary... . CONVERT . And here&#39;s the code behind it: . &lt;p style=&quot;font-family:&quot;&gt;Convert &lt;input id=&quot;bininput&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;0&quot; minlength=&quot;1&quot; maxlength=&quot;3&quot; max=&quot;255&quot; value=&quot;0&quot;&gt; to binary...&lt;/p&gt; &lt;button id=&quot;convertbtn&quot;&gt;CONVERT&lt;/button&gt; &lt;p id=&quot;output&quot;&gt;&lt;/p&gt; &lt;script&gt; console.log(&#39;initialized accurately&#39;) var opbox = document.getElementById(&quot;output&quot;); var convertbtn = document.getElementById(&quot;convertbtn&quot;); var inpbox = document.getElementById(&quot;bininput&quot;); function DecimalToBinary(parameter) { var input = Number(parameter); if (input &lt; 0) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; } else if (input &gt; 255) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; }; var i = 7; var binary = &quot;&quot;; while (i &gt;= 0) { if (input % (2**i) == input) { binary += &quot;0&quot;; i -= 1; } else { binary += &quot;1&quot;; input -= 2**i; i -= 1; }; }; return binary; } convertbtn.onclick = function() { console.log(&#39;pressed&#39;); var binconvert = DecimalToBinary(Number(inpbox.value)); if (binconvert == &quot;Invalid input.&quot;) { console.log(&#39;invalidinput&#39;) opbox.innerHTML = &quot;Invalid input.&quot;; } else { console.log(&#39;valid&#39;) opbox.innerHTML = String(Number(inpbox.value)) + &quot; in binary is &quot; + String(binconvert) + &quot;.&quot;; }; }; &lt;/script&gt; .",
            "url": "https://drewreed2005.github.io/realdrew/sections5-7notes/",
            "relUrl": "/sections5-7notes/",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Algorithmic Efficiency and Undecidable Problems Lesson Notes",
            "content": "3.17 Algorithmic Efficiency . Vocabulary . I filled in the vocabulary below. . Problem: A general description of a task that can or cannot be solved algorithmically Decision Problem: A problem with a yes or no answer | Organization Problem: A problem with a goal of finding the best answer | . | Instance: A problem with a specific input | Efficiency: Amount of computing needed to solve a problem Polynomial Efficiency (Good): More work takes a proportional amount of time (1 job is +2 time) | Exponential Efficiency (Bad): More work takes an exponential amount more time (1 job is 2x time) | . | Heuristic Approach: When optimal solutions are inefficient, look for a possibly optimal solution that is more efficient | Decidable Problem: A decision problem that has a clear solution that will always make a correct output | Undecidable Problem: A decision problem with no solution that is not gaurenteed to produce the correct output | . Notes . We can check efficiency by seeing how long it takes to run a function. For example, using the time module below, we can see how long it takes to run this process one million times. | . import time def toint(x): x = int(x) return(x) def tostr(x): x = str(x) return(x) def add(x,y): x = toint(x) y = toint(y) z = x + y z = tostr(z) return(z) starttime = time.time() for i in range(1000000): x = &quot;1&quot; y = &quot;2&quot; answer = add(x,y) print(answer) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 3 1.6013290882110596 seconds . There&#39;s some amount of difference between systems on efficiency. It only took me 1.6 seconds while it took the instructor&#39;s computer around 3.75 seconds. | In general, exponential is much less efficient than polynomial because the amount of necessary cycles increases by a lot more each time. | A Heuristic Approach sacrifices optimal solutions to improve efficiency and ease of programming | . Challenge . We were asked to make this code more efficient using only the code between the two provided lines. I did so below by making it a binary search algorithm. . import time numlist = [1,3,5,7,9,11,13,15,17,19] valuelist = [0,3,6,9,12,15,18,21] def isvalue(value,array): #- high = (len(array) - 1) low = 0 while high &gt;= low: mid = (high + low) // 2 if array[mid] == value: return True elif array[mid] &gt; value: high = mid - 1 else: low = mid + 1 return False #- starttime = time.time() for i in range(100000): for i in range(len(valuelist)): x = isvalue(valuelist[i],numlist) endtime = time.time() print(endtime-starttime,&#39;seconds&#39;) . 0.9853568077087402 seconds . I managed to decrease the execution time to about 0.98 seconds using binary search. . 3.18 Undecidable Problems . Notes . The Halting Problem is essentially a paradox. Whenever a computer gets a paradoxical problem, it doesn&#39;t know when to stop trying to solve it. This is the reason why computers time out when a site will not load. | . | . Homework! . Make an algorithm that finds the fastest route that hits every location once starting and ending at Del Norte. Make sure to show your thinking. If you are strugling, try using a huristic approach. Remember, what matters more than having perfectly functioning code is that you tried your hardest. . dataset = { &#39;DelNorte&#39;:{ &#39;Westview&#39;:15, &#39;MtCarmel&#39;:20, &#39;Poway&#39;:35, &#39;RanchoBernardo&#39;:50 }, &#39;Westview&#39;:{ &#39;DelNorte&#39;:15, &#39;MtCarmel&#39;:35, &#39;Poway&#39;:25, &#39;RanchoBernardo&#39;: 45 }, &#39;MtCarmel&#39;:{ &#39;Westview&#39;:35, &#39;DelNorte&#39;:20, &#39;Poway&#39;:40, &#39;RanchoBernardo&#39;:30 }, &#39;Poway&#39;:{ &#39;Westview&#39;:25, &#39;MtCarmel&#39;:40, &#39;DelNorte&#39;:35, &#39;RanchoBernardo&#39;:15 }, &#39;RanchoBernardo&#39;:{ &#39;Westview&#39;:45, &#39;MtCarmel&#39;:30, &#39;Poway&#39;:15, &#39;DelNorte&#39;:50 } } . def fastestroute(start, data): drivetime = 0 order = [start] temploc = &quot;&quot; for i in range(len(data) - 1): temptime = 10000 for loc, time in data[order[(len(order) - 1)]].items(): if (time &lt;= temptime) and (loc not in order): temploc = loc temptime = time drivetime += temptime order.append(temploc) drivetime += data[order[(len(order) - 1)]][start] order.append(start) return (drivetime, order) start = &#39;DelNorte&#39; results = fastestroute(start, dataset) print(&quot;Route Order:&quot;) i = 0 while i &lt; len(results[1]): print(str(i + 1) + &quot;.&quot;, results[1][i]) i += 1 print(&quot;Drive Time:&quot;, results[0], &quot;minutes&quot;) . Route Order: 1. DelNorte 2. Westview 3. Poway 4. RanchoBernardo 5. MtCarmel 6. DelNorte Drive Time: 105 minutes . To calculate the fastest route, I started by putting the start as the first entry in order. It then runs a for loop that detects the dictionary assigned to the furthest-back index of order within the given data set, finds which destination has the shortest travel time (as long as it isn&#39;t already in the order), and then adds it to the order. It ends by putting the initial destination to the end of the order. . All the while, it adds the calculated least travel time to the drivetime variable, which is returned at the end. . I made sure that it worked very efficiently, primarily running entirely through a single for loop. . Grading: . Challenge Homework . .15 pts for attempt | .65 for attempt | . .20 pts for complete | .70 for complete | . .25 pts for above and beyond | .75 pts for above and beyond | .",
            "url": "https://drewreed2005.github.io/realdrew/sections17-18notes/",
            "relUrl": "/sections17-18notes/",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Calling and Developing Procedures Notes",
            "content": "What are procedures? . Procedure: a named group of programming instructions that may have parameters and return values . Parameters: input values of a procedure, specified by arguments . Arguments: specify the values of the parameters when a procedure is called . Modularity: separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality . Procedural Abstraction: providing a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . What are some other names for procedures?: function or method . Why are procedures effective?: Procedures allow certain series of algorithms and functions to be run more simply. They can put a set of complex actions under a distinct framework to be called upon later for ease of use. . Additional Notes . Calling Procedures (Python) . It&#39;s important to know what arguments and parameters are necessary when creating a procedure | You can call a procedure within other statements like &#39;print&#39; to show the return value | Procedures with return values can essentially be placed as variables representing whatever would be returned by the function (in most cases) | Some procedures do not return values, simply running to serve background purposes before ending | . Calling Procedures (JavaScript) . JavaScript uses function instead of def plus curly brace syntax | Below is an example (1) of a JavaScript function using an array: | . function plusMinus(arr) { var pos = 0; var neg = 0; var zero = 0; var length = arr.length; for (var i = 0; i &lt; arr.length; i++) { if (arr[i] &gt; 0) { pos += 1; } else if (arr[i] &lt; 0) { neg += 1; } else { zero += 1; } } console.log(&quot;There are &quot; + arr.length + &quot; total numbers&quot;); console.log(&quot;There are &quot; + pos + &quot; positive numbers&quot;); console.log(&quot;There are &quot; + neg + &quot; negative numbers&quot;); console.log(&quot;There are &quot; + zero + &quot; zeroes&quot;); } var array = [1, 1, 0 , -1, -1]; plusMinus(array); . There are 5 total numbers There are 2 positive numbers There are 2 negative numbers There are 1 zeroes . This creates an array based on the indexes of the array items | Here is the military time converter (example 2): | . function timeConversion(s) { var arr = s.slice(0,8).split(&#39;:&#39;); arr[0] = (s.indexOf(&#39;PM&#39;) &gt; -1) ? (arr[0] == 12 ? &#39;12&#39; : Number(arr[0]) + 12) : (arr[0] == 12 ? &#39;00&#39; : arr[0]); console.log(arr.join(&#39;:&#39;)); } var input = &quot;07:05:45PM&quot;; timeConversion(input); . 19:05:45 . Developing Procedures . Questions to ask yourself when developing procedures: . What am I going to name my procedure? (It should reflect the purpose of the code) | What parameters do I need? | What data would I need to take in to accomplish my goal? | Do I want my procedure to give a numerical value, or complete an action? | . Procedural abstraction is an important part of clarifying the purpose of various procedures. This promotes efficient collaboration. . According to the lesson, it is sometimes efficient to group multiple procedures into a single procedure, further abstracting and giving specific uses for possibly more general procedures. . Challenge 1 . I made the procedure and then called it within the print statement. . decimal = 7 def convertToBinary(n): if 0 &lt;= n &lt;= 255: #here&#39;s the program itself pass else: return &quot;Invalid input.&quot; #error if not valid for 8-bit binary i = 7 binary = &quot;&quot; while i &gt;= 0: if n % (2**i) == n: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; n -= 2**i i -= 1 return binary print(convertToBinary(decimal)) #this calls the function despite being in &#39;print&#39; . 00000111 . Challenge 2 . I created the findMax and findMin procedures and ran them with the numbers 4 and 3. I did this all in JavaScript for bonus points. . Optional Bonus (Hack) . See the bottom procedure findExtrema. It checks an array for its greatest and least values, then prints them in the console. . // Start by creating a procedure called findMax and set the parameters to numberA and numberB. // Within the procedure, write the code to determine which of the two parameters, numberA or numberB, is the larger value. Print that value. function findMax(numberA, numberB) { if (numberA !== numberB) { if (numberA &gt; numberB) { console.log(numberA); } else { console.log(numberB); }; } else { console.log(numberA, &quot;and&quot;, numberB, &quot;are equal&quot;) } } // Repeat the process, this time creating a procedure called findMin, which will print the parameter with a smaller value. function findMin(numberA, numberB) { if (numberA !== numberB) { if (numberA &gt; numberB) { console.log(numberB); } else { console.log(numberA); }; } else { console.log(numberA, &quot;and&quot;, numberB, &quot;are equal&quot;) } } // Call both functions so that the parameters numberA and numberB are given a value. var x = 4 var y = 3 findMax(x, y) findMin(x, y) // Optional bonus- create a procedure that can determine the minimum or maximum value out of more than two parameters. numarr = [3, 50, 20, 3134, 5555, 2, 73, 59] function findExtrema(array) { greatest = array[0] least = array[0] for (let i = 1; i &lt; array.length; i++) { if (array[i] &gt; greatest) {greatest = array[i]} if (array[i] &lt; least) {least = array[i]} }; console.log(&quot;The greatest is &quot; + String(greatest) + &quot;. The least is &quot; + String(least) + &quot;.&quot;) } findExtrema(numarr) . 4 3 The greatest is 5555. The least is 2. . Homework/Hacks . I did the &quot;APCSP&quot; to binary thing. The procedure is called charToBinary. It works by first using the procedure DecimalToBinary that I made to convert the decimal version of the given character (found through the innate ord Python function), and then appends it to a list of each of the characters. It then prints it. . The reason the output has a 0 in front of every 8-bit conversion is that the intended output is in 7-bit. . def DecimalToBinary(x): if 0 &lt;= x &lt;= 255: pass else: return(&quot;Error&quot;) i = 7 binary = &quot;&quot; while i &gt;= 0: if x % (2**i) == x: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; x -= 2**i i -= 1 return binary def charToBinary(x): binlist = [] for i in x: binlist.append(DecimalToBinary(ord(i))) print(str(x), &quot;in binary is:&quot;, binlist) # output is has an extra 0 at the front because it is in 8-bit binary, not 7-bit charToBinary(&quot;APCSP&quot;) . APCSP in binary is: [&#39;01000001&#39;, &#39;01010000&#39;, &#39;01000011&#39;, &#39;01010011&#39;, &#39;01010000&#39;] . Frontend Version with User Input . Here&#39;s a frontend version that lets you convert anything: . I would like to convert to binary. CONVERT . Nothing converted yet. . And here is the raw code for this version (including HTML to show IDs). . &lt;p&gt;I would like to convert &lt;input id=&quot;binaryinput&quot; style=&quot;text-align:left&quot; type=&quot;text&quot; minlength=&quot;1&quot; value=&quot;APCSP&quot;&gt; to binary. &lt;button id=&quot;convertbtn&quot;&gt;CONVERT&lt;/button&gt;&lt;br&gt;&lt;/p&gt; &lt;p id=&quot;binaryconversion&quot;&gt;Nothing converted yet.&lt;/p&gt; &lt;script&gt; var inpbox = document.getElementById(&quot;binaryinput&quot;); var opbox = document.getElementById(&quot;binaryconversion&quot;); var btn = document.getElementById(&quot;convertbtn&quot;); function DecimalToBinary(parameter) { var input = Number(parameter); if (input &lt; 0) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; } else if (input &gt; 255) { console.log(&#39;invalidreturn&#39;); return &quot;Invalid input.&quot;; }; var i = 7; var binary = &quot;&quot;; while (i &gt;= 0) { if (input % (2**i) == input) { binary += &quot;0&quot;; i -= 1; } else { binary += &quot;1&quot;; input -= 2**i; i -= 1; }; }; return binary; }; function stringToBinary(x) { var x = String(x); var binarr = []; for (i = 0; i &lt; x.length; i++) { binarr.push(DecimalToBinary(x.charCodeAt(i))); }; return binarr }; btn.onclick = function() { opbox.innerHTML = &#39;&quot;&#39; + String(inpbox.value) + &#39;&quot; in binary is [&#39; + String(stringToBinary(String(inpbox.value))) + &#39;].&#39;; }; &lt;/script&gt; .",
            "url": "https://drewreed2005.github.io/realdrew/sections12-13notes/",
            "relUrl": "/sections12-13notes/",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Simulations Lesson Notes",
            "content": "Hack #1 - Class Notes . In this section, I take my own notes on the section. I have split it up into a vocabulary section and a section for miscellaneous class notes. . Vocabulary . Simulations: abstractions that mimic more complex objects or phenomena from the real world. (The purpose is drawing inferences without the contraints of the real world.) . Variance: random chance, simulated through random number generation in simulations. . Miscellaneous Class Notes . Typically, simulations leave out specific details or simplify complex aspects. It is crucial, however, to have variables to represent variance in the situation. | Simulations often contain some amount of bias. | Variability and randomness exists inherently in the world, and we can represent this with random number generation. | . Here are some helpful functions for these simulations: . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice([1, 2, 3]) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Check-in Simulation Problem . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } } . Why is this simulation considered an abstraction? . It uses a conditional to execute one part of the code only when a particular condition is met. | It uses a REPEAT loop to run the same block of code multiple times. | It simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | It does not request input from the user or display output to the user. | Explanation: The simulation is considered an abstraction because it is represented in separate terms (abstracted) into a computer language, but still made to function in its intended circumstances. . Hack #2 - Functions Classwork . Below is the functions we were asked to use for the classwork. . Trying Randomization Functions . We were asked to do this: . Randomly select select a number from 1-100, assign it to be x, and print it. (If you have time, add a user input box!) . I did it below. Here&#39;s the first one that generates a random integer from 1 to 100. . import random x = random.randint(1, 100) print(x) . 41 . And here&#39;s something that encorporates user input. . import random print(&quot;Please pick the lower bound of the RNG.&quot;) x = int(input()) print(&quot;You picked&quot;, str(x) + &quot;.&quot;) print(&quot;Please pick the upper bound of the RNG.&quot;) y = int(input()) print(&quot;You picked&quot;, str(y) + &quot;.&quot;) print(&quot;Your random number is...&quot;, str(random.randint(x, y)) + &quot;.&quot;) . Please pick the lower bound of the RNG. You picked 10. Please pick the upper bound of the RNG. You picked 20. Your random number is... 11. . Closet User Input Function . Here is my program that lets you add to and remove things from your clothes list. . myclothes = [&quot;red shoes&quot;, &quot;green pants&quot;, &quot;tie&quot;, &quot;belt&quot;] def mycloset(): print(&quot;Your clothes:&quot;) for clothing in myclothes: print(&quot;-&quot;, clothing.capitalize()) print(&quot;What would you like to do? n1. Add clothes n2. Remove clothes n3. All done&quot;) rsp = input(&quot;Pick one of the two numbers?&quot;) if rsp == &quot;1&quot;: print(&quot;What clothing would you like to add?&quot;) rsp = input(&quot;What would you like to call it?&quot;) myclothes.append(rsp) mycloset() elif rsp == &quot;2&quot;: print(&quot;What clothing would you like to remove?&quot;) i = 0 while i &lt; len(myclothes): print(str(i + 1) + &quot;.&quot;, myclothes[i].capitalize()) i += 1 rsp = (int(input(&quot;Input an integer in range.&quot;)) - 1) if 0 &lt;= rsp &lt; len(myclothes): myclothes.pop(rsp) mycloset() else: print(&quot;Invalid input.&quot;) elif rsp == &quot;3&quot;: return &quot;Thanks!&quot; else: print(&quot;invalid input.&quot;) mycloset() . Your clothes: - Red shoes - Green pants - Tie - Belt What would you like to do? 1. Add clothes 2. Remove clothes 3. All done What clothing would you like to remove? 1. Red shoes 2. Green pants 3. Tie 4. Belt Your clothes: - Red shoes - Tie - Belt What would you like to do? 1. Add clothes 2. Remove clothes 3. All done . Coin Flip Example . Here is the example provided in class. . import random def coinflip(): #def function randomflip = random.randint(0, 1) #picks either 0 or 1 randomly (50/50 chance of either) if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Tails Tails Heads Heads . We were asked to make the coinflip weighted. I made heads twice as likely to be selected as tails in the code below. . def weightedcoin(): flip = random.randint(0, 2) if flip &gt;= 1: return &quot;Heads&quot; else: return &quot;Tails&quot; t1 = weightedcoin() t2 = weightedcoin() t3 = weightedcoin() t4 = weightedcoin() t5 = weightedcoin() print(&quot;Outcomes:&quot;, t1 + &quot;,&quot;, t2 + &quot;,&quot;, t3 + &quot;,&quot;, t4 + &quot;,&quot;, t5) . Outcomes: Heads, Heads, Heads, Tails, Heads . Hack #3 - Binary Simulation Problem . Here&#39;s the function to simulate the zombie apocalypse. Each bit of binary in the 8-bit string corresponds to a person&#39;s index in the survivorstatus list. . import random def randomnum(): # function for generating random int return random.randint(0, 255) def converttobin(num): # function for converting decimal to binary i = 7 binary = &quot;&quot; while i &gt;= 0: if num % (2**i) == num: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; num -= 2**i i -= 1 return binary def survivors(binary): # function to assign position survivorstatus = [&quot;Drew&quot;, &quot;AJ&quot;, &quot;Tony&quot;, &quot;Katie&quot; , &quot;Fatso&quot;, &quot;Elfen Child&quot;, &quot;Kiddo&quot;, &quot;Kid in Basement&quot;] i = 0 while i &lt; len(survivorstatus): if binary[i] == &quot;1&quot;: temp = &quot;Zombie&quot; else: temp = &quot;Human&quot; survivorstatus[i] = (survivorstatus[i], temp) i += 1 for human, state in survivorstatus: print(human + &quot;:&quot;, state) survivors(converttobin(randomnum())) . Drew: Human AJ: Human Tony: Zombie Katie: Zombie Fatso: Human Elfen Child: Human Kiddo: Human Kid in Basement: Human . Hack #4 - Thinking Through a Problem . For the dice roll program, I involved an integer parameter that determines how many trials of dice rolls will be simulated. The results are appended to a list that is then returned. That function is found below. . import random def diceroll(times): results = [] i = 0 while i &lt; times: results.append(random.randint(1, 6)) i += 1 return results results = diceroll(5) print(&quot;Rolls: &quot;, end = &#39;&#39;) for roll in results: print(str(roll) + &quot; &quot;, end = &#39;&#39;) . Rolls: 4 3 1 6 6 . Hack 5 - Applying your knowledge to situation based problems . This was the assignment. . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . I decided to make my own loop, which randomly selects a question (and never repeats the same question). The two additional questions are mostly vocabulary-based. . The Questions . See the last two for my own (they&#39;re both vocabulary-based). . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway. Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. (right) | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55. Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. (correct) | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design. Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball (correct) | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions. What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation will be biased in favor of Ashlynn&#39;s design | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. (correct) | | I edited the second correct answer to avoid confusion | . | PERSONAL QUESTION: What is the purpose of simulations? answer options To draw inferences without the contraints of the real world (correct) | To perfectly recreate a situation without any bias | To prove that the simulated situation is only practical in theory | To ignore distracting details that may influence the outcome of a situation | | . | PERSONAL QUESTION: How is random variability accounted for in simulations? answer options Clear frontend that shows visual aspects of the scenario | Connection to an extensive API with historical data | Random or pseudo-random number generation (correct) | Inconsistent interpretation of concrete conditions | | . | My Quiz . I made sure to include a randomization system for the questions. There is also a failsafe system in place in case the user accidentally inputs an invalid response. . import random #used to randomize the questions questions = [ {&quot;q&quot;: &quot;1. A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway. Several school administrators are concerned that the simulation contains bias favoring high-income students, however.&quot;, &quot;a&quot;: &quot;a. The simulation is an abstraction and therefore cannot contain any bias. nb. The simulation may accidentally contain bias due to the exclusion of details. nc. If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. nd. The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output.&quot;, &quot;correct&quot;: &quot;b&quot;}, {&quot;q&quot;: &quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55. Would that be considered a simulation and why?&quot;, &quot;a&quot;: &quot;a. No, it&#39;s not a simulation because it does not include a visualization of the results. nb. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. nc. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. nd. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences.&quot;, &quot;correct&quot;: &quot;d&quot;}, {&quot;q&quot;: &quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design. Which of the following details is most important to include in this simulation?&quot;, &quot;a&quot;: &quot;a. Realistic sound effects based on the material of the baseball bat and the velocity of the hit. nb. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy. nc. Accurate accounting for the effects of wind conditions on the movement of the ball. nd. A baseball field that is textured to differentiate between the grass and the dirt.&quot;, &quot;correct&quot;: &quot;c&quot;}, {&quot;q&quot;: &quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions. What are advantages of running the simulation versus an actual experiment?&quot;, &quot;a&quot;: &quot;a. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. nb. The simulation will be biased in favor of Ashlynn&#39;s design. nc. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. nd. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment.&quot;, &quot;correct&quot;: &quot;d&quot;}, {&quot;q&quot;: &quot;What is the purpose of simulations?&quot;, &quot;a&quot;: &quot;a. To draw inferences without the contraints of the real world nb. To perfectly recreate a situation without any bias nc. To prove that the simulated situation is only practical in theory nd. To ignore distracting details that may influence the outcome of a situation&quot;, &quot;correct&quot;: &quot;a&quot;}, {&quot;q&quot;: &quot;How is random variability accounted for in simulations?&quot;, &quot;a&quot;: &quot;a. Clear frontend that shows visual aspects of the scenario nb. Connection to an extensive API with historical data nc. Random or pseudo-random number generation nd. Inconsistent interpretation of concrete conditions&quot;, &quot;correct&quot;: &quot;c&quot;} ] #six questions, selected randomly validresponse = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] #a list of valid inputs score = 0 #score is set at zero, incremented later unless you suck def quizloop(): i = 0 #represents the number of questions asked, starting at 0 (meaning 1) while i &lt; 5: quesnum = int(random.randrange(len(questions))) #question number is generated randomly based on the number of questions remaining in &quot;questions&quot; question = questions[quesnum][&quot;q&quot;] #pulling the question from the randomly-selected dictionary answers = questions[quesnum][&quot;a&quot;] #pulling the answer from the randomly-selected dictionary print(question + &quot; n&quot; + answers) #printing the question answercheck(quesnum) #receiving and checking the accuracy of the user&#39;s answer questions.pop(quesnum) #removing the already asked question from the list so that it isn&#39;t repeated i += 1 #i incremented to indicate that one more of the five questions has already been asked scorecheck() #a reflection on your score def answercheck(quesnum): global score #retrieving global element &quot;score&quot; choice = input(&quot;Pick an option: a, b, c or d. Do not include the period.&quot;).lower() #using .lower() so that capital answers are still detected correct if choice in validresponse: #ensuring the response is one of the four valid letters pass else: print(&quot;Invalid response.&quot;) answercheck(quesnum) return if choice == questions[quesnum][&quot;correct&quot;]: #if the choice is correct print(&#39;Good job! &quot;&#39; + choice + &#39;&quot; is the correct answer.&#39;) score += 1 else: #if the choice isn&#39;t correct print(&#39;Unfortunately, &quot;&#39; + questions[quesnum][&quot;correct&quot;] + &#39;&quot; was the correct answer.&#39;) def scorecheck(): percent = int(100 * (int(score) / 5)) #calculating percent value of score, converted with int() for no ugly decimal print(&quot;You scored&quot;, str(int(score)), &quot;out of 5 on the quiz. That&#39;s&quot;, str(percent) + &quot;%!&quot;) if percent &lt; 80: #if you didn&#39;t score a passing score print(&quot;Unfortunately, you needed at least 80% (3 out of 5) to pass. nBetter luck next time!&quot;) else: #if you did score a passing score print(&quot;Congratulations, that&#39;s a passing score! You&#39;re a real expert at simulations.&quot;) #all of the quiz happens with just this one function quizloop() . Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design. Which of the following details is most important to include in this simulation? a. Realistic sound effects based on the material of the baseball bat and the velocity of the hit. b. A depiction of an audience in the stands with lifelike behavior in response to hit accuracy. c. Accurate accounting for the effects of wind conditions on the movement of the ball. d. A baseball field that is textured to differentiate between the grass and the dirt. Good job! &#34;c&#34; is the correct answer. How is random variability accounted for in simulations? a. Clear frontend that shows visual aspects of the scenario b. Connection to an extensive API with historical data c. Random or pseudo-random number generation d. Inconsistent interpretation of concrete conditions Good job! &#34;c&#34; is the correct answer. What is the purpose of simulations? a. To draw inferences without the contraints of the real world b. To perfectly recreate a situation without any bias c. To prove that the simulated situation is only practical in theory d. To ignore distracting details that may influence the outcome of a situation Good job! &#34;a&#34; is the correct answer. Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55. Would that be considered a simulation and why? a. No, it&#39;s not a simulation because it does not include a visualization of the results. b. No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. c. Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. d. Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. Good job! &#34;d&#34; is the correct answer. Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions. What are advantages of running the simulation versus an actual experiment? a. The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. b. The simulation will be biased in favor of Ashlynn&#39;s design. c. The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. d. The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. Good job! &#34;d&#34; is the correct answer. You scored 5 out of 5 on the quiz. That&#39;s 100%! Congratulations, that&#39;s a passing score! You&#39;re a real expert at simulations. . Hack #6 / Challenge - Taking real life problems and implementing them into code . I made a simulation that lets you breed flowers together and, based on their phenotype, there is a chance of various new colors of flowers being bred. . There are even some rare types of flowers that can be created by combining breeds of flowers and getting lucky. You can find out more about the flowers by choosing &quot;Info&quot; in the simulation options. . The simulation runs as long as you want it to. Please try it out on your own if you want! It&#39;s kind of fun. . from IPython.display import clear_output as clr from random import randint as rng import time #defining flower classes class Flower: def __init__(self, id, name, phenos, rarity): self.name = name self.id = id self.phenos = phenos self.rarity = rarity #initializing types of flowers red = Flower(0, &quot;Red&quot;, [&quot;A&quot;], &quot;Common&quot;) purered = Flower(1, &quot;Pure Red&quot;, [&quot;A&quot;, &quot;A&quot;], &quot;Rare&quot;) blue = Flower(2, &quot;Blue&quot;, [&quot;B&quot;], &quot;Common&quot;) pureblue = Flower(3, &quot;Pure Blue&quot;, [&quot;B&quot;, &quot;B&quot;], &quot;Rare&quot;) yellow = Flower(4, &quot;Yellow&quot;, [&quot;C&quot;], &quot;Common&quot;) pureyellow = Flower(5, &quot;Pure Yellow&quot;, [&quot;C&quot;, &quot;C&quot;], &quot;Rare&quot;) white = Flower(6, &quot;White&quot;, [&quot;D&quot;], &quot;Common&quot;) purewhite = Flower(7, &quot;Pure White&quot;, [&quot;D&quot;, &quot;D&quot;], &quot;Rare&quot;) violet = Flower(8, &quot;Violet&quot;, [&quot;A&quot;, &quot;B&quot;], &quot;Hybrid&quot;) green = Flower(9, &quot;Green&quot;, [&quot;B&quot;, &quot;C&quot;], &quot;Hybrid&quot;) orange = Flower(10, &quot;Orange&quot;, [&quot;A&quot;, &quot;C&quot;], &quot;Hybrid&quot;) pink = Flower(11, &quot;Pink&quot;, [&quot;A&quot;, &quot;D&quot;], &quot;Hybrid&quot;) skyblue = Flower(12, &quot;Sky Blue&quot;, [&quot;B&quot;, &quot;D&quot;], &quot;Hybrid&quot;) cream = Flower(13, &quot;Cream&quot;, [&quot;C&quot;, &quot;D&quot;], &quot;Hybrid&quot;) gold = Flower(14, &quot;Gold&quot;, [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;], &quot;Super Rare&quot;) #list of various flower types flowerlist = [red, purered, blue, pureblue, yellow, pureyellow, white, purewhite, violet, green, orange, pink, skyblue, cream, gold] #initializing starting garden garden = [red, blue, yellow, white] #priorities for breeding priolist = {&quot;A&quot;: 0, &quot;B&quot;: 1, &quot;C&quot;: 2, &quot;D&quot;: 3} def breedchoice(): tempgarden = [] for flower in garden: tempgarden.append(flower) print(&quot;Which flower would you like to breed?&quot;) for i in range(len(tempgarden)): print(str(i + 1) + &quot;.&quot;, tempgarden[i].name) rsp = input(&quot;Choose one of these flowers.&quot;) try: f1 = tempgarden[int(rsp) - 1] tempgarden.pop(int(rsp) - 1) print(&quot;Which other flower would you like to breed?&quot;) for i in range(len(tempgarden)): print(str(i + 1) + &quot;.&quot;, tempgarden[i].name) rsp = input(&quot;Choose one of these flowers.&quot;) try: f2 = tempgarden[int(rsp) - 1] breed(f1, f2) except: print(&#39;Invalid input.&#39;) breedchoice() except: print(&#39;Invalid input.&#39;) breedchoice() #function for breeding flowers def breed(f1, f2): result = [] print(&quot;Breeding&quot;, f1.name, &quot;and&quot;, f2.name + &quot;...&quot;) if f1.rarity == &quot;Rare&quot; and f2.rarity == &quot;Rare&quot;: odds = rng(0, 2) if odds == 0: print(&quot;WOW! You bred the rare Gold flower!&quot;) garden.append(gold) elif odds == 1: print(&quot;You bred a&quot;, f1.name + &quot;!&quot;) else: print(&quot;You bred a&quot;, f2.name + &quot;!&quot;) flowersim() return temp = rng(0, (len(f1.phenos) - 1)) result.append(f1.phenos[temp]) temp = rng(0, (len(f2.phenos) - 1)) temp = f2.phenos[temp] if priolist[temp] &lt; priolist[result[0]]: result.insert(0, temp) else: result.append(temp) for flower in flowerlist: if flower.phenos == result: print(&quot;You bred a(n)&quot;, flower.name + &quot;!&quot;) if flower not in garden: garden.append(flower) time.sleep(1) flowersim() #function for getting flower info def flowerinfo(): print(&quot;Which flower would you like to know about?&quot;) for i in range(len(garden)): print(str(i + 1) + &quot;.&quot;, garden[i].name) rsp = input(&quot;Choose one of these flowers.&quot;) try: chosen = garden[int(rsp) - 1] print(&quot;Name:&quot;, chosen.name) print(&quot;Phenotype:&quot;, chosen.phenos) print(&quot;Rarity:&quot;, chosen.rarity) print(&#39;Press the &quot;ENTER&quot; key when finished.&#39;) done = input() flowersim() except: print(&quot;Invalid input.&quot;) flowerinfo() def flowersim(): clr(wait=True) print(&quot;Your Garden:&quot;) for i in range(len(garden)): print(str(i + 1) + &quot;.&quot;, garden[i].name, &quot;(&quot; + garden[i].rarity + &quot;)&quot;) print(&quot;What would you like to do? n1. Breed n2. Info n3. Finish&quot;) asking = True while asking: rsp = input(&quot;Please choose one of these options.&quot;) if rsp == &quot;1&quot;: breedchoice() asking = False elif rsp == &quot;2&quot;: flowerinfo() asking = False elif rsp == &quot;3&quot;: print(&quot;Thank you for playing!&quot;) asking = False else: flowersim() return flowersim() . Your Garden: 1. Red (Common) 2. Blue (Common) 3. Yellow (Common) 4. White (Common) 5. Violet (Hybrid) 6. Orange (Hybrid) 7. Pink (Hybrid) 8. Green (Hybrid) 9. Sky Blue (Hybrid) 10. Cream (Hybrid) 11. Pure Red (Rare) 12. Pure Blue (Rare) 13. Pure Yellow (Rare) 14. Pure White (Rare) 15. Gold (Super Rare) What would you like to do? 1. Breed 2. Info 3. Finish Thank you for playing! . As you can see here, I went through and bred every flower in the simulation. I hope you enjoy messing with it if you end up doing so. .",
            "url": "https://drewreed2005.github.io/realdrew/section16notes/",
            "relUrl": "/section16notes/",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Libraries and Random Values Lesson Notes",
            "content": "FOR GRADERS . I combined my notes, challenges, and homework completion from both lessons into this one document, so it&#39;s pretty big and bulky. Here is what I completed (and you can verify by finding these things on the blog&#39;s table of contents): . Basic Expectations . Libraries (3.14): . Fill-in-the-blank notes | Additional notes | Challenges 1-3 fully completed (see each in the TOC for proof) | Homework &quot;Option 1&quot; (draws a shape with a given random number of sides with Turtle) | Homework &quot;Option 2&quot; (finds the difference between two dates, at least one random) | . Random Values (3.15): . Additional notes | Fill-in-the-blank random examples list | Challenge 1 (coin flip function) | Binary homework | . Extras . Fully incorporated user input for Libraries Homework &quot;Option 1&quot; and &quot;Option 2&quot; | Working failsafe code on Libraries Homework &quot;Option 2&quot; | Random Values Challenge 1 &quot;EXTRA&quot;: Card Generator and Royal Flush Detector | Random Values Homework &quot;EXTRA&quot;: Decimal-to-Hexadecimal Converter | . Libraries . Okay, so we&#39;ve learned a lot of code, and all of you now can boast that you can code at least some basic programs in python. But, what about more advanced stuff? What if there&#39;s a more advanced program you don&#39;t know how to make? Do you need to make it yourself? Well, not always. . You&#39;ve already learned about functions that you can write to reuse in your code in previous lessons. But,there are many others who code in python just like you. So why would you do again what someone has already done, and is available for any python user? . Packages allow a python user to import methods from a library, and use the methods in their code. Most libraries come with documentation on the different methods they entail and how to use them, and they can be found with a quick Google search. methods are used with the following: . Note: a method from a package can only be used after the import statement. . Some libraries are always installed, such as those with the list methods which we have previously discussed. But others require a special python keyword called `import`. We will learn different ways to import in Challenge 1. . Sometimes we only need to import a single method from the package. We can do that with the word &quot;from&quot;, followed by the package name, then the word &quot;import&quot;, then the method. This will alllow you to use the method without mentioning the package&#39;s name, unlike what we did before, however other methods from that package cannot be used. To get the best of both worlds you can use &quot;*&quot;. . To import a method as an easier name, just do what we did first, add the word &quot;as&quot;, and write the name you would like to use that package as. . Additional Notes . Here are some extra notes I took for the sake of completion. . Some libraries need to be installed before use. Some, however, are innate. | Some libraries require the features of other libraries. For example, Turtle relies on Tkinter features to open a window for a canvas. | Importing with the format from [library] import * negates the need to specify [library].function() each time. | . Challenge 1: Basic Libraries . Find a Python package on the internet and import it | Choose a method from the package and import only the method | import the package as a more convenient name. | from time import * from IPython.display import clear_output as clr #i used them to make an ASCII animation def base(): print(&quot; | | &quot;) print(&quot;--&quot;) def startpos(): print(&quot; O &quot;) print(&quot; /| &quot;) def waveup(): print(&quot; O /&quot;) print(&quot; /| &quot;) def wavemid(): print(&quot; O| &quot;) print(&quot; /| &quot;) i = 0 while i &lt; 30: clr(wait=True) if i == 0: startpos() base() else: if i % 2 == 0: wavemid() base() else: waveup() base() i += 1 sleep(.2) . O / /| | | -- . For this challenge, I imported the whole time module using *, which allowed me to call sleep() rather than time.sleep(). I also imported clear_output and renamed it &quot;clr&quot; for simplicity. Try copying and running this yourself for a little animation. . Challenge 2: Turtle . Turtle is a Python drawing package which allows you to draw all kinds of different shapes. It&#39;s ofter used to teach beginning python learners, but is really cool to use anywhere. Turtle employs a graphics package to display what you&#39;ve done, but unfortunately it&#39;s kind of annoying to make work with VSCode. . My Image . This is what I created with Turtle. I&#39;m no artist, but I tried to at least show I could use the program from a code perspective. . A smiley face and a little star with Christmas colors Here&#39;s the code I used for it. See the code comments for where I satisfied the expectations of this challenge. . import turtle t = turtle.Turtle() ts = t.getscreen() # vvv FOUND THIS ONE MYSELF vvv ts.bgcolor(&#39;pink&#39;) #here&#39;s me changing a canvas function t.pensize(5) #here&#39;s me changing the pen settings t.speed(&#39;fastest&#39;) #more pen/canvas settings t.color(&#39;yellow&#39;) # vvv FOUND THIS ONE MYSELF vvv t.circle(65) #here&#39;s a unique function i used t.left(90) t.color(&#39;pink&#39;) t.forward(90) t.left(90) t.forward(10) t.left(90) t.color(&#39;black&#39;) t.forward(20) t.color(&#39;pink&#39;) t.left(90) t.forward(20) t.left(90) t.color(&#39;black&#39;) t.forward(20) t.color(&#39;pink&#39;) t.left(90) t.forward(10) t.left(90) t.forward(70) t.color(&#39;black&#39;) t.left(90) i = 0 while i &lt; 50: t.forward(1) t.left(1) i += 1 t.color(&#39;pink&#39;) t.setpos(20, -100) #trying out more functions i = 0 t.color(&#39;green&#39;, &#39;red&#39;) # vvv FOUND THIS ONE MYSELF vvv t.begin_fill() while i &lt; 25: t.forward(150) t.right(130) i += 1 # vvv FOUND THIS ONE MYSELF vvv t.end_fill() . Challenge 3: Math . The math package allows for some really cool mathematical methods! . Methods Action . ceil(x) | rounds to the largest integer greater than or equal to x | . floor(x) | rounds to largest integer less than or equal to x | . factorial(x) | takes the factorial of x | . gcd(x,y) | returns the greatest common denominator of x and y | . lcm(x,y) | returns the least common multiple of x and y | . Challenge: Create a program which asks for a user input of two numbers, and returns the following: . each number rounded up | each number rounded down | the lcm of the rounded down numbers | the gcf of the rounded up numbers | the factorial of each number | something else using the math package! | . I decided to use sqrt. . from math import * def smorgas(x, y): info = [] for num in [x, y]: info.append(ceil(num)) #rounding x and y up info.append(floor(num)) #rounding x and y down info.append(lcm(floor(x), floor(y))) #the lcm of x and y rounded down info.append(gcd(ceil(x), ceil(y))) #the gcd of x and y rounded up info.append(factorial(x)) #same as x factorial info.append(factorial(y)) #same as y factorial info.append(floor(sqrt(x))) #extra: finding and rounding the square root of x info.append(floor(sqrt(y))) #extra: square root of y return info #returned as list to be called later i1 = 3 i2 = 5 info = smorgas(i1, i2) print(i1, &quot;rounded up:&quot;, info[0]) print(i1, &quot;rounded down:&quot;, info[1]) print(i2, &quot;rounded up:&quot;, info[2]) print(i2, &quot;rounded down:&quot;, info[3]) print(&quot;Least common multiple of&quot;, i1, &quot;and&quot;, str(i2) + &quot;:&quot;, info[4]) print(&quot;Greatest common denominator of&quot;, i1, &quot;and&quot;, str(i2) + &quot;:&quot;, info[5]) print(&quot;Factorial of&quot;, str(i1) + &quot;:&quot;, info[6]) print(&quot;Factorial of&quot;, str(i2) + &quot;:&quot;, info[7]) print(&quot;Rounded square root of&quot;, str(i1) + &quot;:&quot;, info[8]) print(&quot;Rounded square root of&quot;, str(i2) + &quot;:&quot;, info[9]) . 3 rounded up: 3 3 rounded down: 3 5 rounded up: 5 5 rounded down: 5 Least common multiple of 3 and 5: 15 Greatest common denominator of 3 and 5: 1 Factorial of 3: 6 Factorial of 5: 120 Rounded square root of 3: 1 Rounded square root of 5: 2 . Homework . As you can see below, I completed both Option 1 and Option 2. . Option 1 . Here is the Turtle program that generates a polygon with the number of sizes asked by the user. . A very satisfying program to watch. Works for all numbers of sides. Here is the isolated code: . import turtle def userInp(): print(&quot;How many sides do you want on the polygon?&quot;) rsp = input(&quot;Please input an integer.&quot;) rsp = int(rsp) return rsp t = turtle.Turtle() t.speed(&#39;fastest&#39;) i = 0 sides = userInp() while i &lt; sides: angle = 180 - (((sides - 2) * 180) / sides) t.forward(360/sides) t.left(angle) i += 1 . And here&#39;s code that makes a polygon for a random number of sides from 1 to 10. (1 is just a straight line.) . This time, it generates a random number. And here&#39;s the code again. . import turtle from random import * t = turtle.Turtle() t.speed(&#39;fastest&#39;) i = 0 sides = randint(1, 10) print(&quot;Number of sides on polygon:&quot;, sides) while i &lt; sides: angle = 180 - (((sides - 2) * 180) / sides) t.forward(360/sides) t.left(angle) i += 1 . Option 2 (&quot;Libraries HW&quot;) . Here is the program that finds the distance between two dates using the datetime package. One set of instructions says to use a user input and a random date while the other says to use two completely random dates, so I made both. . Here&#39;s the one that takes one user input and then generates the second randomly: . from datetime import date from random import * days_dictionary = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30,10: 31, 11: 30, 12: 31 } def getUserDate(): #really long because of a bunch of failsafes yr = False mh = False dy = False while yr == False: print(&quot;What year do you want?&quot;) useryr = input(&quot;Input any year. Must be a positive integer.&quot;) try: useryr = abs(int(useryr)) yr = True except: print(&#39;Please input a valid integer.&#39;) while mh == False: print(&quot;What month do you want?&quot;) usermh = input(&quot;Input a month. Must be an integer 1 through 12.&quot;) try: usermh = abs(int(usermh)) if 1 &lt;= usermh &lt;= 12: mh = True else: print(&#39;Please input a valid integer within the range.&#39;) except: print(&#39;Please input a valid integer.&#39;) while dy == False: print(&quot;What day do you want?&quot;) userdy = input(&quot;Input a day. Must be within the amount of days per year (Feb. with 28).&quot;) try: userdy = abs(int(userdy)) if 1 &lt;= userdy &lt;= days_dictionary[usermh]: dy = True else: print(&#39;Please input a valid day.&#39;) except: print(&#39;Please input a valid integer.&#39;) return date(useryr, usermh, userdy) def randomDate(): randyear = randint(1500, 3000) #only from the years 1500 to 3000 randmonth = randint(1, 12) #limited to 1-12, January-December randday = randint(1, days_dictionary[randmonth]) return date(randyear, randmonth, randday) date1 = getUserDate() date2 = randomDate() delta = abs(date2 - date1) diff = delta.days print(&quot;User Date:&quot;, date1) print(&quot;Random Date:&quot;, date2) print(&#39;The number of days between these two dates is&#39;, diff, &#39;days.&#39;) . What year do you want? What month do you want? What day do you want? User Date: 2022-12-12 Random Date: 1996-08-24 The number of days between these two dates is 9606 days. . And then here&#39;s the one that has two random dates: . date1 = randomDate() date2 = randomDate() delta = abs(date2 - date1) diff = delta.days print(&quot;Random Date 1:&quot;, date1) print(&quot;Random Date 2:&quot;, date2) print(&#39;The number of days between these two dates is&#39;, diff, &#39;days.&#39;) . Random Date 1: 2024-08-25 Random Date 2: 1978-02-26 The number of days between these two dates is 16982 days. . Random Values . This is the start of the 3.15 - Random Values notes section. . Additional Notes . Good for cryptography and games | Using the import statements we learned about in the last lesson, you can import Python&#39;s random module for various random packages | Later in the lesson, we can use random to check if a function works in all cases | There are multiple ways to use random: choose from a list, select an integer in a range, shuffle a list, etc. | . What are Random Values? . Random Values are a number generated using a large set of numbers and a mathematical algorithm which gives equal probability to all number occuring. . Each result from randomization is equally likely to occur. Using random number generation in a program means each execution may produce a different result. . What are examples of (psuedo-)random outputs in the world? Add a few you can think of. . Marbles | Card game hands | Weather | APCSP teacher grades | . Why Do We Need Random Values for Code? . Adding elements of randomness helps us to simulate these real-world &quot;random&quot; scenarios. . import random random_number = random.randint(1,100) print(random_number) . 64 . def randomlist(): list = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;blueberry&quot;] element = random.choice(list) print(element) randomlist() . banana . Here&#39;s a code version of a dice roll. . import random for i in range(3): roll = random.randint(1,6) print(&quot;Roll &quot; + str(i + 1) + &quot;:&quot;, str(roll)) . Roll 1: 4 Roll 2: 3 Roll 3: 5 . Challenge 1 . I made a function that simulates a coin flip and returns the outcome. You can put it within a print statement (see below) to announce the result. . def coinflip(): result = random.choice([&#39;heads&#39;, &#39;tails&#39;]) return result print(&quot;The result was... &quot; + coinflip() + &quot;!&quot;) print(&quot;The result was... &quot; + coinflip() + &quot;!&quot;) . The result was... tails! The result was... heads! . Extra . Here&#39;s my extra credit function that generates a random hand, then determines if it&#39;s a Royal Flush. (Unfortunately, Royal Flushes are incredibly rare, so it&#39;s hard to show off what will happen when you get one.) . import random #initializing suits = [&#39;Hearts&#39;, &#39;Spades&#39;, &#39;Clubs&#39;, &#39;Diamonds&#39;] cards = [&#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;Jack&#39;, &#39;Queen&#39;, &#39;King&#39;, &#39;Ace&#39;] deck = [] for suit in suits: for card in cards: info = ((card + &#39; of &#39; + suit), card, suit) deck.append(info) random.shuffle(deck) def flush(): global deck flush = [&#39;10&#39;, &#39;Jack&#39;, &#39;Queen&#39;, &#39;King&#39;, &#39;Ace&#39;] #the card conditions for flush hand = [deck[0], deck[1], deck[2], deck[3], deck[4]] #already shuffled print(&#39;Your hand:&#39;, hand[0][0] + &quot;,&quot;, hand[1][0]+ &quot;,&quot;, hand[2][0]+ &quot;,&quot;, hand[3][0]+ &quot;,&quot;, hand[4][0]) base = hand[0][2] for name, card, suit in hand: if suit == base: #if every card has the same suit if card in flush: #if the card is in a royal flush set pass else: print(&#39;Your hand is NOT a Royal Flush!&#39;) return else: print(&#39;Your hand is NOT a Royal Flush!&#39;) return print(&#39;Your hand is a Royal Flush!&#39;) #if all conditions pass, it&#39;s a flush return flush() . Your hand: Jack of Diamonds, 3 of Diamonds, 8 of Spades, 3 of Clubs, 3 of Hearts Your hand is NOT a Royal Flush! . Homework . I decided to do both binary conversion and the extra hexadecimal conversion. . Binary . This cell converts x, a random integer within the domain of 8-bit binary, into binary. Which number was selected is shown in the output. . def DecimalToBinary(num): i = 7 binary = &quot;&quot; while i &gt;= 0: if num % (2**i) == num: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; num -= 2**i i -= 1 return binary x = random.randint(0, 255) print(&quot;Initial decimal number:&quot;, x) print(&quot;Binary conversion:&quot;, DecimalToBinary(x)) . Initial decimal number: 47 Binary conversion: 00101111 . Hexadecimal . I created a function that converts a random integer y within the domain of 6-bit hexadecimal to hexadecimal. I did it without the built in hex function. . def DecimalToHexa(num): hexalist = [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;] hexa = [] hexadec = &#39;&#39; while num &gt; 0: num, ind = divmod(num, 16) hexa.append(hexalist[ind]) i = (len(hexa) - 1) while i &gt;= 0: hexadec += hexa[i] i -= 1 return hexadec y = random.randint(0, 16777215) print(&quot;Initial decimal number:&quot;, y) print(&quot;Hexadecimal conversion:&quot;, DecimalToHexa(y)) . Initial decimal number: 11996363 Hexadecimal conversion: B70CCB .",
            "url": "https://drewreed2005.github.io/realdrew/sections14-15notes/",
            "relUrl": "/sections14-15notes/",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Trying ASCII Animations",
            "content": "What? . The goal is to offset a certain ASCII image in a way to create an animation. . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[32m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*35 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 2 # count by 2 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship function . | |/ __ |__/ ____/ - . Attempt 1 . I tried to make a walk cycle. . print(&quot; O &quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) . O /| | | -- . print(&quot; O &quot;) print(&quot; /| &quot;) print(&quot; / | &quot;) print(&quot;--&quot;) . O /| / | -- . It didn&#39;t turn out great. . Attempt 2 . This time I tried a simple wave. . def startpos(): print(&quot; O &quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) startpos() . O /| | | -- . def waveup(): print(&quot; O /&quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) waveup() . O / /| | | -- . def wavemid(): print(&quot; O| &quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) wavemid() . O| /| | | -- . And here it is iterated. . import time # used for delay from IPython.display import clear_output # jupyter specific clear def startpos(): print(&quot; O &quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) def waveup(): print(&quot; O /&quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) def wavemid(): print(&quot; O| &quot;) print(&quot; /| &quot;) print(&quot; | | &quot;) print(&quot;--&quot;) i = 0 while i &lt; 30: clear_output(wait=True) if i == 0: startpos() else: if i % 2 == 0: wavemid() else: waveup() i += 1 time.sleep(.2) . O / /| | | -- .",
            "url": "https://drewreed2005.github.io/realdrew/tryingpythonascii/",
            "relUrl": "/tryingpythonascii/",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Developing Algorithms and Searching Lesson Notes",
            "content": "Developing Algothims (Python) . An algorithm is a set of actions that are taken to achieve a certain result. There are many algorithms that can be used to achieve a certain result. . Determining Outcomes . Below are some cells that we had to determine the outcomes of. . def mystery(num, num2): if (num % num2 == 0): print(&quot;True&quot;) else: print(&quot;False&quot;) mystery(20, 4) . True . 1. What does the algorithm do? Please explain in words. . The algorithm checks if the first number num is evenly divisible by the second number num2, and if it is, prints &quot;True&quot;. If else, it prints false. . 2. What if I put in 30 as num and 4 as num2. What would be the output? . The output would be &quot;False&quot;, as 30 is not evenly divisible by 4 (since 30 / 4 = 7.5). . Editing Algorithms . See the code cells below. . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) else: if (temp &gt;= 65): print(&quot;I will go outside&quot;) else: print(&quot;it is too cold outside&quot;) . it is too hot outside . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) if (temp &gt;= 65): print(&quot;i will go outside&quot;) if (temp &lt; 65): print(&quot;it is too cold outside&quot;) . it is too hot outside i will go outside . We were asked to edit the second algorithm to make it the same as the first and to make it work with any number. Here it is: . temp = 95 if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) elif (temp &lt; 65): print(&quot;it is too cold outside&quot;) else: print(&quot;i will go outside&quot;) . it is too hot outside . And this shows that it works the same with any number: . import random temp = random.randrange(30, 100) print(&quot;The temperature is {} degrees.&quot;.format(temp)) if (temp &gt;= 90): print(&quot;it is too hot outside&quot;) elif (temp &lt; 65): print(&quot;it is too cold outside&quot;) else: print(&quot;i will go outside&quot;) . The temperature is 71 degrees. i will go outside . Task . We were given this code as an example. It is supposed to do this: . The sum of the first integer is 1. | Then, increase that integer by 1. I now add 2 to my existing sum (1). My new sum is 3. | Repeat until I add 5 to my sum. The resulting sum is 15. | . sum = 0 # start with a sum of 0 for i in range (1, 6): # you will repeat the process five times for integers 1-5 sum = sum + i # add the number to your sum print(sum) # print the result . 15 . We are expected to make an algorithm to add up the first five odd integers. I did it with the step aspect of the range function. . sum = 0 for i in range(1, 11, 2): #skips from 1 to 3, 5, 7, and finally 9 (11 is the cap) sum = sum + i print(sum) . 25 . Homework . We were asked to use an algorithm to make the Collatz Conjecture. Conditions: . Start with any positive integer | If the number is even, divide by 2 | The number is odd, multiply by 3 and add 1 | Repeat steps 2 and 3 until you reach 1 | . integer = 5 while integer != 1: if (integer % 2 == 0): integer = int(integer / 2) else: integer = (integer * 3) + 1 print(integer) . 16 8 4 2 1 . Developing Algorithms (JavaScript) . This is the same basic concept as before but in JavaScript. Vocab carries over. I skipped review becauses it&#39;s all review and I&#39;m solid on it. . Conditionals vs. Booleans . Conditionals can be used in conjunction with Booleans. This is a cell from their lesson. . sunny = true; rainy = false; if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . It is the same as this. . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . A way to check if they&#39;re the same is to see if the outputs of the four possibilities result in the same outcomes. . Challenge . We were asked as an extra credit challenge to create a system that uses an IP address and a subnet mask to determine a network address. Here is my working JavaScript code. . const IP = &quot;251.84.0.1&quot;; const SNM = &quot;255.255.255.0&quot;; function DecimalToBinary(deci) { var i = 7; var binary = &quot;&quot;; while (i &gt;= 0) { if (deci % (2**i) === deci) { binary += &quot;0&quot;; i -= 1; } else { binary += &quot;1&quot;; deci -= 2**i; i -= 1; }; }; return binary; }; function BinaryToDecimal(bin) { var i = 0; var deci = 0; while (i &lt; 8) { if (bin[i] === &quot;1&quot;) { deci += (2**(7 - i)); }; i += 1; }; return deci }; function AddressToBinary(ad) { tempdeci = &quot;&quot;; templist = []; binaddress = &quot;&quot;; for (let i = 0; i &lt; ad.length; i++) { if (ad[i] !== &quot;.&quot;) { tempdeci += ad[i]; } else { templist.push(tempdeci); tempdeci = &quot;&quot;; }; }; templist.push(tempdeci); for (let i = 0; i &lt; templist.length; i++) { binaddress += DecimalToBinary(Number(templist[i])); if (i &lt; 3) { binaddress += &quot;.&quot;; }; }; console.log(binaddress); return binaddress; }; function AddressToDecimal(ad) { tempdeci = &quot;&quot;; templist = []; deciaddress = &quot;&quot;; for (let i = 0; i &lt; ad.length; i++) { if (ad[i] !== &quot;.&quot;) { tempdeci += ad[i]; } else { templist.push(tempdeci); tempdeci = &quot;&quot;; }; }; templist.push(tempdeci); for (let i = 0; i &lt; templist.length; i++) { deciaddress += BinaryToDecimal(templist[i]); if (i &lt; 3) { deciaddress += &quot;.&quot;; }; }; console.log(deciaddress); return deciaddress; }; function NetAddressConvert(ip, snm) { tempnetadd = &quot;&quot;; ip = AddressToBinary(ip); snm = AddressToBinary(snm); for (let i = 0; i &lt; 35; i++) { if((ip[i] === &quot;1&quot;) &amp;&amp; (snm[i] === &quot;1&quot;)) { tempnetadd += &quot;1&quot; } else if (ip[i] === &quot;.&quot;) { tempnetadd += &quot;.&quot;; } else { tempnetadd += &quot;0&quot;; }; }; console.log(tempnetadd); tempnetadd = AddressToDecimal(tempnetadd); return tempnetadd; }; NetAddressConvert(IP, SNM) . 11111011.01010100.00000000.00000001 11111111.11111111.11111111.00000000 11111011.01010100.00000000.00000000 251.84.0.0 . How it Works . I know it&#39;s pretty complicated and I didn&#39;t make any code comments, but here&#39;s how it works. . I made four functions for convenience, two being ones I already made (though one was just in Python before): DecimalToBinary(), which converts a decimal input to 8-bit binary; BinaryToDecimal(), which converts an 8-bit binary input to decimal; AddressToBinary(), which converts an IP address or subnet mask from decimal to binary; and AddressToDecimal(), which converts an IP address or subnet mask from binary to decimal. . The NetAddressConvert() function that satisfies the conditions of the assignment takes a decimal IP address and decimal subnet mask (in any order) as parameters, converts them to binary, then procedurally creates the network address by checking (using &amp;&amp;) if both bits at a certain index on the IP and subnet mask are &quot;1&quot; (adding a &quot;1&quot; if true), and if they aren&#39;t, it adds a &quot;0&quot; to the network address. Where there are periods in the IP, to ensure the same formatting, a period is placed in the network address. . The example above uses 251.84.0.1 as the IP address and 255.255.255.0 as the subnet mask. The program works with all other IP addresses and subnet masks, however, as long as they stay within the legitimate bounds of 8-bit binary. . Searching Introduction . Searching algorithms exist to find data in a program. This can be done with sequences or intervals. . Sequential Search . Here is an example of a sequential search algorithm. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Binary Search . Binary search essentially checks for how close data is relative to what is being looked for. If an array exists and looks like this ([1, 2, 3, 4, 5, 6, 7]) (and it&#39;s important for it to be ordered in this case), a search that is looking for 6 and starts in the middle (returns 4), the program knows 4 &lt; 6 and would loop only further up. Same if it was a lower number. . Copied from their blog: . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16.&quot; . Here&#39;s a code example they provided: . def binarySearch(array, target): low = 0 high = len(array)-1 while high &gt;= low: mid = (high + low) // 2 #floor division, rounds it down to the nearest whole if array[mid] == target: return mid elif array[mid] &gt; target: high = mid-1 else: low = mid+1 return False . And here it is in action. . examplearray = [3, 4, 5, 6, 7, 8, 9, 10, 11] binarySearch(examplearray, 11) . 8 . Here&#39;s a version of it in a recursive loop. We already talked about converting between while and recursive loops, so no need to go crazy over it. It requires more parameters. . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Homework . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Run the very last code segment below to load test cases and submission function. . def sqrt(N): low = 0 high = N if N &gt; 1: high = (N // 2) while high &gt;= low: mid = (high + low) // 2 #floor division, rounds it down to the nearest whole if (mid**2) == N: return mid elif (mid**2) &gt; N: high = mid - 1 else: low = mid + 1 return False print(sqrt(49)) . 7 . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed . Explanation . I used binary search by setting the low to 0 and the high to the target squared (N), and mid started with half of that squared number (rounded). Mid moves up/down based on how the squared number compared to the number in question squared. . The Process . I started by making a system that listed all values between 0 and the number in question, which obviously took a lot longer because that process had to run before the search. I then tried a sequential search, which made it take even longer and felt a whole lot more amateur. . I talked with Alex and realized how stupid the list thing was. I ended up just using the number that was being rooted as the high for a binary search and checked the units between 0 and it squared. .",
            "url": "https://drewreed2005.github.io/realdrew/sections9&11notes/",
            "relUrl": "/sections9&11notes/",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Mathematical Expressions and Strings Lesson Notes",
            "content": "3.3 Mathematical Expressions . Vocabulary: Fill in the Blanks . The symbol for exponent is ** . The symbol for addition is + . The symbol for subtraction is - . The symbol for multiplication is * . The symbol for division is / . The symbol for modulus is % . An algorithm is a function with a set of rules that tells a program what to do. . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . Divide value1 by 10 (value1 = 5) | Multiply 2 from the result of the step 1 | Subtract 4 from the result of the step 2 | Print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. . Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for number in numlist: if (int(number) % 3) == 0: print(number + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. . Concatenation is combining strings. . Length is the amount of characters in a string. . A substring is individual characters of a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice . Change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length. . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework . This section is for my completion of the homework assignments. . 3.3 - Binary Calculator . Below is my code for the binary assignment from the 3.3 lesson. . import random def convert(input): if 0 &lt;= input &lt;= 255: pass else: print(&quot;Invalid input.&quot;) return i = 7 binary = &quot;&quot; while i &gt;= 0: if input % (2**i) == input: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; input -= 2**i i -= 1 print(binary) convert(-3) convert(284) convert(random.randrange(256)) . Invalid input. Invalid input. 11101001 . 3.4 - Name Length Loop + Frontend Challenge . Below is my code for the name length assignment of 3.4. Below it is my attempt at the challenge to convert the data into frontend, as well as a block showing the code behind the table. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names: print(name.capitalize() + &quot; is&quot;, str(len(name)), &quot;letters long.&quot;) length(names) . Jaden is 5 letters long. Max is 3 letters long. Dylan is 5 letters long. Orlando is 7 letters long. . &lt;table id=&quot;nametable&quot;&gt; &lt;!--SCRIPT DATA GOES HERE--&gt; &lt;/table&gt; &lt;script&gt; table = document.getElementById(&quot;nametable&quot;); newhtml = &quot;&quot;; defaulthtml = &quot;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Length&lt;/th&gt;&lt;/tr&gt;&quot;; var namelist = [&quot;Jaden&quot;, &quot;Max&quot;, &quot;Dylan&quot;, &quot;Orlando&quot;]; arrayLength = namelist.length; for (var i = 0; i &lt; arrayLength; i++) { console.log(namelist[i], namelist[i].length); newhtml = newhtml + &quot;&lt;tr&gt;&lt;td&gt;&quot; + namelist[i] + &quot;&lt;/td&gt;&lt;td&gt;&quot; + String(namelist[i].length) + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; table.innerHTML = defaulthtml + newhtml }; &lt;/script&gt; .",
            "url": "https://drewreed2005.github.io/realdrew/sections3-4notes/",
            "relUrl": "/sections3-4notes/",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Variables & Assignments and Data Abstraction Lesson Notes",
            "content": "Variables and Assignments . Key Points: . Variables are abstractions within programs which represent a value | Values can be individual data points or a list/collection that contains many data values | Types of data: numbers, Booleans (T/F), lists, and strings | . In Python . Defining a variable by setting it equal to the type of variable. . #defining all the variables using the equal sign numbervariable = 25 stringvariable = &quot;word&quot; numberlist = [1, 2, 3, 4, 5] stringlist = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;] israining = False #printing all the defined variables print(numbervariable) print(stringvariable) print(numberlist) print(stringlist) print(israining) . 25 word [1, 2, 3, 4, 5] [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;] False . Variables can be modified through mathematical expressions, lists, dictionaries and more. . Variables can be interchanged through functions like this. . var1 = &quot;word&quot; # defining first variable var2 = &quot;number&quot; # defining second variable temp = var1 # defining temporary variable using the first variable var1 = var2 # changing the first variable value as the second variable value var2 = temp # changing the second variable value to the first variable value . In JavaScript . Variables in JavaScript have a different syntax. You can use var, const or let before the desired variable name, then set it equal to the variable&#39;s value. . var x = &quot;See?&quot; const y = &quot;This&quot; let z = &quot;works!&quot; console.log(x, y, z) . See? This works! . Otherwise, it works pretty much the same in terms of mechanics. One difference has to do with how the scale of a variable is determined, but that isn&#39;t covered in the lesson. . Data Abstraction . Key Points: . A list is made up of elements organized in a specific order | An element is a unique, individual value in a list | A string differs from a list as it is a sequence of characters rather than elements | Data abstraction uses a list by taking specific data elements from a list and organizing into a whole, less complex representation of the values such as a table | Remember that the indexes in AP materials start at 1 for some reason! | . In Python . Data abstraction is most often done through dictionaries and lists. Below is a code cell provided by the teachers which shows multiple more functions of Python that are useful in terms of data abstraction (for example, id() and using += to add [&#39;cookies&#39;]). . shopping_list = [&quot;milk&quot;, &quot;pasta&quot;, &quot;eggs&quot;, &quot;spam&quot;, &quot;bread&quot;, &quot;rice&quot; ] # list syntax is &quot;[]&quot; another_list = shopping_list print(id(shopping_list)) # each object has a uniques id; the id() function returns this id for the specifies object print(id(another_list)) # As shopping_list is attritibuted to another_list, the id for both are the same as the object in questiom does not change print(another_list) shopping_list += [&quot;cookies&quot;] # adding cookies to the list print(shopping_list) print(id(shopping_list)) # the id does not change print(another_list) a = b = c = d = e = f = another_list # it is possibe to atrribute the same object to various variables print(a) print(&quot;Adding cream&quot;) # .append() is a function which can be used to place new items into old lists b.append(&quot;cream&quot;) # changes in one of the variables chnges all the lists in other as the object in question is the same. print(a) print(c) print(d) . 4385360576 4385360576 [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] 4385360576 [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;] Adding cream [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] [&#39;milk&#39;, &#39;pasta&#39;, &#39;eggs&#39;, &#39;spam&#39;, &#39;bread&#39;, &#39;rice&#39;, &#39;cookies&#39;, &#39;cream&#39;] . Properties stated within lists (or dictionaries) can be used to divide a list into more precise lists. . data = [ &quot;Andromeda - Shrub&quot;, &quot;Bellflower - Flower&quot;, &quot;China Pink - Flower&quot;, &quot;Daffodil - Flower&quot;, &quot;Evening Primrose - Flower&quot;, &quot;French Marigold - Flower&quot;, &quot;Hydrangea - Shrub&quot;, &quot;Iris - Flower&quot;, &quot;Japanese Camellia - Shrub&quot;, &quot;Lavender - Shrub&quot;, &quot;Lilac - Shrub&quot;, &quot;Magnolia - Shrub&quot;, &quot;Peony - Shrub&quot;, &quot;Queen Anne&#39;s Lace - Flower&quot;, &quot;Red Hot Poker - Flower&quot;, &quot;Snapdragon - Flower&quot;, &quot;Sunflower - Flower&quot;, &quot;Tiger Lily - Flower&quot;, &quot;Witch Hazel - Shrub&quot;, ] # two empty lists flowers = [] shrubs = [] for plant in data: # A for loop that goes through each item in the list if &quot;Flower&quot; in plant: flowers.append(plant) # executed if &quot;flowers&quot; is in the item elif &quot;Flower&quot; not in plant: shrubs.append(plant) # executed if &quot;shrubs&quot; is in the item print(&quot;Shrubs {}&quot;.format(shrubs)) # The format() method formats the specified value(s) and insert them inside the string&#39;s placeholder. The placeholder is defined using curly brackets: {} print(&quot;Flowers {}&quot;.format(flowers)) . Shrubs [&#39;Andromeda - Shrub&#39;, &#39;Hydrangea - Shrub&#39;, &#39;Japanese Camellia - Shrub&#39;, &#39;Lavender - Shrub&#39;, &#39;Lilac - Shrub&#39;, &#39;Magnolia - Shrub&#39;, &#39;Peony - Shrub&#39;, &#39;Witch Hazel - Shrub&#39;] Flowers [&#39;Bellflower - Flower&#39;, &#39;China Pink - Flower&#39;, &#39;Daffodil - Flower&#39;, &#39;Evening Primrose - Flower&#39;, &#39;French Marigold - Flower&#39;, &#39;Iris - Flower&#39;, &#34;Queen Anne&#39;s Lace - Flower&#34;, &#39;Red Hot Poker - Flower&#39;, &#39;Snapdragon - Flower&#39;, &#39;Sunflower - Flower&#39;, &#39;Tiger Lily - Flower&#39;] . Individual elements inside lists can be abstracted through for loops. . albums = [(&quot;Welcome to my nightmare&quot;, &quot;Alice cooper&quot;, 1975), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981), (&quot;More Mayhem&quot;, &quot;Emilda May&quot;, 2011), (&quot;Ride the Lightning&quot;, &quot;Metallica&quot;, 1984), ] print(len(albums)) # number of items in the list for name, artist, year in albums: print(&quot;Album: {}, Artist: {}, year: {}&quot; .format(name, artist, year)) #returns a segregated and labled presentation of the songs . 5 Album: Welcome to my nightmare, Artist: Alice cooper, year: 1975 Album: Bad Company, Artist: Bad Company, year: 1974 Album: Nightflight, Artist: Budgie, year: 1981 Album: More Mayhem, Artist: Emilda May, year: 2011 Album: Ride the Lightning, Artist: Metallica, year: 1984 . List elements can be split and joined through the split() and join() functions. Look at how the syntax works. . panagram = &quot;&quot;&quot;the quick brown fox jumps tover the lazy dog&quot;&quot;&quot; words = panagram.split() # splitting the string above into individual words. Separator here is any whitespace. print(words) numbers = &quot;9,223,372,036,854,775,807&quot; print(numbers.split(&quot;,&quot;)) # separator is &quot;,&quot; generated_list = [&#39;9&#39;, &#39; &#39;, &#39;2&#39;, &#39;2&#39;, &#39;3&#39;, &#39; &#39;, &#39;3&#39;, &#39;7&#39;, &#39;2&#39;, &#39; &#39;, &#39;0&#39;, &#39;3&#39;, &#39;6&#39;, &#39; &#39;, &#39;8&#39;, &#39;5&#39;, &#39;4&#39;, &#39; &#39;, &#39;7&#39;, &#39;7&#39;, &#39;5&#39;, &#39; &#39;, &#39;8&#39;, &#39;0&#39;, &#39;7&#39;, &#39; &#39;, ] values = &quot;&quot;.join(generated_list) # converting the list into a string print(values) values_list = values.split() # separator is any whitespace print(values_list) . [&#39;the&#39;, &#39;quick&#39;, &#39;brown&#39;, &#39;fox&#39;, &#39;jumps&#39;, &#39;over&#39;, &#39;the&#39;, &#39;lazy&#39;, &#39;dog&#39;] [&#39;9&#39;, &#39;223&#39;, &#39;372&#39;, &#39;036&#39;, &#39;854&#39;, &#39;775&#39;, &#39;807&#39;] 9 223 372 036 854 775 807 [&#39;9&#39;, &#39;223&#39;, &#39;372&#39;, &#39;036&#39;, &#39;854&#39;, &#39;775&#39;, &#39;807&#39;] . In JavaScript . Here is a large example provided by the instructors to show JavaScript data abstraction. . Below sets up functions to create the new &quot;Player&quot; object. . function Player(name, position, average) { // make a function this.name = name; // different categories this.position = position; this.average = average; this.role = &quot;&quot;; } Player.prototype.setRole = function(role) { // whatever input we put into roles, it will be stored. this.role = role; } Player.prototype.toJSON = function() { const obj = {name: this.name, position: this.position, average: this.average, role: this.role}; const json = JSON.stringify(obj); return json; } var manager = new Player(&quot;Bob Melvin&quot;, &quot;Catcher&quot;, &quot;.233&quot;); // new player, including all the categories console.log(manager); console.log(manager.toJSON()); manager.setRole(&quot;Manager&quot;); console.log(manager); console.log(manager.toJSON()); . Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;&#39; } {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;&#34;} Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} . And here, the function is used in a list to create many players. . var players = [ // make a list, storing all the categories we had in the previous code segment. new Player(&quot;Manny Machado&quot;, &quot;Third Base&quot;, &quot;.299&quot;), new Player(&quot;Trent Grisham&quot;, &quot;Center Field&quot;, &quot;.185&quot;), new Player(&quot;Jake Cronenworth&quot;, &quot;Second Base&quot;, &quot;.238&quot;), new Player(&quot;Jurickson Profar&quot;, &quot;Left Field&quot;, &quot;.240&quot;), new Player(&quot;Ha-Seong Kim&quot;, &quot;Shortstop&quot;, &quot;.252&quot;), new Player(&quot;Brandon Drury&quot;, &quot;First Base&quot;, &quot;.226&quot;), new Player(&quot;Jorge Alfaro&quot;, &quot;Catcher&quot;, &quot;.249&quot;), new Player(&quot;Wil Myers&quot;, &quot;Right Field, First Base&quot;, &quot;.255&quot;), new Player(&quot;Juan Soto&quot;, &quot;Right Field&quot;, &quot;.242&quot;), new Player(&quot;Austin Nola&quot;, &quot;Catcher&quot;, &quot;.248&quot;), new Player(&quot;Josh Bell&quot;, &quot;Designated Hitter, First Base&quot;, &quot;.191&quot;), new Player(&quot;Jose Azocar&quot;, &quot;Outfield&quot;, &quot;.272&quot;), ]; function Padres(manager, players){ // new function in order to store the data manager.setRole(&quot;Manager&quot;); this.manager = manager; this.padres = [manager]; this.players = players; this.players.forEach(player =&gt; { player.setRole(&quot;Player&quot;); this.padres.push(player); }); this.json = []; this.padres.forEach(player =&gt; this.json.push(player.toJSON())); } sd2022 = new Padres(manager, players); // this is how we will display it. console.log(sd2022.padres); console.log(sd2022.padres[0].name); console.log(sd2022.json[0]); console.log(JSON.parse(sd2022.json[0])); . [ Player { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; }, Player { name: &#39;Manny Machado&#39;, position: &#39;Third Base&#39;, average: &#39;.299&#39;, role: &#39;Player&#39; }, Player { name: &#39;Trent Grisham&#39;, position: &#39;Center Field&#39;, average: &#39;.185&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jake Cronenworth&#39;, position: &#39;Second Base&#39;, average: &#39;.238&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jurickson Profar&#39;, position: &#39;Left Field&#39;, average: &#39;.240&#39;, role: &#39;Player&#39; }, Player { name: &#39;Ha-Seong Kim&#39;, position: &#39;Shortstop&#39;, average: &#39;.252&#39;, role: &#39;Player&#39; }, Player { name: &#39;Brandon Drury&#39;, position: &#39;First Base&#39;, average: &#39;.226&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jorge Alfaro&#39;, position: &#39;Catcher&#39;, average: &#39;.249&#39;, role: &#39;Player&#39; }, Player { name: &#39;Wil Myers&#39;, position: &#39;Right Field, First Base&#39;, average: &#39;.255&#39;, role: &#39;Player&#39; }, Player { name: &#39;Juan Soto&#39;, position: &#39;Right Field&#39;, average: &#39;.242&#39;, role: &#39;Player&#39; }, Player { name: &#39;Austin Nola&#39;, position: &#39;Catcher&#39;, average: &#39;.248&#39;, role: &#39;Player&#39; }, Player { name: &#39;Josh Bell&#39;, position: &#39;Designated Hitter, First Base&#39;, average: &#39;.191&#39;, role: &#39;Player&#39; }, Player { name: &#39;Jose Azocar&#39;, position: &#39;Outfield&#39;, average: &#39;.272&#39;, role: &#39;Player&#39; } ] Bob Melvin {&#34;name&#34;:&#34;Bob Melvin&#34;,&#34;position&#34;:&#34;Catcher&#34;,&#34;average&#34;:&#34;.233&#34;,&#34;role&#34;:&#34;Manager&#34;} { name: &#39;Bob Melvin&#39;, position: &#39;Catcher&#39;, average: &#39;.233&#39;, role: &#39;Manager&#39; } . And since this is written in JavaScript, we are fairly easily able to convert the data into JSON, and then into HTML. . Padres.prototype._toHtml = function() { // display data in a table var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // set up the table var body = &quot;&quot;; body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Position&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Batting Average&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // include the data in the table according to categories. for (var row of sd2022.padres) { body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.position + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.average + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;tr&gt;&quot;; } // html format return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; $$.html(sd2022._toHtml()); . NamePositionBatting AverageRole . Bob Melvin | Catcher | .233 | Manager | Manny Machado | Third Base | .299 | Player | Trent Grisham | Center Field | .185 | Player | Jake Cronenworth | Second Base | .238 | Player | Jurickson Profar | Left Field | .240 | Player | Ha-Seong Kim | Shortstop | .252 | Player | Brandon Drury | First Base | .226 | Player | Jorge Alfaro | Catcher | .249 | Player | Wil Myers | Right Field, First Base | .255 | Player | Juan Soto | Right Field | .242 | Player | Austin Nola | Catcher | .248 | Player | Josh Bell | Designated Hitter, First Base | .191 | Player | Jose Azocar | Outfield | .272 | Player | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Independent Work . A couple of assignments were given by the instructors. There is a &quot;Challenge&quot; and &quot;Homework/Hacks&quot;. . Challenge . We were asked to use the defined maximum and minimum values to print out the index value and actual value of every number that does not fit within those bounds. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value def condition_check(i): global min_valid global max_valid global data if i &lt; len(data): if (min_valid &lt;= data[i] &lt;= max_valid): condition_check(i + 1) else: print(&quot;At index value &quot; + str(i) + &quot;, the number&quot;, str(data[i]), &quot;does not satisfy the conditions.&quot;) condition_check(i + 1) condition_check(0) . At index value 2, the number 4 does not satisfy the conditions. At index value 4, the number 308 does not satisfy the conditions. At index value 6, the number 5 does not satisfy the conditions. At index value 9, the number 306 does not satisfy the conditions. . Homework/Hacks . Here is the album input program they wanted us to make. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] i = 0 #below used to collect a temporary input value, with a built-in invalid input handling system def get_input(): global i #i is always redefined to equal the length of the list that rsp is in reference to rsp = input() try: if (0 &lt; int(rsp) &lt;= i): #ensures the response is in a valid range returnval = int(rsp) return(returnval) else: print(&quot;Invalid response.&quot;) return &quot;Error&quot; except: #error handler if a non-integer is input print(&quot;Invalid response.&quot;) return &quot;Error&quot; print(&quot;Which album would you like to listen to?&quot;) #initial query for album, artist, year, songs in albums: #separating all parts of the data i += 1 print(str(i) + &#39;. &quot;&#39; + album + &#39;&quot; (&#39; + str(year) + &quot;) by &quot; + artist) choice = get_input() if choice == &quot;Error&quot;: #ends the process if an error has occurred pass else: chosenalbum = albums[int(choice) - 1][0] #redefining different parts of the list for clarity chosenartist = albums[int(choice) - 1][1] #(this wouldn&#39;t be necessary if it was a dictionary) chosenyear = albums[int(choice) - 1][2] chosensongs = albums[int(choice) - 1][3] i = len(chosensongs) print(&#39;You chose &quot;&#39; + chosenalbum + &#39;&quot; (&#39; + str(chosenyear) + &quot;) by &quot; + chosenartist + &quot;.&quot;) print(&quot;Which song would you like to listen to?&quot;) for number, song in chosensongs: print(str(number) + &quot;. &quot; + song) choice2 = get_input() if choice2 == &quot;Error&quot;: #ends the process if an error has occurred pass else: for number, song in chosensongs: if int(choice2) == number: print(&#39;Playing &quot;&#39; + song + &#39;&quot;...&#39;) pass . Which album would you like to listen to? 1. &#34;Welcome to my Nightmare&#34; (1975) by Alice Cooper 2. &#34;Bad Company&#34; (1974) by Bad Company 3. &#34;Nightflight&#34; (1981) by Budgie 4. &#34;More Mayhem&#34; (2011) by Imelda May You chose &#34;Bad Company&#34; (1974) by Bad Company. Which song would you like to listen to? 1. Can&#39;t Get Enough 2. Rock Steady 3. Ready for Love 4. Don&#39;t Let Me Down 5. Bad Company 6. The Way I Choose 7. Movin&#39; On 8. Seagull Playing &#34;Movin&#39; On&#34;... . &lt;/div&gt; . . . . .",
            "url": "https://drewreed2005.github.io/realdrew/sections1-2notes/",
            "relUrl": "/sections1-2notes/",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Sections 3-4 (Mathematical Epxpressions and Strings) Notes",
            "content": "3.3 Mathematical Expressions . Vocabulary: Fill in the Blanks . The symbol for exponent is ^ . The symbol for addition is + . The symbol for subtraction is - . The symbol for multiplication is * . The symbol for division is / . The symbol for modulus is % . An algorithm is a function with a set of rules that tells a program what to do. . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . Divide value1 by 10 (value1 = 5) | Multiply 2 from the result of the step 1 | Subtract 4 from the result of the step 2 | Print the result of step 3 | value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. . Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = [&quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot;] for number in numlist: if (int(number) % 3) == 0: print(number + &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a Python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(input): if 0 &lt;= input &lt;= 255: pass else: print(&quot;Invalid input.&quot;) return i = 7 binary = &quot;&quot; while i &gt;= 0: if input % (2**i) == input: binary += &quot;0&quot; i -= 1 else: binary += &quot;1&quot; input -= 2**i i -= 1 print(binary) convert(-3) convert(284) convert(189) . Invalid input. Invalid input. 10111101 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. . Concatenation is combining strings. . Length is the amount of characters in a string. . A substring is individual characters of a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice . Change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length. . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; print(string[0:5]) print(string[5:8]) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;computer&quot; string2 = &quot;science&quot; string3 = string1 + string2 print(string3) . computerscience . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names: print(name.capitalize() + &quot; is&quot;, str(len(name)), &quot;letters long.&quot;) length(names) . Jaden is 5 letters long. Max is 3 letters long. Dylan is 5 letters long. Orlando is 7 letters long. . My take on the frontend challenge .",
            "url": "https://drewreed2005.github.io/realdrew/sections3-4notes/",
            "relUrl": "/sections3-4notes/",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Trimester 2 Tools Verification",
            "content": "Javascript . Here&#39;s me using Javascript in a Markdown cell to make a button that displays &quot;Javascript works on my site, doubter.&quot; when pressed. I used the HTML &lt;script&gt; tag to do this. . Press for Proof . You haven&#39;t pressed the button yet... . Python . Below is a Python cell that picks which number is larger based on two inputs. . def getfirstnum(): print(&quot;Please input the first number.&quot;) try: global number1 number1 = float(input()) temp = number1 + 1 except: print(&quot;That&#39;s an invalid input. Please input an integer or a decimal.&quot;) getfirstnum() def getsecondnum(): print(&quot;Please input the second number.&quot;) try: global number2 number2 = float(input()) temp = number2 + 1 except: print(&quot;That&#39;s an invalid input. Please input an integer or a decimal.&quot;) getsecondnum() getfirstnum() getsecondnum() if (number1 - number2) &lt; 0: print(&quot;The second number, &quot; + str(number2) + &quot;, is greater.&quot;) elif (number1 - number2) &gt; 0: print(&quot;The first number, &quot; + str(number1) + &quot;, is greater.&quot;) else: print(&quot;The two numbers are equal to each other.&quot;) . Please input the first number. That&#39;s an invalid input. Please input an integer or a decimal. Please input the first number. Please input the second number. The second number, 2.3, is greater. . Local Server . Here&#39;s proof that my website is up and runnning through my local server (as of the publication of this post). . Look at the link! Bash Tool Confirmation . Below, I use shell scripts to prove I have all of my stuff downloaded. . Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Anaconda Check . conda list . # packages in environment at /Users/mister_dew/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 alembic 1.8.1 pypi_0 pypi anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 aniso8601 9.0.1 pypi_0 pypi anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 flask-login 0.6.2 pypi_0 pypi flask-migrate 3.1.0 pypi_0 pypi flask-restful 0.3.9 pypi_0 pypi flask-sqlalchemy 2.5.1 pypi_0 pypi fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 javascript 1!1.0.0 pypi_0 pypi jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyboard 0.13.5 pypi_0 pypi keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 mako 1.2.2 pypi_0 pypi markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 playsound 1.3.0 pypi_0 pypi plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygame 2.1.2 pypi_0 pypi pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pynput 1.7.6 pypi_0 pypi pyobjc 8.5.1 pypi_0 pypi pyobjc-core 8.5.1 pypi_0 pypi pyobjc-framework-accounts 8.5.1 pypi_0 pypi pyobjc-framework-addressbook 8.5.1 pypi_0 pypi pyobjc-framework-adsupport 8.5.1 pypi_0 pypi pyobjc-framework-applescriptkit 8.5.1 pypi_0 pypi pyobjc-framework-applescriptobjc 8.5.1 pypi_0 pypi pyobjc-framework-applicationservices 8.5.1 pypi_0 pypi pyobjc-framework-audiovideobridging 8.5.1 pypi_0 pypi pyobjc-framework-authenticationservices 8.5.1 pypi_0 pypi pyobjc-framework-automaticassessmentconfiguration 8.5.1 pypi_0 pypi pyobjc-framework-automator 8.5.1 pypi_0 pypi pyobjc-framework-avfoundation 8.5.1 pypi_0 pypi pyobjc-framework-avkit 8.5.1 pypi_0 pypi pyobjc-framework-businesschat 8.5.1 pypi_0 pypi pyobjc-framework-calendarstore 8.5.1 pypi_0 pypi pyobjc-framework-cfnetwork 8.5.1 pypi_0 pypi pyobjc-framework-cloudkit 8.5.1 pypi_0 pypi pyobjc-framework-cocoa 8.5.1 pypi_0 pypi pyobjc-framework-collaboration 8.5.1 pypi_0 pypi pyobjc-framework-colorsync 8.5.1 pypi_0 pypi pyobjc-framework-contacts 8.5.1 pypi_0 pypi pyobjc-framework-contactsui 8.5.1 pypi_0 pypi pyobjc-framework-coreaudio 8.5.1 pypi_0 pypi pyobjc-framework-coreaudiokit 8.5.1 pypi_0 pypi pyobjc-framework-corebluetooth 8.5.1 pypi_0 pypi pyobjc-framework-coredata 8.5.1 pypi_0 pypi pyobjc-framework-corehaptics 8.5.1 pypi_0 pypi pyobjc-framework-corelocation 8.5.1 pypi_0 pypi pyobjc-framework-coremedia 8.5.1 pypi_0 pypi pyobjc-framework-coremediaio 8.5.1 pypi_0 pypi pyobjc-framework-coremidi 8.5.1 pypi_0 pypi pyobjc-framework-coreml 8.5.1 pypi_0 pypi pyobjc-framework-coremotion 8.5.1 pypi_0 pypi pyobjc-framework-coreservices 8.5.1 pypi_0 pypi pyobjc-framework-corespotlight 8.5.1 pypi_0 pypi pyobjc-framework-coretext 8.5.1 pypi_0 pypi pyobjc-framework-corewlan 8.5.1 pypi_0 pypi pyobjc-framework-cryptotokenkit 8.5.1 pypi_0 pypi pyobjc-framework-devicecheck 8.5.1 pypi_0 pypi pyobjc-framework-dictionaryservices 8.5.1 pypi_0 pypi pyobjc-framework-discrecording 8.5.1 pypi_0 pypi pyobjc-framework-discrecordingui 8.5.1 pypi_0 pypi pyobjc-framework-diskarbitration 8.5.1 pypi_0 pypi pyobjc-framework-dvdplayback 8.5.1 pypi_0 pypi pyobjc-framework-eventkit 8.5.1 pypi_0 pypi pyobjc-framework-exceptionhandling 8.5.1 pypi_0 pypi pyobjc-framework-executionpolicy 8.5.1 pypi_0 pypi pyobjc-framework-externalaccessory 8.5.1 pypi_0 pypi pyobjc-framework-fileprovider 8.5.1 pypi_0 pypi pyobjc-framework-fileproviderui 8.5.1 pypi_0 pypi pyobjc-framework-findersync 8.5.1 pypi_0 pypi pyobjc-framework-fsevents 8.5.1 pypi_0 pypi pyobjc-framework-gamecenter 8.5.1 pypi_0 pypi pyobjc-framework-gamecontroller 8.5.1 pypi_0 pypi pyobjc-framework-gamekit 8.5.1 pypi_0 pypi pyobjc-framework-gameplaykit 8.5.1 pypi_0 pypi pyobjc-framework-imagecapturecore 8.5.1 pypi_0 pypi pyobjc-framework-imserviceplugin 8.5.1 pypi_0 pypi pyobjc-framework-inputmethodkit 8.5.1 pypi_0 pypi pyobjc-framework-installerplugins 8.5.1 pypi_0 pypi pyobjc-framework-instantmessage 8.5.1 pypi_0 pypi pyobjc-framework-intents 8.5.1 pypi_0 pypi pyobjc-framework-iosurface 8.5.1 pypi_0 pypi pyobjc-framework-ituneslibrary 8.5.1 pypi_0 pypi pyobjc-framework-latentsemanticmapping 8.5.1 pypi_0 pypi pyobjc-framework-launchservices 8.5.1 pypi_0 pypi pyobjc-framework-libdispatch 8.5.1 pypi_0 pypi pyobjc-framework-linkpresentation 8.5.1 pypi_0 pypi pyobjc-framework-localauthentication 8.5.1 pypi_0 pypi pyobjc-framework-mapkit 8.5.1 pypi_0 pypi pyobjc-framework-mediaaccessibility 8.5.1 pypi_0 pypi pyobjc-framework-medialibrary 8.5.1 pypi_0 pypi pyobjc-framework-mediaplayer 8.5.1 pypi_0 pypi pyobjc-framework-mediatoolbox 8.5.1 pypi_0 pypi pyobjc-framework-metal 8.5.1 pypi_0 pypi pyobjc-framework-metalkit 8.5.1 pypi_0 pypi pyobjc-framework-metalperformanceshaders 8.5.1 pypi_0 pypi pyobjc-framework-modelio 8.5.1 pypi_0 pypi pyobjc-framework-multipeerconnectivity 8.5.1 pypi_0 pypi pyobjc-framework-naturallanguage 8.5.1 pypi_0 pypi pyobjc-framework-netfs 8.5.1 pypi_0 pypi pyobjc-framework-network 8.5.1 pypi_0 pypi pyobjc-framework-networkextension 8.5.1 pypi_0 pypi pyobjc-framework-notificationcenter 8.5.1 pypi_0 pypi pyobjc-framework-opendirectory 8.5.1 pypi_0 pypi pyobjc-framework-osakit 8.5.1 pypi_0 pypi pyobjc-framework-oslog 8.5.1 pypi_0 pypi pyobjc-framework-pencilkit 8.5.1 pypi_0 pypi pyobjc-framework-photos 8.5.1 pypi_0 pypi pyobjc-framework-photosui 8.5.1 pypi_0 pypi pyobjc-framework-preferencepanes 8.5.1 pypi_0 pypi pyobjc-framework-pushkit 8.5.1 pypi_0 pypi pyobjc-framework-quartz 8.5.1 pypi_0 pypi pyobjc-framework-quicklookthumbnailing 8.5.1 pypi_0 pypi pyobjc-framework-safariservices 8.5.1 pypi_0 pypi pyobjc-framework-scenekit 8.5.1 pypi_0 pypi pyobjc-framework-screensaver 8.5.1 pypi_0 pypi pyobjc-framework-scriptingbridge 8.5.1 pypi_0 pypi pyobjc-framework-searchkit 8.5.1 pypi_0 pypi pyobjc-framework-security 8.5.1 pypi_0 pypi pyobjc-framework-securityfoundation 8.5.1 pypi_0 pypi pyobjc-framework-securityinterface 8.5.1 pypi_0 pypi pyobjc-framework-servicemanagement 8.5.1 pypi_0 pypi pyobjc-framework-social 8.5.1 pypi_0 pypi pyobjc-framework-soundanalysis 8.5.1 pypi_0 pypi pyobjc-framework-speech 8.5.1 pypi_0 pypi pyobjc-framework-spritekit 8.5.1 pypi_0 pypi pyobjc-framework-storekit 8.5.1 pypi_0 pypi pyobjc-framework-syncservices 8.5.1 pypi_0 pypi pyobjc-framework-systemconfiguration 8.5.1 pypi_0 pypi pyobjc-framework-systemextensions 8.5.1 pypi_0 pypi pyobjc-framework-usernotifications 8.5.1 pypi_0 pypi pyobjc-framework-videosubscriberaccount 8.5.1 pypi_0 pypi pyobjc-framework-videotoolbox 8.5.1 pypi_0 pypi pyobjc-framework-vision 8.5.1 pypi_0 pypi pyobjc-framework-webkit 8.5.1 pypi_0 pypi pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python-vlc 3.0.16120 pypi_0 pypi python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/mister_dew/Library/Jupyter/kernels/bash javascript /Users/mister_dew/Library/Jupyter/kernels/javascript python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://drewreed2005.github.io/realdrew/tools2/",
            "relUrl": "/tools2/",
            "date": " • Nov 16, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "College Board Final Reflection",
            "content": "Overview and My Score . In this post, I will discuss all of the questions in this quiz that gave me any amount of trouble, sectioned off by either question number of subject matter. . I scored 50/50 I ended up scoring 50/50 on the final. It was pretty easy for the most part. Below, I go over where it was and wasn’t. . Questions 1-18 . These questions were all reviews from the quizzes we already took. Questions 1 through 15 were all from Big Idea 1 concepts, which were all very simple and familiar due to prior studying. Some (such as Questions 2 and 8) were ones I had previously gotten wrong, so I was pretty clear on which answers were correct and why. . (Question 8 is still a bad question, though, because it isn’t stated that list indexes start at 1 in this imaginary code language.) . Binary . Binary isn’t really something we’ve covered in this class so far, and yet it showed up somewhat prominently in this final. Question 19, the first of multiple binary-based questions, forced me to take a quick minute to go learn how to count in binary. . I felt like I should probably learn how to count in binary To clarify, going in, I understood the concept of bits and how different numbers of bits limit you to a certain number of variations. For example, I knew that 4 bits of binary had a maximum of 16 possible variations (0 through 15), because that’s just simple math: 24 = 8. That let me figure out the answer to this question pretty easily. However, I didn’t know exactly how one would count in binary. . After looking it up, I quickly figured out the pattern: . 0000 = 0, 0001 = 1, 0010 = 2, 0011 = 3, 0100 = 4, 0101 = 5, 0110 = 6, 0111 = 7, 1000 = 8, 1001 = 9, 1010 = 10, 1011 = 11, 1100 = 12, 1101 = 13, 1110 = 14, 1111 = 15. And you could continue this pattern with binary that has more than 4 bits if you wanted. Put one all the way to the right, move it to the left, add a new one on the right, and now that the ones are crowded up,put a 1 to the left of the leftmost 1 and make everything to the right of it 0. . I’m glad I figured this out for the questions that came after. Though Q20 used essentially the same knowledge as Q19 and Q21 was just part of knowing what binary is used for (everything), Question 22 would put that knowledge to the test. . ...and learning to count in binary was a fine use of time I was pretty quickly able to rule out A (3 is 0011) and D (15 is 1111). I thought about what 6 was in binary (since it was closest to 3) and came upon 0110, option B. The only one missing was option C, 9. . After a quick run through Q23 (which tested common sense), knowledge of binary once again showed its use. . Some more binary application In this case, I had to figure out precisely what the binary represented, unlike the previous where I only had to use process of elimination. I was able to figure it out pretty easily. . Questions 25-27 . These questions asked for the proper variable type for various specific things. It was very easy to tell what the correct response is: you wouldn’t make age a string or isOpen a list (assuming they mean exactly what they sound like they mean). . Smorgasbord (and Data Abstraction) . After Q28, which was pretty much a basic algebra problem, I had a bit of confusion. . It couldn&#39;t be D...right? Question 29 was the first question that really made me second-guess myself. I don’t see a world where I picked anything but A, but I did have to look for a second at D. Even though it’s true that lists do allow you to hold as much data as necessary (and keep it all in one place for organization), you technically could store user input in one list for the exact same reason. Answer A was obviously better, but still. . Q30 talked about procedurally applying a function to each value of a list,Q31 talked about indexes, and Q32 brought in a new type of common question… . Mind-Numbing “This is This Now” Questions . There are problems that define a few variables, then decide “this variable is equal to this variables” and so on. About every other question until the end of the test is one of these, and, though I’d be happy to explain my answer when prompted, there is no way I’m going over them; they’re incredibly self-explanatory. . The Remaining Questions . Many of the questions that weren’t “this is this now” questions asked to provide a function to do a certain task. Q35 actually included multiple functions that would result in the same outcome in different ways through different means. . Q39 was a random index question and Q40 &amp; Q45 was an output question, all very easy and self-explanatory. Q43 and Q44 were both math questions. The last two, Q49 and Q50, were both asking you to make something happen given two procedures, and these questions were both simple. . Takeaways . I learned about binary. I learned that College Board’s goofy language usually ues 1-based indexes. But most of all, I learned about the value of collaboration. .",
            "url": "https://drewreed2005.github.io/realdrew/cbfinalreflection",
            "relUrl": "/cbfinalreflection",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Week-by-Week Trimester 1 Reflection",
            "content": "Overview . In this post, I show what I’ve learned over the course of this trimester by redirecting to some old posts and clarifying what I learned in them with hindsight. . Week 0 . Week 0 was the setup week. I ended up having to be regraded because there was a problem with my Fastpages that nobody understood, but eventually, after making a new one, everything ended up working perfectly. . In this post, I prove that I have installed all of the expected things. There isn’t much else to say about this week aside from that it set up for the rest of them. . Week 1 . Week 1 was possibly the one I spent the most time coding during, just because I was so fascinated by all of the possibilities. I blogged my progress every single day as I explored modules (particularly random, I found it fascinating), quizzes, lists, indexes and different types of values (strings, integers, and even floats). . I was still shaky on understanding how to translate a code program to a website. Jupyter notebooks didn’t let me interact with my code like I could in VSCode, which frustrated me. To see everything I got up to during that week, check out this review ticket. . Week 2 . Week 2 was what really challenged be to code effectively and somewhat more professionally in this class. Data Abstraction is one of the concepts I’m strongest at (I think) right now, but back then, I was applying what I understood and throwing out there whatever else I manage to accomplish. . I think “The Survey” shows both my personal application of what I was learning and my lack of knowledge about iteration. My Lists and Dictionaries Notes do involve some amount of iteration and recognizing the differences between strings, integers, lists, etc., but I still did not know how customizable loops could be. . The table I made in my review ticket was the first little bit of CSS and HTML I would try. . Week 3 . This week’s main focus was the AppLab quiz, which was my first real experience with Javascript (or at least something very similar). I also covered the Create Task criteria in my blog about the quiz. . Week 4 . Week 4’s main focus was on the Python/Flask server, which primarily tested my patience as many problems with Python environments got in the way. The fruit of this work can be see in my video. . This was also the first week of College Board lessons. My notes on Collaboration can be found here. . Week 5 . This was my first actual introduction to Javascript, which I struggled to understand because the introductory content was kind of complex. Here are my attempts at understanding it. . This week was also the beginning of The Watchers and of my role as the Scrum Master. . Week 6 . Deployment was largely a process taken up by the Watchers’ DevOps Trent Cardall, so I was only partially involved in that process. . In regards to College Board, this week, I took notes on Program Design and reviewed my results on the College Board quizzes. . In line with Program Design, I helped to make this planning post for our group’s project “The Work Watch”. I made most of the UML diagram. . Week 7 . This week was all about APIs, with a little focus on Correcting Errors (which I took notes on here by applying what was covered in the lesson). APIs would go on to be used in our final project. . My first efforts at understanding APIs are found in this post. . Week 8 . We continued to cover APIs during this week, which I did not blog about (as I mostly focused on the API from the previous week). . I also took notes on the Internet lesson on College Board, which was a pretty difficult and comprehensive set of information. I also discussed my score on the Internet College Board MC quiz. . Week 9 . This week was all about coding our final project and making our own API. Devon was gone, but as the Scrum Master, I took up making the backend part of our program. You can find our Alarm API here. . This was a giant coding week. I coded a large portion of the frontend for our program The Work Watch. The finished program can be found here. . Week 10 . This week was dedicated to making finishing touches. We connected our Alarm API to the Work Watch, created The Watchers Fastpages, and worked together on The Work Watch Review Ticket. . Week 11 . This week! I finished my Night at the Museum blog and created this review of all my progress. After taking the final, I went over the challenging questions here. .",
            "url": "https://drewreed2005.github.io/realdrew/tri1review",
            "relUrl": "/tri1review",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Night at the Museum Blog",
            "content": "Introduction . Night at the Museum is a showcase of the progress and output of various CTE elective/fine arts classes. We were asked to go tonight and blog what we see. Below, I go class-by-class and discuss what I saw, what I enjoyed, and what impressed me most. . Earlier Periods . I came at 6PM to make sure I’d be able to see plenty of programs. I wasn’t able to take many pictures because of camera roll restrictions, but I managed to clear a lot of it by the time 7PM rolled around. . A group that made not just a working abacus, but a competitive math competition program that use can use the abacus with. The frontend and theming was very stylish. | A K-pop-themed website with lots of cool features and a stylish composition. The search feature was a nice touch. | A stats and calculus utility website that has a lot of practical use. It’s not just a calculator: it has mean/median/range calculators, a working Desmos API, a response bias test, and a scientific and derivative calculator. I kind of wish I had the link to this site to use it myself. | Science Olympiad hub with cool signup feature. They didn’t seem very confident in it, but I think it had a lot of potential given enough time to polish it. | Luke Angelini’s group in Mr. Yeoung’s class created the “Practice Nexus” for SAT practice. This was another practically useful program that I’d love to use again. | . Our Period . Around the time I presented, I had a chance to look very briefly at the projects of some other people in my class. Here are some pictures of them my group collected with captions. . The Crime Busters taught me how to avoid being robbed Codehoots was looking very stylish Our whole group thought this was a cool use of API This one reminded me of the calc/stats calculator I saw early on, about as functional with better UI (in my opinion) It was hard to get to everyone because it was very crowded, but overall, the output was pretty impressive. We kept saying things like “What if we had done __ instead?” or “I kind of which we had done something like that…” . Presenting to Others . It was great to receive feedback from people at the event. We presented our program to about 10 people total, including some friends we anticipated coming to the event. . Liav found our program &quot;exquisitely intriguing&quot; (his words) A flattering angle of my face with some previous spectators in the background User interaction (AJ Ruiz) Most of the feedback we received was about limiting the tasklist. We discussed it and realized that we really only restricted it at first because of a previous idea of concatenating new input windows onto the task menu before starting, which would have looked kind of cool. After this failed, we introduced the task box, but we didn’t have to limit the amount of tasks you could submit like we did with the previous idea. In hindsight, we either shouldn’t have limited it or should have allowed the user to input more than five tasks. . Miscellaneous . Trent showed us some cool stuff he saw in the ceramics class. . Top-left project will be the model for our &quot;PAPER AIRPLANE SIMULATOR&quot; (actually probably not) And here is a semi-tasteful FNAF reference I found in the 3D Animation room. . HAR, HAR, HAR-HAR, HAR...HAR HAR-HAR HAR-HAR",
            "url": "https://drewreed2005.github.io/realdrew/natmblog",
            "relUrl": "/natmblog",
            "date": " • Nov 3, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Work Watch Beta",
            "content": "Work Watch . The Work Watch is an interactive, customizable stopwatch program which helps you organize your work sessions. Modify break, notification, and task settings with their respective menus.We recommend taking 10-minute breaks every 30 minutes (unless your work session is too short or constrained). We also suggest hiding the timer so that your session&#39;s duration doesn&#39;t distract you, but still receive time notifications every 20 minutes keep yourself on track. A maximum of five tasks can be added to the list. Click the &quot;Complete Task&quot; button when one is finished. The timer will automatically reset when all tasks have been completed and display a reflection on your work session . Please wait... . Breaks&emsp; Notifications&emsp;Tasks . . Break Info Break interval: minutesBreak duration: minutes . Notification Info Notification interval: minutes . Task InfoTask Name: Task Duration: minutesAdd Task to Tasklist . . Start Stop Reset Task Complete . . .",
            "url": "https://drewreed2005.github.io/realdrew/workwatchbeta",
            "relUrl": "/workwatchbeta",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Work Watch Frontend",
            "content": "Millisecond-based timer. . let output = document.getElementById(&#39;stopwatch&#39;); let ms = 0; let sec = 0; let min = 0; let running = 0; function timer() { ms++; if(ms &gt;= 100){ sec++ ms = 0 } if(sec === 60){ min++ sec = 0 } if(min === 60){ ms, sec, min = 0; } //Doing some string interpolation let milli = ms &lt; 10 ? `0`+ ms : ms; let seconds = sec &lt; 10 ? `0`+ sec : sec; let minute = min &lt; 10 ? `0` + min : min; let timer= `${minute}:${seconds}:${milli}`; output.innerHTML =timer; }; //Start timer function start(){ if (running == 0){ time = setInterval(timer,10) running = 1 } } //stop timer function stop(){ running = 0 clearInterval(time) } //reset timer function reset(){ running = 0 ms = 0; sec = 0; min = 0; output.innerHTML = `00:00:00` } const startBtn = document.getElementById(&#39;startBtn&#39;); const stopBtn = document.getElementById(&#39;stopBtn&#39;); const resetBtn = document.getElementById(&#39;resetBtn&#39;); startBtn.onclick = function() { start() }; stopBtn.onclick = function() { stop() }; resetBtn.onclick = function() { reset() }; . Second-based timer (with hour count). . let output = document.getElementById(&#39;stopwatch&#39;); let constant = 0; let sec = 0; let min = 0; let hr = 0; let running = 0; function timer() { constant++; sec++; if(sec === 60){ min++ sec = 0 } if(min === 60){ hr++ min = 0 } //Doing some string interpolation let seconds = sec &lt; 10 ? `0`+ sec : sec; let minute = min &lt; 10 ? `0` + min : min; let hour = hr &lt; 10 ? `0` + hr : hr; let timer= `${hour}:${minute}:${seconds}`; output.innerHTML =timer; } //Start timer function start(){ if (running == 0){ time = setInterval(timer,1000) running = 1 } } //stop timer function stop(){ running = 0 clearInterval(timer) } //reset timer function reset(){ running = 0; sec = 0; min = 0; hr = 0; output.innerHTML = `00:00:00` } const startBtn = document.getElementById(&#39;startBtn&#39;); const stopBtn = document.getElementById(&#39;stopBtn&#39;); const resetBtn = document.getElementById(&#39;resetBtn&#39;); startBtn.onclick = function() { start() }; stopBtn.onclick = function() { stop() }; resetBtn.onclick = function() { reset() }; . Here is the current HTML. . &lt;h3&gt;Work Watch&lt;/h3&gt; &lt;h4&gt;&lt;button id=&quot;break&quot;&gt;Breaks&lt;/button&gt;&amp;emsp; &lt;button id=&quot;notif&quot;&gt;Notifications&lt;/button&gt;&amp;emsp;&lt;button id=&quot;task&quot;&gt;Tasks&lt;/button&gt;&lt;/h4&gt; &lt;br&gt; &lt;h5 id=&quot;breakinput&quot; style=&quot;transform:translate(+235px, -60px)&quot;&gt;&lt;label&gt;Break Info&lt;br&gt;&lt;/label&gt; &lt;br&gt;Break interval: &lt;input id=&quot;bintvinput&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;1&quot; minlength=&quot;1&quot; max=&quot;999&quot; value=&quot;30&quot;&gt;&lt;/input&gt;&amp;nbspminutes&lt;br&gt;&lt;br&gt;Break duration: &lt;input id=&quot;bdurinput&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;1&quot; minlength=&quot;1&quot; max=&quot;999&quot; value=&quot;10&quot;&gt;&amp;nbspminutes&lt;/h5&gt; &lt;h5 id=&quot;notifinput&quot; style=&quot;transform:translate(450px, -60px);width:28%&quot;&gt;&lt;label&gt;Notification Info&lt;br&gt;&lt;/label&gt; &lt;br&gt;Notification interval: &lt;input id=&quot;nintvinput&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;1&quot; minlength=&quot;1&quot; max=&quot;999&quot; value=&quot;20&quot;&gt;&lt;/input&gt;&amp;nbspminutes&lt;/h5&gt; &lt;h5 id=&quot;taskinput&quot; style=&quot;transform:translate(+700px, -60px);width:23%&quot;&gt;&lt;label&gt;Task Info&lt;br&gt;&lt;/label&gt;&lt;br&gt;Task Name: &lt;input id=&quot;tnameinput0&quot; style=&quot;text-align:left&quot; type=&quot;text&quot; minlength=&quot;1&quot; value=&quot;My Task&quot;&gt;&lt;/input&gt;&lt;br&gt;Task Duration: &lt;input id=&quot;tdurinput0&quot; style=&quot;text-align:left&quot; type=&quot;number&quot; min=&quot;1&quot; minlength=&quot;1&quot; max=&quot;999&quot; value=&quot;45&quot;&gt;&amp;nbspminutes&lt;br&gt;&lt;button id=&quot;newtask&quot; class=&quot;newtask&quot;&gt;Add Task to Tasklist&lt;/button&gt;&lt;/h5&gt; &lt;p&gt;&lt;button id=&quot;hide&quot; class=&quot;hide&quot;&gt; &lt;!--HIDE BUTTON HERE--&gt; &lt;/button&gt;&lt;/p&gt; &lt;div class=&quot;stopwatch&quot; id=&quot;stopwatch&quot; style=&quot;font-size:32px&quot;&gt; &lt;!-- STOPWATCH HERE --&gt; &lt;/div&gt; &lt;button class=&quot;btn-start&quot; id=&quot;startBtn&quot;&gt;Start&lt;/button&gt; &lt;button class=&quot;btn-stop&quot; id=&quot;stopBtn&quot;&gt;Stop&lt;/button&gt; &lt;button class=&quot;btn-reset&quot; id=&quot;resetBtn&quot;&gt;Reset&lt;/button&gt; &lt;br&gt;&lt;button class=&quot;taskcomplete&quot; id=&quot;taskcomplete&quot;&gt;Task Complete&lt;/button&gt; &lt;h4 class=&quot;notifbox&quot; id=&quot;notifbox&quot;&gt; &lt;!--NOTIF BOX HERE--&gt; &lt;/h4&gt;&lt;br&gt; &lt;h4 class=&quot;taskbox&quot; id=&quot;taskbox&quot;&gt; &lt;!--TASK BOX HERE--&gt; &lt;/h4&gt; . Here is the current CSS style settings. . body { color: #FFFFFF; background: #000000; text-align: center; font-family: &#39;OCR A Std&#39;, monospace; } #break { margin: 40px 50px; text-align: center; color: #DAD6D6; background: #9550B2; border:solid 1px #C97CEA; border-radius:5px; padding:10px 20px 10px; letter-spacing: 1px; cursor:pointer; } #notif { margin: 40px 50px; text-align: center; color: #DAD6D6; background: #DD6400; border:solid 1px #FABF7A; border-radius:5px; padding:10px 20px 10px; letter-spacing: 1px; cursor:pointer; } #task { margin: 40px 50px; text-align: center; color: #DAD6D6; background: #10ACAC; border:solid 1px #7AF2F2; border-radius:5px; padding:10px 20px 10px; letter-spacing: 1px; cursor:pointer; } #newtask { margin:10px; font-family: &#39;Arial&#39;; background: #E5E5E5; font-size: 15px; } #hide { margin: 1px; text-align: center; color: #DAD6D6; background: #000000; border:solid 1px #FFFFFF; border-radius:5px; padding:10px 20px 10px; letter-spacing: 1px; cursor:pointer; } #startBtn { margin: 30px 0px 0px 0px; text-align: center; color: #DAD6D6; background: #008000; border:solid px #35492C; border-radius:5px; padding:16px 40px 16px; letter-spacing: 2px; cursor:pointer; } #stopBtn { margin: 0px; text-align: center; color: #DAD6D6; background: #B22222; border:solid px #590F20; border-radius:5px; padding:16px 40px 16px; letter-spacing: 2px; cursor:pointer; } #resetBtn { margin: 0px; text-align: center; color: #000000; background: #F0FFFF; border:solid px #3E383F; border-radius:5px; padding:16px 35px 17px; letter-spacing: 2px; cursor:pointer; } #taskcomplete { margin: 10px; text-align: center; color: #000000; background: #F7FD44; border:solid px #3E383F; border-radius:5px; padding:16px 35px 17px; letter-spacing: 2px; cursor:pointer; } h2 { font-size: 50px; letter-spacing: 2px; margin: 150px 0 0 ; } h3 { font-size: 40px; letter-spacing: 5px; margin: 30px; background: #444444; border:solid 5px #444444; border-radius:50px; padding:16px 40px 16px; letter-spacing: 2px; } h4 { font-size: 15px; letter-spacing: 1px; margin: 1px; background: #000000; border:solid 2px #444444; border-radius: 100px; padding:1px 1px 1px; letter-spacing: 2px; text-align: center; width: 50%; transform: translate(+47.5%); } h5 { margin: 10px; font-size: 16px; color: #000001; border: solid 2px #7C7C7C; padding: 5px 5px 5px; background: #FFFFFF; width: 25%; border-radius: 5px; justify-content: center; position: absolute; display: none; } #stopwatch { margin: 10px; font-size: 32px; color: #FFFFFF; background: #7C7C7C; width: 13%; border-radius: 5px; justify-content: center; transform: translate(+325%, +36%); } . Current JS. . let output = document.getElementById(&#39;stopwatch&#39;); let constant = 0; //Below are timer run var let ms = 0; let sec = 0; let min = 0; let hr = 0; let running = 0; let notifbox = document.getElementById(&#39;notifbox&#39;); let notiftext = &quot;This will be a timer notification.&quot;; let breaktext = &quot;This will be a break notification.&quot;; let tasktext = &quot;This will be a task notification.&quot;; let bintvinp = document.getElementById(&#39;bintvinput&#39;); let bdurinp = document.getElementById(&#39;bdurinput&#39;); let nintvinp = document.getElementById(&#39;nintvinput&#39;); let notifintv = 20; let breakintv = 30; let breaktrig = (breakintv * 6000) let breakend = (breakintv + 1) * 6000; let breakdur = 10; var temptasktext = &quot;&quot;; var taskbox = document.getElementById(&#39;taskbox&#39;); taskbox.innerHTML = &quot;&lt;br&gt;Your tasks will be displayed here.&lt;br&gt;&lt;br&gt;&quot; var taskname = &quot;My Task&quot;; var taskdur = 45; var tasknlist = []; var taskdlist = []; var currenttask = 0; var taskend = 0; var taskearly = []; var taskovertime = []; notifbox.innerHTML = &quot;&lt;br&gt;&quot; + breaktext + &quot;&lt;br&gt;&lt;br&gt;&quot; + notiftext + &quot;&lt;br&gt;&lt;br&gt;&quot; + tasktext + &quot;&lt;br&gt;&lt;br&gt;&quot;; reflection = &quot;&quot;; function update_notifbox() { notifbox.innerHTML = &quot;&lt;br&gt;&quot; + breaktext + &quot;&lt;br&gt;&lt;br&gt;&quot; + notiftext + &quot;&lt;br&gt;&lt;br&gt;&quot; + tasktext + &quot;&lt;br&gt;&lt;br&gt;&quot; } function singularity_check() { if (hr != 1){ hrtext = &quot; hours&quot;; } else { hrtext = &quot; hour&quot;; } if (min != 1){ mintext = &quot; minutes&quot;; } else { mintext = &quot; minute&quot;; }; if (sec != 1){ sectext = &#39; seconds&#39;; } else { sectext = &#39; second&#39;; }; }; function timer() { constant++; ms++; if(ms &gt;= 100){ sec++ ms = 0 } if(sec === 60){ min++ sec = 0 } if(min === 60){ hr++ min = 0 } if(constant % (notifintv * 6000) == 0) { singularity_check() if(hr != 0) { notiftext = &quot;The timer has been running for &quot; + hr + hrtext + &quot; and &quot; + min + mintext + &quot;.&quot;; } else { notiftext = &quot;The timer has been running for &quot; + min + mintext + &quot;.&quot;; }; update_notifbox(); }; if(constant == breaktrig) { breaktext = &quot;It&#39;s break time! Please take a &quot; + breakdur + &quot;-minute break.&quot;; breakend = (breakdur * 6000) + constant; breaktrig = (constant + (6000 * (breakdur + breakintv))) console.log(constant, breakend, breakintv) update_notifbox(); }; if(constant == breakend) { breaktext = &quot;Break time&#39;s over. Get back to work!&quot;; update_notifbox(); }; if(constant == taskend &amp;&amp; taskend != 0) { tasktext = &#39;You anticipated that &quot;&#39; + tasknlist[currenttask] + &#39;&quot; would be completed by now.&#39;; taskovertime.push(tasknlist[currenttask]); }; //Doing some string interpolation let seconds = sec &lt; 10 ? `0`+ sec : sec; let minute = min &lt; 10 ? `0` + min : min; let hour = hr &lt; 10 ? `0` + hr : hr; let time = `${hour}:${minute}:${seconds}`; output.innerHTML =time; } function readtime(){ singularity_check() if(hr == 0 &amp;&amp; min == 0) { timetext = sec + sectext; return; } else if(hr == 0) { timetext = min + mintext + &quot; and &quot; + sec + sectext; } else { timetext = hr + hrtext + &quot;, &quot; + min + mintext + &quot; and &quot; + sec + sectext; } } //Start timer function start(){ if (running == 0){ breaktext = &quot;This will be a break notification.&quot; notiftext = &quot;This will be a timer notification.&quot; tasktext = &quot;This will be a task notification.&quot; update_notifbox() try { taskend = (taskdlist[0] * 6000); } catch(err) { }; if(Math.round(Number(bintvinp.value)) &gt; 0) { breakintv = Math.round(Number(bintvinp.value)) } else { breaktext = &quot;Input a break interval as an integer greater than zero.&quot; update_notifbox() return }; if(Math.round(Number(bdurinp.value)) &gt; 0) { breakdur = Math.round(Number(bdurinp.value)) } else { breaktext = &quot;Input a break duration as an integer greater than zero.&quot; update_notifbox() return }; if(Math.round(Number(nintvinp.value)) &gt; 0) { notifintv = Math.round(Number(nintvinp.value)) } else { notiftext = &quot;Input a notification interval as an integer greater than zero.&quot; update_notifbox() return } time = setInterval(timer,10) running = 1 } } //stop timer function stop(){ running = 0; try { clearInterval(time); } catch(err) { return; }; }; //reset timer function reset(){ stop(); running = 0; constant = 0; sec = 0; min = 0; hr = 0; output.innerHTML = `00:00:00` let notiftext = &quot;This will be a timer notification.&quot;; let breaktext = &quot;This will be a break notification.&quot;; let tasktext = &quot;This will be a task notification.&quot;; update_notifbox(); tasknlist = []; taskdlist = []; currenttask = 0; console.log(tasknlist, taskdlist) taskbox.innerHTML = &quot;&lt;br&gt;Your tasks will be displayed here.&lt;br&gt;&lt;br&gt;&quot;; newtaskBtn.style.background = &quot;#E5E5E5&quot;; newtaskBtn.innerHTML = &quot;Add Task to Tasklist&quot;; }; function taskreflect() { earlytasks = &quot;Early Tasks: &quot;; for(let i = 0; i &lt; taskearly.length; i++) { if(taskearly.length == 1) { earlytasks = earlytasks + taskearly[i]; } else { earlytasks = earlytasks + taskearly[i] if((i + 1) &lt; taskearly.length){ earlytasks = earlytasks + &quot;, &quot; }; }; }; latetasks = &quot;Late Tasks: &quot;; for(let i = 0; i &lt; taskovertime.length; i++) { if(taskovertime.length == 1) { latetasks = latetasks + taskovertime[i]; } else { latetasks = latetasks + taskovertime[i] if((i + 1) &lt; taskovertime.length){ latetasks = latetasks + &quot;, &quot; }; }; }; }; function taskcomplete() { if(running == 0){ return; }; if(constant &lt; taskend) { // If the task is completed before its expected completion time, it&#39;s added to a list of early task completions taskearly.push(tasknlist[currenttask]); console.log(taskearly) tasktext = &#39;You completed &quot;&#39; + tasknlist[currenttask] + &#39;&quot; early. Way to go!&#39;; update_notifbox(); }; currenttask++; if(currenttask &gt;= tasknlist.length) { readtime(); reset(); completiontext = &quot;&lt;br&gt;Congratulations! You completed all of your tasks in &quot; + timetext + &quot;.&lt;br&gt;&lt;br&gt;&quot;; taskreflect(); if(taskearly.length &gt; 0) { completiontext = completiontext + earlytasks + &quot;&lt;br&gt;&lt;br&gt;&quot;; } if(taskovertime.length &gt; 0) { completiontext = completiontext + latetasks + &quot;&lt;br&gt;&lt;br&gt;&quot;; } taskbox.innerHTML = completiontext; return; }; taskend = (constant + (taskdlist[currenttask] * 6000)); }; const startBtn = document.getElementById(&#39;startBtn&#39;); const stopBtn = document.getElementById(&#39;stopBtn&#39;); const resetBtn = document.getElementById(&#39;resetBtn&#39;); const taskcompleteBtn = document.getElementById(&#39;taskcomplete&#39;); startBtn.onclick = function() { start() }; stopBtn.onclick = function() { stop() }; resetBtn.onclick = function() { reset() }; taskcompleteBtn.onclick = function() { taskcomplete() }; var hidden = 0; var hw = document.getElementById(&#39;hide&#39;); hw.innerHTML = &quot;Hide Time&quot; var sw = document.getElementById(&#39;stopwatch&#39;); hw.onclick = function() { if (hidden == 0) { sw.style.display = &quot;none&quot; hidden = 1 hw.innerHTML = &quot;Show Time&quot; } else { sw.style.display = &quot;block&quot; hidden = 0 hw.innerHTML = &quot;Hide Time&quot; }; }; var bihidden = 1; var nohidden = 1; var tahidden = 1; var breakInp = document.getElementById(&#39;breakinput&#39;); var notifInp = document.getElementById(&#39;notifinput&#39;); var taskInp = document.getElementById(&#39;taskinput&#39;); var newtaskBtn = document.getElementById(&#39;newtask&#39;); var breakBtn = document.getElementById(&#39;break&#39;); var notifBtn = document.getElementById(&#39;notif&#39;); var taskBtn = document.getElementById(&#39;task&#39;); notifBtn.onclick = function() { if (bihidden == 0) { breakInp.style.display = &quot;none&quot;; bihidden = 1; }; if (tahidden == 0) { taskInp.style.display = &quot;none&quot;; tahidden = 1; }; if (nohidden == 1){ notifInp.style.display = &quot;block&quot;; nohidden = 0; } else { notifInp.style.display = &quot;none&quot;; nohidden = 1; }; }; breakBtn.onclick = function() { if (nohidden == 0) { notifInp.style.display = &quot;none&quot;; nohidden = 1; }; if (tahidden == 0) { taskInp.style.display = &quot;none&quot;; tahidden = 1; }; if (bihidden == 1){ breakInp.style.display = &quot;block&quot;; bihidden = 0; } else { breakInp.style.display = &quot;none&quot;; bihidden = 1; }; }; taskBtn.onclick = function() { if (nohidden == 0) { notifInp.style.display = &quot;none&quot;; nohidden = 1; }; if (bihidden == 0) { breakInp.style.display = &quot;none&quot;; bihidden = 1; }; if (tahidden == 1){ taskInp.style.display = &quot;block&quot;; tahidden = 0; } else { taskInp.style.display = &quot;none&quot;; tahidden = 1; }; }; function update_taskbox() { temptasktext = &quot;&quot; for (let i = 0; i &lt; tasknlist.length; i++) { temptasktext = temptasktext + &quot;&lt;br&gt;Task: &quot; + tasknlist[i] + &quot; | Duration: &quot; + taskdlist[i] + &quot; minutes&lt;br&gt;&quot;; } taskbox.innerHTML = temptasktext + &quot;&lt;br&gt;&quot; } newtaskBtn.onclick = function() { if(tasknlist.length &gt; 4){ return } taskname = String(document.getElementById(&#39;tnameinput0&#39;).value) taskdur = Math.round(Number(document.getElementById(&#39;tdurinput0&#39;).value)); if(taskname.length &gt; 30){ return } if(taskdur &lt; 1 || taskdur &gt; 999) { tasktext = &quot;Input a task duration greater than zero minutes and less than 999 minutes.&quot; update_notifbox() return } tasknlist.push(taskname); taskdlist.push(taskdur); console.log(tasknlist, taskdlist); update_taskbox(); if(tasknlist.length &gt; 4){ newtaskBtn.innerHTML = &quot;Maximum Task Number Reached&quot;; newtaskBtn.style.background = &quot;#747474&quot;; }; }; .",
            "url": "https://drewreed2005.github.io/realdrew/workwatchfrontend/",
            "relUrl": "/workwatchfrontend/",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Alarm API",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . Please listen to the alarm tones found here to choose which alarm to vote for. You may like or dislike any alarm as many times as you like. The alarm with the most likes (with dislikes taken into account) will be implemented as the default. . Alarm Likes Dislikes .",
            "url": "https://drewreed2005.github.io/realdrew/data/alarms",
            "relUrl": "/data/alarms",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Big Idea 4 - The Internet Notes",
            "content": "Historical Facts . ARPANET (Advanced Research Projects Agency Network) was one of the first networks (1975). Eventually, the need for computers to talk to each other became so great that more efficient ways for them to were developed. . How Data is Sent and Received . Information is sent over a network in packets, which include data including the source of the information and the destination. Computer systems are groups of computing devices working together for a joint purpose and computer network, a type of computing system, is a group of interconnected computing devices that can send information to each other. . Files sent between devices are chopped up into packets in any order, then read and recreated by the recipient’s computer. This is called packet switching. Packets need to be used to send data because the amount that’s sent between systems is too great to transfer all at once. Routing is finding a path between devices to transfer information. A path is a sequence of connected computing devices, starting with the sender and ending with the recipient. . When you hear internet providers talking about bandwidth, they’re referring to how much data can be sent between devices in a given amount of time (typically measured in bits per second, bps). . Vocabulary Matching Activity . A path is a sequence of directly connected computer devices that begins at the sender and ends at the receiver. (a) | Routing is the process of finding a path from a sender to a receiver. (b) | A computer system is a group of computing devices and programs working together for a common purpose. | A computer device is a physical artifact that can run a program (computers, tablets, servers, routers, smart sensors, etc.). (c) | Bandwidth is the maximum amount of data that can be sent in a fixed amount of time. (d) | A computer network is a group of interconnected computing devices capable of sending or receiving data. | How the Internet Works . To start with vocab, a protocol is a set of rules that determine a system’s behavior. The Open System Interconnect (OSI) protocol model contains 7 layers of protocols to go through in order to communicate. . Via imperva.com Transmission Control Protocol (TCP) is what establishes the standards of how messages are sent between devices on the internet. The Internet Engineering Task Force (IETF) manages the standards and discussions regarding the internet in a collaborative manner. . Via College Board APCSP Big Idea 4 - The Internet, Video 2 This diagram from the College Board video, called the “Narrow Waist diagram,” shows how the internet works. Let’s break it up into chunks. . Network Access Layer . This layer involves the hardware and protocols that sends the 1’s and 0’s between devices. The most common of these protocols is Ethernet, which is implemented in Network Interface Cards (NIC). The delivery of packets between NIC’s is called a “hop”. Local hops use the NIC’s unique Media Access Control (MAC) address. . Internet Layer . Connecting this layer to the Internet layer are routers, which use the metadata in packets to gain information on how to effectively route a path. The path should eventually end at the receiver’s IP address. The internet is flexible and scalable, so it is able to meet demands. At this layer, the IP address should be received. . To illustrate, Local Area Networks (LAN) can connect 10 to 100 systems. An intranet can be 100 to 1000 LAN systems. These intranets want to communicate with each other, so they link together via autonomous systems (AS), controlled by internet providers and able to hold tens of thousands of systems. The final stage, the internet, links together AS’s to unite millions of systems via special telecommunication (like satellites). . Transport Layer . The transport layer uses two primary types of protocols: Transmission Control Protocol (TCP) (also called Internet Protocol, IP) and User Datagram Protocol (UDP). . Overall, TCP is more like a certified delivery of information, ensuring that data was sent to its intended recipient and undergoing error checking and correcting protocols; this emphasis on precision makes it a bit slower than UDP to use. It is more often used for things like emailing and web browsing. . UDP, on the other hand, just puts in its best effort to deliver data, discarding erroneous packets found through error checking. It is more often used for things like media streaming. . Your IPv4 address is split into four octets (8 bits each, spanning 256 total values in a zero-based system, so the maximum value is 255). The 32nd bit of the 32 total is a network bit. Using an IP, three targets can be addressed: unicast, which is a specific device (internet-wide access, addressed using TCP); multicast, which is a set of devices in a specific range of IP addresses (internet-wide access, addressed using UDP); and broadcast, which is all devices (LAN-wide access, addressed using UDP). . Application Layer . This is the layer where the user gets to use easier names for websites to find sites they wish to visit. . HTTP is how a computers asks for and receives data from a web server (normally uses TCP, Port 80 at the transport layer). HTTPS is basically HTTP but with more security (also uses TCP, Port 443). . Web servers are machine-run programs that provide clients web pages, linked using Uniform Resource Locations (URL). . The Domain Name Service (DNS) translates URLs to computer-readable IP addresses. DNS holds a database of tons of IP addresses and their corresponding URLs, stored on many large computers. . Internet and Transport Layers Operation . Here is a diagram found in the College Board video to illustrate the process of internet communication. . Via College Board APCSP Big Idea 4 - The Internet, Video 2 Video 2 True or False Review . Via College Board APCSP Big Idea 4 - The Internet, Video 2 Expectations from APCSP Page . Here are some things mentioned on the APCSP “Big Idea 4 - The Internet” page that we’re supposed to do. . Domain Name Service . Here is where the College Board materials bring up DNS. . Let’s use “sub.domain.com” as an example. The “domain” part is the site’s regular domain. The “sub” is a unique subdomain of the site. . Here are screenshots of the A and CNAME records associated with YouTube. . . . The A record seems to show the various IP addresses that you can be directed to when requesting YouTube’s domain. The numerous addresses, as the video mentioned, are likely to avoid too much traffic on a single page, considering how much traffic YouTube constantly gets. . IP Addresses I Use Daily . Here are six, as requested. . MyConnect (Canvas): . 18.204.109.29 | 3.95.144.229 | 34.202.195.44 | . Google: . 142.250.189.196 | . YouTube: . 142.250.189.174 | 142.250.189.206 | 142.250.191.46 | ETC… | . Google Docs: . 142.250.191.46 | . Slack: . 3.95.117.96 | 34.193.255.5 | 34.203.97.10 | ETC… | . Github: . 140.82.112.3 | .",
            "url": "https://drewreed2005.github.io/realdrew/theinternetnotes/",
            "relUrl": "/theinternetnotes/",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "The Internet MCQ Reflection",
            "content": "Quiz Results . College Board Quiz Results: 3/3 I got all three questions correct. The were mostly easy, though the second one was a bit confusing because the video did not directly cover it (more on that later). . Question 1 . . This question was quite simple, as this knowledge was reinforced quite a bit throughout the video. Information is broken down into packets before being sent, in any order, to the recipient. . Question 2 . . This was the tricky question: what is an “open” protocol? Protocols are discussed extensively throughout the video, but because of that one stray word, I wasn’t sure how to respond. . I looked to the process of elimination. Option A sounded more like the function of metadata, not protocols. (It turns out Option A is incorrect because Internet routing is dynamic, not pre-planned, which wasn’t covered in the videos.) . Option B didn’t seem correct because no part of the video discussed the internet encrypting or securing Internet communication. (Turns out this reasoning was basically correct: protocols do not ensure security.) . Option C was obviously wrong. Bandwidth is an individual quirk of one’s internet provider, and thus cannot be equal for all internet users. Protocols also didn’t seem to have much to do with the function of protocols, so it seemed irrelevant to the question. . I went with Option D because I know that protocols are intended to be standardized between devices. This is why there are authorities like the IETF that ensure standardization of protocols. . Question 3 . . This one was about as easy as the first. The World Wide Web is a system of linked files, pages, etc., not a website or a protocol. The Internet is not a data stream, but rather a network of other interconnected networks. This was quite clearly expressed in the video. .",
            "url": "https://drewreed2005.github.io/realdrew/internetmcqreflection/",
            "relUrl": "/internetmcqreflection/",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Work Watch Code",
            "content": "Below is a placeholder process of saving user information. Here are some important frontend considerations: . taskask() should be in the form of two text inputs: the left (labeled &quot;Task Title&quot;) allowing the user to input a 50-character long task name and the right (labeled &quot;Task Duration&quot;) exclusively allowing the user to input a three-digit integer | breakdur, breakintv, and notifintv will all be defined by a text input box identical to the right one of taskask() | The task settings should be a separate section of the menus, but the notifications and break settings can all be in one place. | . import time affirmative = [&#39;yes&#39;, &#39;yeah&#39;, &#39;yup&#39;, &#39;y&#39;, &#39;yea&#39;, &#39;mhm&#39;, &#39;yep&#39;, &#39;affirmative&#39;, &#39;sure&#39;, &#39;alright&#39;, &#39;okay&#39;, &#39;ok&#39;, &#39;okey-dokey&#39;, &#39;oky-doky&#39;, &#39;yessir&#39;, &#39;yessiree&#39;, &#39;okie-dokie&#39;, &#39;heck yeah&#39;, &#39;of course&#39;] negative = [&#39;no&#39;, &#39;nope&#39;, &#39;n&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;negative&#39;, &#39;no thanks&#39;, &#39;no thank you&#39;, &#39;heck no&#39;, &#39;of course not&#39;, &#39;never&#39;] #just for this beta program&#39;s simplicity tasklist = [] #to be filled out as an appended list of dictionaries intlo = 0 #a global variable that always resets to zero after use def taskask(): msg = input(&quot;Most affirmative/negative responses are accepted.&quot;).lower() #checks for a second task if msg in affirmative: taskcreate() elif msg in negative: print(&quot;Understood.&quot;) return else: print(&quot;Invalid response.&quot;) taskask() def intloop(var): #checks if a given parameter input is an integer greater than 0 temp = 1 try: if int(var) &lt;= 0: return False temp += int(var) return True except: return False def intcheck(var): #checks if the var input is valid, then defines it (can be iterated) if var == 0: #check for tdur global tdur tdur = input(&quot;Please input an integer value.&quot;) if intloop(tdur) == True: return else: print(&quot;Invalid response.&quot;) intcheck(0) elif var == 1: #check for breakintv global breakintv breakintv = input(&quot;Please input an integer value.&quot;) if intloop(breakintv) == True: return else: print(&quot;Invalid response.&quot;) intcheck(1) elif var == 2: #check for breakdur global breakdur breakdur = input(&quot;Please input an integer value.&quot;) if intloop(breakdur) == True: return else: print(&quot;Invalid response.&quot;) intcheck(2) elif var == 3: #check for notifintv global notifintv notifintv = input(&quot;Please input an integer value.&quot;) if intloop(notifintv) == True: return else: print(&quot;Invalid response.&quot;) intcheck(3) else: print(&quot;ERROR: UNACCEPTED PARAMETER&quot;) quit() def taskcreate(): #forms the task list print(&quot;What is the title of your task?&quot;) ttitle = input(&quot;Give it a distinct title that YOU will recognize.&quot;) print(&quot;What is the duration of this task (in minutes)?&quot;) intcheck(0) tasklist.append({&quot;title&quot;: ttitle, &quot;dur&quot;: int(tdur)}) print(&quot;Would you like to add another task?&quot;) taskask() def breakcreate(): global breaklist print(&quot;How often (in minutes) would you like breaks to occur?&quot;) print(&quot;It is advised that short breaks be taken around every 30 minutes.&quot;) intcheck(1) print(&quot;How long (in minutes) would you like breaks to last?&quot;) print(&quot;(Breaks around 10 minutes long are good for productivity.)&quot;) intcheck(2) breaklist = [int(breakintv), int(breakdur)] def notifcreate(): print(&quot;How often (in minutes) would you like to receive session notifications?&quot;) print(&quot;(Allows users with hidden timers to keep track of their session duration.)&quot;) intcheck(3) def singularitycheck(term): #checks if an inputted number is singular (used for grammar) global ess if int(term) == 1: ess = &quot;.&quot; else: ess = &quot;s.&quot; taskcreate() print(tasklist) #debug check for tasklist formatting breakcreate() print(breaklist) #debug check for established break time info notifcreate() print(notifintv) singularitycheck(breakintv) breaksummary = &quot;You have chosen to take &quot; + breakdur + &quot;-minute breaks every &quot; + breakintv + &quot; minute&quot; + ess singularitycheck(notifintv) notifsummary = &quot;You have also chosen to receive session notifications every &quot; + notifintv + &quot; minute&quot; + ess def tasksummary(): global intlo if intlo &lt; len(tasklist): thistask = tasklist[intlo] print(&quot;Assignment Title: &quot; + thistask[&quot;title&quot;]) print(&quot;Expected Duration: &quot; + str(thistask[&quot;dur&quot;]) + &#39; minutes n&#39;) intlo += 1 tasksummary() else: intlo = 0 return print(breaksummary + &quot; n&quot; + notifsummary) print(&quot;You have input these tasks to complete during your work session: n&quot;) tasksummary() print(&quot;All done.&quot;) . What is the title of your task? What is the duration of this task (in minutes)? Would you like to add another task? What is the title of your task? What is the duration of this task (in minutes)? Invalid response. Would you like to add another task? Invalid response. Understood. [{&#39;title&#39;: &#39;show mr. mortensen our code&#39;, &#39;dur&#39;: 4}, {&#39;title&#39;: &#39;show him again&#39;, &#39;dur&#39;: 2}] How often (in minutes) would you like breaks to occur? It is advised that short breaks be taken around every 30 minutes. How long (in minutes) would you like breaks to last? (Breaks around 10 minutes long are good for productivity.) [2, 100] How often (in minutes) would you like to receive session notifications? (Allows users with hidden timers to keep track of their session duration.) 1 You have chosen to take 100-minute breaks every 2 minutes. You have also chosen to receive session notifications every 1 minute. You have input these tasks to complete during your work session: Assignment Title: show mr. mortensen our code Expected Duration: 4 minutes Assignment Title: show him again Expected Duration: 2 minutes All done. . secs = -1 mins = 0 tasknum = 0 watchon = True breaktime = False def notifcheck(): if mins == 0: return if (mins % int(notifintv)) == 0: singularitycheck(mins) print(&quot;The timer has been running for more than &quot; + str(int(mins)) + &quot; minute&quot; + ess) else: return def breakcheck(): global breaktime if mins == 0: return if (mins % int(breakintv)) == 0: print(&quot;It&#39;s break time! Please take a &quot; + str(breakdur) + &quot;-minute break.&quot;) breaktime = True else: return def taskcheck(tasknum): if mins == 0: return if tasknum &lt; len(tasklist): currentt = tasklist[tasknum] if (mins % int(currentt[&quot;dur&quot;])) == 0: print(&#39;You anticipated that the task &quot;&#39; + currentt[&quot;title&quot;] + &#39;&quot; would be done by now.&#39;) else: return else: watchon = False def inctime(): global secs global mins global breaktime secs += 1 mins = secs / 60 dissecs = secs - int(secs / 60) * 60 #Devon&#39;s dissecs code (slight mod.) dismins = int(mins - int(mins / 60) * 60) #Devon&#39;s dismins code notifcheck() #Calculates if a notification should be provided breakcheck() #Calculates if it&#39;s break time #taskcheck() #Calculates if the task was expected to have been completed if breaktime == True: watchon == False return print(str(dismins) + &quot;m : &quot; + str(dissecs) + &quot;s &quot;, end = &#39; r&#39;) time.sleep(1) inctime() if watchon == True: inctime() if watchon == False: print(&quot;Your work session lasted &quot; + str(mins) + &quot; minutes and &quot; + str(secs) + &quot; seconds.&quot;) secs = -1 mins = 0 . The timer has been running for more than 1 minute. The timer has been running for more than 2 minutes. It&#39;s break time! Please take a 100-minute break. . Testing alarm tones. . import time from playsound import playsound secs = -1 mins = 0 tasknum = 0 watchon = True breakintv = 1 breakdur = 100 def breaktest(): global watchon global breakintv global breakdur if mins == 0: return if (mins % int(breakintv)) == 0: print(&quot;It&#39;s break time! Please take a &quot; + str(breakdur) + &quot;-minute break.&quot;) playsound(&#39;../audio/traditionalalarm.mp3&#39;) return 1 else: return def testtime(): global secs global mins secs += 1 mins = secs / 60 dissecs = secs - int(secs / 60) * 60 #Devon&#39;s dissecs code (slight mod.) dismins = int(mins - int(mins / 60) * 60) #Devon&#39;s dismins code if breaktest() == 1: #Calculates if it&#39;s break time watchon = False return print(str(dismins) + &quot;m : &quot; + str(dissecs) + &quot;s &quot;, end = &#39; r&#39;) time.sleep(1) testtime() if watchon == True: testtime() print(&quot;Your work session lasted &quot; + str(mins) + &quot; minutes and &quot; + str(secs) + &quot; seconds.&quot;) else: print(&quot;Your work session lasted &quot; + str(mins) + &quot; minutes and &quot; + str(secs) + &quot; seconds.&quot;) . It&#39;s break time! Please take a 100-minute break. Your work session lasted 1.0 minutes and 60 seconds. . Audio test was successful. . New test for second timer for break time. . secs = -1 mins = 0 breaksecs = -1 breakmins = 0 tasknum = 0 watchon = True breaktime = False notifintv = 300 breakintv = 1 breakdur = 2 def notifcheck(): if mins == 0: return if (mins % int(notifintv)) == 0: singularitycheck(mins) print(&quot;The timer has been running for more than &quot; + str(int(mins)) + &quot; minute&quot; + ess) else: return def breakcheck(): global breaktime if mins == 0: return if (mins % int(breakintv)) == 0: print(&quot;It&#39;s break time! Please take a &quot; + str(breakdur) + &quot;-minute break.&quot;) breaktime = True else: return def taskcheck(tasknum): if mins == 0: return if tasknum &lt; len(tasklist): currentt = tasklist[tasknum] if (mins % int(currentt[&quot;dur&quot;])) == 0: print(&#39;You anticipated that the task &quot;&#39; + currentt[&quot;title&quot;] + &#39;&quot; would be done by now.&#39;) else: return else: watchon = False def inctime(): global secs global mins global breaktime secs += 1 mins = secs / 60 dissecs = secs - int(secs / 60) * 60 #Devon&#39;s dissecs code (slight mod.) dismins = int(mins - int(mins / 60) * 60) #Devon&#39;s dismins code notifcheck() #Calculates if a notification should be provided breakcheck() #Calculates if it&#39;s break time #taskcheck() #Calculates if the task was expected to have been completed if breaktime == True: watchon == False breaktimer() return print(str(dismins) + &quot;m : &quot; + str(dissecs) + &quot;s &quot;, end = &#39; r&#39;) time.sleep(1) def breaktimer(): global breaksecs global breakmins global breaktime breaksecs += 1 breakmins = secs / 60 if breakmins == int(breakdur): print(&quot;Break time is over! Time to get back to work.&quot;) breaksecs = -1 breakmins = 0 breaktime = False watchon = True return time.sleep(1) def timerloop(): if mins == 3: return elif watchon == True: inctime() elif breaktime == True: breaktimer() else: return timerloop() timerloop() . It&#39;s break time! Please take a 2-minute break. It&#39;s break time! Please take a 2-minute break. Break time is over! Time to get back to work. It&#39;s break time! Please take a 2-minute break. .",
            "url": "https://drewreed2005.github.io/realdrew/workwatchcode/",
            "relUrl": "/workwatchcode/",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "RapidAPI Notes",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . . Introduction . RapidAPI is constantly sending out and receiving information in the form of API data. . Covid19 RapidAPI Example . The example API data used in class can be found here. . As I was still getting comfortable with APIs, the only real modification I made to this (aside from the key) was adding another part of the output about Japan&#39;s COVID stats. . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;f9dc4c060fmsh192fef0e86699c6p109981jsn882369c51285&quot;, #my own key &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) #print(response.json()) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;Japan&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . country_name Japan cases 7,621,562 deaths 29,284 region total_recovered 7,135,403 new_deaths 27 new_cases 43,721 serious_critical 195 active_cases 456,875 total_cases_per_1m_population 60,596 deaths_per_1m_population 233 total_tests 46,690,473 tests_per_1m_population 371,215 . Digital Coin Example . This example provides digital coin feedback. It include popularity, price, symbols, etc. I&#39;ve gone ahead and subscribed and input my own key for the data. . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . Formatting Digital Coin example . This is where I found that the json data (in the form of a list of dictionaries) can be decompiled and procedurally printed in a certain format just like in &quot;Lists and Dictionaries.&quot; Influence from that assignment can be seen later. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;f9dc4c060fmsh192fef0e86699c6p109981jsn882369c51285&quot;, &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) json = response.json() try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20007.043445669886 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1360.6252614471312 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0012781845043275 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0011528594117483 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 287.98197528426056 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.4988895271244148 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0011190706827917 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.4290610319499885 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.67277690109883 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06401725816699481 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8406945255278145 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.354827031015728 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.000011277407826313 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.0004144410865046 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06254252496674947 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1362.1667796088977 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.956397413553659 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.152961513781296 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 19998.5911088268 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.079228477612025 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.652269939359908 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 53.7831642912313 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.6081915426917 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 28.110709600321922 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 149.7243175915331 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.35116881410269 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.12059162629913914 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 118.94879399400635 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20034.052840519642 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb NEAR 3.6230294679984367 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.10942246048808536 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000289738697441128 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8121211049462005 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.70445755140311 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.2625796411487 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.543518717963889 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.020475980607335 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.02354126614592148 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.666871586346808 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.6993870246030436 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.7645434735899328 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.05805955943589639 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0022829327223923 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 137.5133791070939 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt EGLD 55.45012108324985 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld XTZ 1.4313363404304225 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz CHZ 0.21510840708380768 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8489052876598929 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5091344874596233 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.171778990670332 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . . Personal Use of RapidAPI . On RapidAPI, I found some data taken from speedrun.com, the internet&#39;s primary speedrunning forum site and hub for video game speedrunning world records. . To clarify, speedrunning is the practice of attempting to beat or complete certain goals in video games as fast as possible. This can be a challenge as minor as buying Mario some boxers to wear in Super Mario Odyssey (Nipple%) or as gargantuan as completing every shrine and side quest in The Legend of Zelda: Breath of the Wild (BotW 100%); and it can be as short as just over a minute (Pokémon Red and Blue any%) and as long as multiple days (in segments with certain restrictions). . This API included a LOT of data, so I decided it would be best to curate it based on user input so that it wasn&#39;t TOO bloated. Plus, this shows additional fluency with reading and displaying json-ified data. . import requests url = &quot;https://speedrun1.p.rapidapi.com/forum&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;f9dc4c060fmsh192fef0e86699c6p109981jsn882369c51285&quot;, &quot;X-RapidAPI-Host&quot;: &quot;speedrun1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) speedrun = response.json() #print(response.text) def print_data(d_rec): #plagiar-inspired by lists and dictionaries lesson print(&#39;&quot;&#39; + d_rec[&quot;forum&quot;] + &#39;&quot;&#39;) print(&quot; t&quot;, &quot;Game:&quot;, d_rec[&quot;game&quot;]) print(&quot; t&quot;, &quot;URL:&quot;, d_rec[&quot;url&quot;]) print() def recursive_loop(i): #could print all forum posts, but that&#39;s TONS of content if i &lt; len(speedrun): record = speedrun[i] print_data(record) recursive_loop(i + 1) def print_name(d_rec): #see name_check print(d_rec[&quot;game&quot;]) def name_check(i): #this function showed me which games were in this API if i &lt; len(speedrun): record = speedrun[i] print_name(record) name_check(i + 1) #Showing all posts would be too much, so let&#39;s narrow it down to certain games z = 0 #see reccheckloop function gamelist = [ #these 11 games are featured in the api, in that order (popularity-based) &quot;legend_of_zelda_breath_of_the_wild&quot;, #format used by the dictionaries here &quot;super_mario_sunshine&quot;, &quot;super_mario_odyssey&quot;, &quot;mario_kart_8_delux&quot;, &quot;celeste&quot;, &quot;portal&quot;, &quot;hollow_knight&quot;, &quot;super_mario_brothers&quot;, &quot;minecraft&quot;, &quot;super_mario_world&quot;, &quot;super_mario_64&quot; ] #THEIR INDEXES ARE IMPORTANT! SEE BELOW validinputs = [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;] def print_forum(f_rec): #see use below print(&#39;Post Title and Info: &quot;&#39; + f_rec[&quot;forum&quot;] + &#39;&quot;&#39;) print(&quot; tURL: &quot; + f_rec[&quot;url&quot;]) print(&quot;&quot;) def reccheckloop(i): global z #pulls z = 0 record = speedrun[z] #starts with the first dictionary of the API if record[&quot;game&quot;] == gamelist[i]: #checks if forum pertains to chosen game print_forum(record) #prints post name (includes info) and URL below if (z + 1) &lt; len(speedrun): #(z + 1) necessary because z starts at 0, &quot;len&quot; doesn&#39;t z += 1 #only increases if it wouldn&#39;t cause an index error when looped else: return #once all posts have been checked, the program ends here reccheckloop(i) #repeat def selection_check(): #gets user input and ensures its validity msg = input(&quot;Please input an integer found in the list below.&quot;) if msg in validinputs: #variance with inputs makes using a list optimal print(&quot; n-- &quot; + msg + &quot; -- n&quot;) reccheckloop(int(msg) - 1) #subtracts 1 because pertinent list is zero-based else: print(&quot;Invalid response.&quot;) selection_check() #repeats input check if user input is invalid def game_select(): print(&quot;Which speed game would you like to see forum posts for?&quot;) print(&quot; t1. The Legend of Zelda: Breath of the Wild (Wii U/Switch)&quot;) print(&quot; t2. Super Mario Sunshine (GameCube)&quot;) print(&quot; t3. Super Mario Odyssey (Switch)&quot;) print(&quot; t4. Mario Kart 8 Deluxe (Switch)&quot;) print(&quot; t5. Celeste (Console &amp; PC)&quot;) print(&quot; t6. Porta (Console &amp; PC)&quot;) print(&quot; t7. Hollow Knight (Console &amp; PC)&quot;) print(&quot; t8. Super Mario Bros. (NES)&quot;) print(&quot; t9. Minecraft (PC)&quot;) print(&quot; t10. Super Mario World (SNES)&quot;) print(&quot; t11. Super Mario 64 (N64)&quot;) selection_check() print(&quot; n-- END --&quot;) game_select() . Which speed game would you like to see forum posts for? 1. The Legend of Zelda: Breath of the Wild (Wii U/Switch) 2. Super Mario Sunshine (GameCube) 3. Super Mario Odyssey (Switch) 4. Mario Kart 8 Deluxe (Switch) 5. Celeste (Console &amp; PC) 6. Porta (Console &amp; PC) 7. Hollow Knight (Console &amp; PC) 8. Super Mario Bros. (NES) 9. Minecraft (PC) 10. Super Mario World (SNES) 11. Super Mario 64 (N64) -- 4 -- Post Title and Info: &#34;Mario Kart 8 Deluxe Category Extensions9 Sep 2022PearPear&#34; URL: https://www.speedrun.com/mk8dxce/forum Post Title and Info: &#34;Load Time Remover and Auto-SplitterVikeMKVikeMKVikeMKVikeMK19 Apr 2022modularizedmodularized&#34; URL: https://www.speedrun.com/mk8dx/thread/yeh1o Post Title and Info: &#34;Run TimingsSnipinG117SnipinG117SnipinG117SnipinG1172 Apr 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/wa4sr Post Title and Info: &#34;UPDATE: Time Thresholds for Video Requirementamberamberamberamber12 Aug 2020OddPandemoniumOddPandemonium&#34; URL: https://www.speedrun.com/mk8dx/thread/k76ek Post Title and Info: &#34;DLC CategoriesPianist15Pianist15Pianist15Pianist1516 Mar 2022Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/wye5d Post Title and Info: &#34;Cup runs will now require you to start on the proper starting track.amberamberamberamber19 Feb 2022amberamber&#34; URL: https://www.speedrun.com/mk8dx/thread/4op0q Post Title and Info: &#34;IGT TimingPianist15Pianist15Pianist15Pianist151 Apr 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/rpdws Post Title and Info: &#34;FAQPianist15Pianist15Pianist15Pianist1519 Feb 2019Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/etl7j Post Title and Info: &#34;Discord ServerSnipinG117SnipinG117SnipinG117SnipinG1171 May 2017SnipinG117SnipinG117&#34; URL: https://www.speedrun.com/mk8dx/thread/0kbd6 Post Title and Info: &#34;How do you record videos of you speedrunning MK8D?Red_BrickRed_BrickRed_BrickRed_Brick1 Oct 2022ZarzaZarza&#34; URL: https://www.speedrun.com/mk8dx/thread/g4um9 Post Title and Info: &#34;I&#39;m getting into theory crafting and need your helpEeveeBest11EeveeBest11EeveeBest11EeveeBest1122 Sep 2022EeveeBest11EeveeBest11&#34; URL: https://www.speedrun.com/mk8dx/thread/i9aro Post Title and Info: &#34;Individual LevelsHylz75Hylz75Hylz75Hylz751 Sep 2022PearPear&#34; URL: https://www.speedrun.com/mk8dx/thread/q2dbw Post Title and Info: &#34;MKLeaderboards.comPenguinzXvXPenguinzXvXPenguinzXvXPenguinzXvX26 Aug 2022PenguinzXvXPenguinzXvX&#34; URL: https://www.speedrun.com/mk8dx/thread/915g7 Post Title and Info: &#34;questionsnrZorasnrZorasnrZorasnrZora24 Aug 2022snrZorasnrZora&#34; URL: https://www.speedrun.com/mk8dx/thread/sz9mo Post Title and Info: &#34;I think there is an issueSniper_Mango10Sniper_Mango10Sniper_Mango10Sniper_Mango1015 Aug 2022Sniper_Mango10Sniper_Mango10&#34; URL: https://www.speedrun.com/mk8dx/thread/st9io Post Title and Info: &#34;Category idea: ZRlessnotsignal300notsignal300notsignal300notsignal3007 Aug 2022PearPear&#34; URL: https://www.speedrun.com/mk8dx/thread/yppaa Post Title and Info: &#34;New category: Overlap%RP_Boy_GamingRP_Boy_GamingRP_Boy_GamingRP_Boy_Gaming31 Jul 2022EeveeBest11EeveeBest11&#34; URL: https://www.speedrun.com/mk8dx/thread/o51o3 Post Title and Info: &#34;An IdeaMEGA_mky_GamerYTMEGA_mky_GamerYTMEGA_mky_GamerYTMEGA_mky_GamerYT22 Jun 2022ParadoxicalPinkParadoxicalPink&#34; URL: https://www.speedrun.com/mk8dx/thread/doc34 Post Title and Info: &#34;One Down 47 to goLoganSpLoganSpLoganSpLoganSp13 Jun 2022LoganSpLoganSp&#34; URL: https://www.speedrun.com/mk8dx/thread/1age3 Post Title and Info: &#34;DLC Cups questionUnithlees5Unithlees5Unithlees5Unithlees58 Jun 2022Unithlees5Unithlees5&#34; URL: https://www.speedrun.com/mk8dx/thread/51cv3 Post Title and Info: &#34;ShelledThe_wormiest_wormThe_wormiest_wormThe_wormiest_wormThe_wormiest_worm24 May 2022AkhosAkhos&#34; URL: https://www.speedrun.com/mk8dx/thread/x7ofv Post Title and Info: &#34;Inside drift bikesGooseEggGooseEggGooseEggGooseEgg23 May 2022MineChildXMineChildX&#34; URL: https://www.speedrun.com/mk8dx/thread/nwl0j Post Title and Info: &#34;ILsPurdyOctolingYTPurdyOctolingYTPurdyOctolingYTPurdyOctolingYT23 Feb 2022PurdyOctolingYTPurdyOctolingYT&#34; URL: https://www.speedrun.com/mk8dx/thread/tqazq Post Title and Info: &#34;DLCZumiZumiZumiZumi18 Feb 2022ElimsElims&#34; URL: https://www.speedrun.com/mk8dx/thread/b3pa3 Post Title and Info: &#34;run accepting timeLenniiLenniiLenniiLennii18 Feb 2022Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/suziz Post Title and Info: &#34;DLCStLouisStLouisStLouisStLouis9 Feb 2022StLouisStLouis&#34; URL: https://www.speedrun.com/mk8dx/thread/64pd6 Post Title and Info: &#34;Problem with the leaderboardPatrickButSmartPatrickButSmartPatrickButSmartPatrickButSmart2 Feb 2022AeonFrodoAeonFrodo&#34; URL: https://www.speedrun.com/mk8dx/thread/31vt2 Post Title and Info: &#34;Do you have to win?21 Jan 2022HazelnoetHazelnoet&#34; URL: https://www.speedrun.com/mk8dx/thread/6zvnl Post Title and Info: &#34;digital/physical differences | différence digital/physiqueMathieutpMathieutpMathieutpMathieutp16 Jan 2022AkhosAkhos&#34; URL: https://www.speedrun.com/mk8dx/thread/zlmiy Post Title and Info: &#34;How difficult are the grand prix cpusPatrickButSmartPatrickButSmartPatrickButSmartPatrickButSmart27 Oct 2021PatrickButSmartPatrickButSmart&#34; URL: https://www.speedrun.com/mk8dx/thread/79urz Post Title and Info: &#34;An IdeaCanonball_RunCanonball_RunCanonball_RunCanonball_Run1 Oct 2021Canonball_RunCanonball_Run&#34; URL: https://www.speedrun.com/mk8dx/thread/xa696 Post Title and Info: &#34;multiple run submissionsm1btlyzm1btlyzm1btlyzm1btlyz22 Sep 2021m1btlyzm1btlyz&#34; URL: https://www.speedrun.com/mk8dx/thread/15a6g Post Title and Info: &#34;Question on Davi&#39;s run (200cc items 32 tracks)RP_Boy_GamingRP_Boy_GamingRP_Boy_GamingRP_Boy_Gaming4 Sep 2021RP_Boy_GamingRP_Boy_Gaming&#34; URL: https://www.speedrun.com/mk8dx/thread/mq4wu Post Title and Info: &#34;Standard everything but any characterHarv123089Harv123089Harv123089Harv12308931 Aug 2021GsFlintGsFlint&#34; URL: https://www.speedrun.com/mk8dx/thread/8gpct Post Title and Info: &#34;golden mario%SSJonaSSJonaSSJonaSSJona17 Aug 2021AZZYTASTERAZZYTASTER&#34; URL: https://www.speedrun.com/mk8dx/thread/mm24i Post Title and Info: &#34;I&#39;m confused.Gamerpro9102Gamerpro9102Gamerpro9102Gamerpro91026 Aug 2021brogo2021brogo2021&#34; URL: https://www.speedrun.com/mk8dx/thread/yesj5 Post Title and Info: &#34;Suspicious of some runs...OddPandemoniumOddPandemoniumOddPandemoniumOddPandemonium28 Jun 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/kuyj6 Post Title and Info: &#34;Time Trial Cup Runscielogancielogancielogancielogan27 Jun 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/dbyq1 Post Title and Info: &#34;Recording on switchcielogancielogancielogancielogan25 Jun 2021BennyTheGreatBennyTheGreat&#34; URL: https://www.speedrun.com/mk8dx/thread/530xe Post Title and Info: &#34;Shy Guy Falls No Mushroom ShortcutMissPinkManeMissPinkManeMissPinkManeMissPinkMane13 May 2021BayesicBayesic&#34; URL: https://www.speedrun.com/mk8dx/thread/k43nb Post Title and Info: &#34;BIG IDEA!TanksalotTanksalotTanksalotTanksalot13 May 2021TanksalotTanksalot&#34; URL: https://www.speedrun.com/mk8dx/thread/zxlaa Post Title and Info: &#34;Shy Guy Falls N.I.S.C.TanksalotTanksalotTanksalotTanksalot17 Apr 2021TanksalotTanksalot&#34; URL: https://www.speedrun.com/mk8dx/thread/3t3hh Post Title and Info: &#34;Rainbow% (probably a terrible idea)2404UNFX404UNFX404UNFX404UNFX28 Feb 2021CrankydetectiveCrankydetective&#34; URL: https://www.speedrun.com/mk8dx/thread/j96iu Post Title and Info: &#34;2 Player Runs?The_Gamer_DudeThe_Gamer_DudeThe_Gamer_DudeThe_Gamer_Dude25 Feb 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/yw88y Post Title and Info: &#34;maybe a new shortcutSSJonaSSJonaSSJonaSSJona4 Feb 2021Pianist15Pianist15&#34; URL: https://www.speedrun.com/mk8dx/thread/5qcm0 Post Title and Info: &#34;Time trials - retro tracks - 150cc - shroomsreddy_srreddy_srreddy_srreddy_sr28 Jan 2021linny356linny356&#34; URL: https://www.speedrun.com/mk8dx/thread/a5f23 Post Title and Info: &#34;My second runSplitzaydenzSplitzaydenz24 Jan 2021Splitzaydenz&#34; URL: https://www.speedrun.com/mk8dx/thread/rjya4 Post Title and Info: &#34;My first runSplitzaydenzSplitzaydenz23 Jan 2021Splitzaydenz&#34; URL: https://www.speedrun.com/mk8dx/thread/fsjdj Post Title and Info: &#34;New Catagory Idea: Mankalor%xdimmortalxdimmortalxdimmortalxdimmortal20 Jan 2021PearPear&#34; URL: https://www.speedrun.com/mk8dx/thread/239hq Post Title and Info: &#34;Random.14 Jan 2021DillPickelDillPickel&#34; URL: https://www.speedrun.com/mk8dx/thread/w13jt Post Title and Info: &#34;Outdated Rules?BabyfurzBabyfurzBabyfurzBabyfurz2 Jan 2021BabyfurzBabyfurz&#34; URL: https://www.speedrun.com/mk8dx/thread/46bm7 -- END -- .",
            "url": "https://drewreed2005.github.io/realdrew/rapidapinotes/",
            "relUrl": "/rapidapinotes/",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Identifying and Correcting Errors Notes",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . . This first function exists to tell the user where in the alphabet a given letter is. Below is some work to fix certain problems with the program, the corrections being detailed with Python comments. . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) #1 has been added to i to account for zero-based syntax. i += 1 . The letter z is the 26 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) count = 0 #Count has been moved out of the function so that it can be overwritten by the input. for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count + 1) + &quot; letter in the alphabet&quot;) #1 is added to count to account for zero-based syntax. count += 1 . The letter b is the 2 letter in the alphabet . The program below gives a list of even numbers less than or equal to 10. In the cell below it, we want it to print odd numbers instead. . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . odds = [] i = 1 #The starting i value has been increased to one so that the list starts at 1 and 2 is added each loop. while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . The program below extracts even numbers from a list of numbers from 0 to 10. We want it to print odd numbers instead. . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): #remainder has been set to 1, as odd numbers give a remainder of 1 when divided by 2 odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The program below lists numbers between 1 and 100 once if it is divisible by 2 or 5. . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: #we want to include 100, so it becomes &quot;&lt;=&quot; instead of &quot;&lt;&quot; numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: #prevents 0 from being included, as it&#39;s between 1 and 100 pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: #&quot;if&quot; changed to &quot;elif&quot; so that both conditions are considered newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . Fixing the code below. What it does is mentioned in comments. Basically, it&#39;s a food menu. I decided to make it allow you to create an infinitely large order accounting for invalid inputs. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . I input my order and the total remained at zero. It seems like there isn&#39;t any code in this program to add the price of the items in the dictionary menu to the total price of the order. This is a matter of adding some code that is completely absent. . Please see the code comments to see all the things I changed as well as their purposes. . affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] #Capital and lowercase versions of all the responses are provided because this list was created before I knew how to force the string to be read as lower/uppercase menu = {&quot;Burger&quot;: 3.99, &quot;Fries&quot;: 1.99, &quot;Drink&quot;: 0.99} #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) total = 0 #price is defined later here just so that it is defined first ordered = False def finish(): #function to allow the user to order another item global fin print(&quot;Is your order complete?&quot;) msg = input() fin = msg.lower() #corrects for possible capitalized user response def finishcheck(): roundtotal = round(total, 2) #rounding to prevent certain sum errors with floats print(&quot;Your current total is $&quot; + str(roundtotal) + &quot;.&quot;) finish() #see just above if fin in affirmative: #using affirmative bank to understand user responses print(&quot;Understood.&quot;) return 0 #value to be read later (0 = stop) elif fin in negative: #same but with negative print(&quot;Understood.&quot;) return 1 #value to be read later (1 = continue) else: print(&quot;Invalid response.&quot;) finish() #repeating process when an invalid response is provided def order(): #defined as a function so that the process can be repeated global total global ordered for k,v in menu.items(): #reprinting the menu for each order print(k + &quot; $&quot; + str(v)) if ordered == True: print(&quot;What else would you like to order?&quot;) msg = input(&quot;Please select an item from the menu&quot;) item = msg.lower() if item == &quot;burger&quot;: #I probably should&#39;ve found a way to iterate this :/ total += 3.99 print(&quot;You ordered a burger.&quot;) ordered = True if finishcheck() == 0: return else: #using else to prevent a second instance of finishcheck() order() elif item == &quot;fries&quot;: total += 1.99 print(&quot;You ordered fries.&quot;) ordered = True if finishcheck() == 0: return else: order() elif item == &quot;drink&quot;: total += 0.99 print(&quot;You ordered a drink.&quot;) ordered = True if finishcheck() == 0: return else: order() else: #repeating the order process when an invalid input is provided print(&quot;We do not serve that here.&quot;) order() order() #code should add the price of the menu items selected by the user roundtotal = round(total, 2) #rounding to prevent certain sum errors with floats print(&quot;Your total is $&quot; + str(roundtotal) + &quot;. Thank you for choosing Python&#39;s Pub.&quot;) . Menu Burger $3.99 Fries $1.99 Drink $0.99 You ordered a burger. Your current total is $3.99. Is your order complete? Understood. Burger $3.99 Fries $1.99 Drink $0.99 What else would you like to order? You ordered fries. Your current total is $5.98. Is your order complete? Understood. Burger $3.99 Fries $1.99 Drink $0.99 What else would you like to order? You ordered a drink. Your current total is $6.97. Is your order complete? Understood. Your total is $6.97. Thank you for choosing Python&#39;s Pub. . I was dissatisfied with the check not being iterated, so I worked with my friend AJ to reverse-engineer and then understand the items() function. . import string #used later to capitalize #These two lists contain possible affirmative/negative responses (used later) affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] #Capital and lowercase versions of all the responses are provided because this list was created before I knew how to force the string to be read as lower/uppercase menu = {&quot;Burger&quot;: 3.99, &quot;Double Burger&quot;: 5.49, &quot;Fries&quot;: 1.99, &quot;Animal Fries&quot;: 2.79, &quot;Medium Drink&quot;: 0.99, &quot;Monster Drink&quot;: 1.49, &quot;Live Concert While You Eat&quot;: 499.99} total = 0 #price is defined later here just so that it is defined first ordered = False receipt = [] def finish(): #function to allow the user to order another item global fin print(&quot;Is your order complete?&quot;) msg = input() fin = msg.lower() #corrects for possible capitalized user response def finishcheck(): roundtotal = round(total, 2) #rounding to prevent certain sum errors with floats print(&quot;Your current total is $&quot; + str(roundtotal) + &quot;.&quot;) finish() #see just above if fin in affirmative: #using affirmative bank to understand user responses print(&quot;Understood.&quot;) return 0 #value to be read later (0 = stop) elif fin in negative: #same but with negative print(&quot;Understood.&quot;) return 1 #value to be read later (1 = continue) else: print(&quot;Invalid response.&quot;) finish() #repeating process when an invalid response is provided def ordercheck(): global total global ordered msg = input(&quot;Please select an item from the menu&quot;) item = string.capwords(msg, sep = None) for k,v in menu.items(): #for loop checks if input is one of the accepted dictionary keys if item == k: ordered = True if k == &quot;Fries&quot;: print(&quot;You ordered fries.&quot;) elif k == &quot;Animal Fries&quot;: print(&quot;You ordered animal fries.&quot;) else: print(&quot;You ordered a &quot; + k.lower() + &quot;.&quot;) total += v #receipt.append(v) return 1 def order(): #defined as a function so that the process can be repeated global ordered if ordered == False: print(&quot;--MENU--&quot;) for k,v in menu.items(): #reprinting the menu for each order print(k + &quot; $&quot; + str(v)) print(&quot;--&quot;) else: print(&quot;What else would you like to order?&quot;) if ordercheck() == 1: if finishcheck() == 0: return else: order() else: print(&quot;We don&#39;t serve that here.&quot;) order() order() roundtotal = round(total, 2) #rounding to prevent certain sum errors with floats print(&quot;Your total is $&quot; + str(roundtotal) + &quot;. Thank you for choosing Python&#39;s Pub.&quot;) . --MENU-- Burger $3.99 Double Burger $5.49 Fries $1.99 Animal Fries $2.79 Medium Drink $0.99 Monster Drink $1.49 Live Concert While You Eat $499.99 -- You ordered a double burger. Your current total is $5.49. Is your order complete? Understood. What else would you like to order? You ordered animal fries. Your current total is $8.28. Is your order complete? Understood. What else would you like to order? You ordered a monster drink. Your current total is $9.77. Is your order complete? Understood. What else would you like to order? You ordered a live concert while you eat. Your current total is $509.76. Is your order complete? Understood. Your total is $509.76. Thank you for choosing Python&#39;s Pub. .",
            "url": "https://drewreed2005.github.io/realdrew/identifyingerrorsnotes/",
            "relUrl": "/identifyingerrorsnotes/",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Work Watch Program Planning",
            "content": "Work Watch Overview . To recap the program purpose and what we have so far, the Work Watch is a program that times your work session and tells you when to take breaks. More precisely, the program lets you input a set of tasks you intend to complete and the expected duration for each so that the timer can tell you how on-track you are. You can also customize how frequently you want to take breaks based on the amount of time you have to work. You can input custom suggestions for what to do during breaks, though certain particularly ideal break activities will be recommended. You can also choose whether or not you want to see the timer counting up. . The reason we want to create this is that many studies have shown that taking frequent breaks during long work sessions greatly increases the quality of your work output. During these breaks, students who feel that they don’t have time to do activities like reading and exercising that supplement their learning will have the time to. . Work Watch UML Diagram . . This diagram shows what variables will be needed/used/modified during all stages of the Work Watch program. Let’s go a little more in depth. . Work Watch Startups, Default Values and Constant Variable Checks . When the Work Watch program is first opened, the file deltavar.py is opened and default values completely overwrite whatever settings exist from previous uses to ensure that, once the timer has been used and stopped, it can be reset and used again. . These default values reflect the default settings provided in the diagram. . watchon = False totaltime = False secs = 0 mins = 0 showtimer = False anames = [&quot;Work&quot;] adurs = [30] breakintv = 25 breakdur = 15 notifintv = 20 alarmtone = alarms[1] #Sound effects TBD; alarms is a list of .mp3 files discr = [placeholder] #List of discrepancies in anticipated times, used later . So break time can continue to occur over continuous intervals, a variable called ptimerstart will take into account when the timer was last played after a periodic break. The difference between this time and the break interval will determine when breaks occur. . If the user does not change these values through means explained below, they will dictate the behavior of the timer. When the timer starts, a while loop will ensure that the timer is constantly going up until breaks occur (mentioned later). . The code below shows what will be done to constantly check variables throughout the timer process. The inctotaltime() function and its associated variables will be used to determine discrepancies in the future. . def inctotaltime(): global totalsecs global totalmins totalsecs += 1 totalmins = totalsecs / 60 time.sleep(1) inctotaltime() while totaltime == True: inctotaltime() def inctime(): global secs global mins secs += 1 mins = secs / 60 notifcheck() #Calculates if a notification should be provided breakcheck() #Calculates if it&#39;s break time time.sleep(1) inctime() while watchon == True: inctime() . User Inputs (Pre- and Post-Start) . A series of functions listed in “User Input (functions)” will register user inputs in place of default settings. Once the timer is initiated, they will overwrite the defaults and dictate the behavior of the timer. . Once the timer has started running, the “Pause/Play Timer,” (not in UML chart but will exist) “Break Time,” “Task Complete,” and “End Timer” buttons will complete the corresponding functions described in the top-right box of the diagram. . Watch End and Reflection . Keeping in mind the discrepancies between anticipated task completion times and actual completion times, anticipated break times and actual break times, and unexpected pauses and breaks, the quality and consistency of the user’s work session is determined mathematically. . The more unplanned break time the user spent and the longer the duration of certain task completion sessions than anticipated, the more unproductive the session is considered. However, the opposite is also true: if the user completes a task faster than the anticipated time, takes shorter breaks or takes breaks at more distant intervals, the work session will be considered more productive. However, if too few breaks are taken, the work session may be considered relatively unhealthy. . Frontend Wire Frame Diagram . . Our Frontend Designer Jagger Klein created this diagram to show the UI of the Work Watch. The text of the menu options can be a bit uncertain, but the plan is to make them buttons which reveal a submenu when hovered over/clicked to edit certain settings. . The “Timer Length” block will more accurately contain a customizeable list of assignments and anticipated assignment durations. The “Customize Timer Look” will contain setting such as selecting the visibility of the timer, the color or font of notifications, break alarm tones, and the timer itself may have other looks (digital segmented numbers, clean Serif numbers, etc.). The “Time Break” menu encompasses settings regarding the intervals between breaks, the duration of breaks, and the intervals between time notifications. The “Time Points” menu encompasses the theoretical idea of creating an incentive system along with the timer where you can use points to unlock new looks or something. At the moment, this is an extra feature to be added if possible. . The “STOP” and “Start” buttons represent the “END TIMER” and “PLAY/PAUSE TIMER” buttons respectively, and the “BREAK TIME” button would normally go in the middle. The latter wasn’t included because the idea for a break-specific button came about in the UML Diagramming phase, and this vision was not communicated as both assignments were created simultaneously. With these resources combined, we’ll be able to create a more cohesive idea of what the UI of the program will be like. . This Week’s SCRUM Board Sub-Entry and Assignments . A link to it can be found here. Considering this the first week of work on the Work Watch, current progress has been marked and taken into account. . An overarching SCRUM Board has been created to organize these various weeks of progress into a single entity to document our work thoroughly. . The assignments for each role this week (specifically in reference to the Work Watch, not including the “Deployment” individual tasks) are also listed on this week’s board. As you can see, all role-specific tasks have been completed. . Below is a new entry to the Program Design assignment one week later. . Create Task Requirements . For this week, we were asked to address how our program meets the College Board create task requirements. . Project Purpose . See the top of this page for project purpose. In short, it’s to regulate a work session by advising when to take breaks and what to do during those breaks. . Data Abstraction and Managing Complexity . Much of the idea for this program is algebra based. When breaks will be advised is a mathematical formula (explained briefly in sections above). The timer itself runs on a while loop, turned on and off by a True/False state check. . Lists are used to organize the names and durations of a user’s tasks. By appending them when input, an unlimited number of entries can be created without any clutter. . Procedural Abstraction . Procedural abstraction and data abstraction kind of go hand in hand for this program, but one more easily-defined example is the current idea for the code that makes breaks occur. The duration of a break is directly based on the either preset or custom duration of the user’s break, defined as the variable breakdur. The break function breaktime(duration) includes the placeholder duration to be replaced with breakdur when run for each break. . Algorithm Implementation . The timer itself iterates constantly, checking if it should give a special response after each iteration (break, notification, etc.). . Testing . Since much of the program is based on user input, invalid user inputs (for example, if they input a string rather than an integer) are fully accounted for. The best way to see this is with the task creation process. If the task duration is not provided or is input as a string/decimal, it cannot be appended to the list of tasks until it is an integer. If no task name is provdied, it is automatically named “Untitled Task” on the timer. Things like this show understanding of possible unintentional actions taken by the user. .",
            "url": "https://drewreed2005.github.io/realdrew/workwatchddplan/",
            "relUrl": "/workwatchddplan/",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "College Board Multiple Choice Quizzes",
            "content": "College Board Quizzes . As a requirement for this week (“Deployment”), we have been asked to show evidence that we have completed the multiple-choice College Board quizzes assigned to us. . Screenshot of Completed Quizzes . . As you can see, I got an unfortunate total of two questions wrong on these quizzes. I go into why I got them wrong below. In short, one is a matter I’m still confused about and the other was an oversight that I am completely at fault for. . Confusion . For the most part, the quizzes have been fairly straight-forward. The only sort of confusion I’ve met have been regarding the answer choices and the given program examples. . . For example, in this case, answers “C” and “D” cannot be correct because they do not recognize that a copy of numList is being returned while numList itself isn’t being edited. Both “A” and “B” appear to be wrong too, however: “A” is correct that j must be a number greater than or equal to zero, but it doesn’t necessarily have to be a value less than k for the list swap to occur correctly (though it cannot be equal to k); and “B” is correct that both j and k must be less than LENGTH(numList) because its length is one greater than the greatest index of the list, but the values do not have to be greater than or equal to one (instead, it should be zero because of zero-based index numbering). . I ended up deciding on “A” because the question was talking about code documentation rather than how exactly the code works. Maybe the programmer wants to express that j should be less than k simply because of how the rest of the program is intended to work. This makes the comment not necessarily an incorrect statement. However, the statement made about j and k in “B” is just imprecise, as their values can be equal to zero and, if j and k were equal to each other, no swap would occur, so this range of possible index values is faulty. However, it is important to recognize that this comment specified that the two values must be less than LENGTH(numList), a detail that isn’t included in “A”. . The answer ended up being “B” for the exact reason I explained it could have been. I likely should have recognized that “B” was arguably more correct with its recognition of LENGTH(numList). I’m curious whether or not the coding language used in this question is zero-based, as I’m not exactly sure what it’s supposed to be. Regardless, the documentation in both cases is incomplete for different reasons. It is important for the documentation in “B” to recognize as well that j and k should not be equal to each other, or else no swap will occur. . . This question is an honest mistake on my part. I seem to have disregarded that DISPLAY y would only be recognized if y was True. I’ll be more careful when selecting answers next time. .",
            "url": "https://drewreed2005.github.io/realdrew/collegeboardmcq/",
            "relUrl": "/collegeboardmcq/",
            "date": " • Sep 29, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Big Idea 1 - Program Design and Development Notes",
            "content": "What is Program Design? . Program design entails frontend (UI) and backend (code), but also all of the individual parts and how they contribute to the program purpose(s). Designing a program means combining all of these aspects of a program. . What is the process? (Daily Video 1) . Every program starts with an idea. Programmers sometimes go step-by-step, though other times it can be a more exploratory process. Programmers note the purpose of their program, its requirements, its constraints, and its user’s concerns and interests. The latter may be understood best with surveys and forms of user testing. . After reflecting and investigating, programmers… . Brainstorm their idea | Storyboard the program | Plan the user experience | Lay out the user interface | Organize into modules | Develop a testing strategy | . Programmers then decide on program requirements that… . Describe program behavior | List user interactions | Plan the user experience | Lay out the user interface | Organize into modules | Develop a testing strategy | . Program specifications must outline all requirements. A prototype is then created, frequently in an incremental process so that developers can define individual modules of the program. . The program is then tested, both in a micro and a macro level. Tests provide feedback to developers, upon which they reflect and react accordingly. . Who is involved in the process? (Daily Video 2) . Programs are developed in teams. Parts of or individuals in these teams work on certain functional components. It is important to credit these individuals and what they complete so that they can receive the credit they deserve. This can be done with comments within the program. . These developers very often borrow code from other developers who aren’t directly a part of the team. These people still need to be credited, as the code is the intellectual property of the original author. The program documentation should include that person’s name, as well as the source from which it was found. This is like a code bibliography. . How is documentation used when designing a program? (Daily Video 3) . Program documentation describes the overall program and lists specifications and requirements. This documentation often includes functions/procedures/methods to be used in the program, events and their corresponding outputs, details about program development, how other programs react with this program, and may even include segments of the actual code. It is important to list contributors to the program in documentation. . The documentation process occurs over time. . At the beginning List specifications During development Keep track of progress After completion To document the process Documenting throughout can improve programming efficiency, the refinement of the program, and the programmers’ ability to respond to bugs. . Typically, documentation comes in the form of comments within the code which do not affect the code itself. In Python, comments are made using # before a string of text. Java (matched similarly by Javascript, C++, and Swift) uses // for single line comments, but /*[text]*/ can be used for multiple-line comments and /**[documentation text]*/ can be used for specifically multiple-line documentation text. HTML comments are a bit more involved, following this format: &lt;!--[text]--&gt;. . Documentation is an important step not only for keeping track of your own progress, but also for collaborating with other programmers who do not have the specific knowledge of what you have completed or what you intend to do with a certain segment of code. . College Board Quizzes . As a requirement for this week (“Deployment”), we have been asked to show evidence that we have completed the multiple-choice College Board quizzes assigned to us. . Screenshot of Completed Quizzes . . As you can see, I got an unfortunate total of two questions wrong on these quizzes. I go into why I got them wrong below. In short, one is a matter I’m still confused about and the other was an oversight that I am completely at fault for. . Confusion . For the most part, the quizzes have been fairly straight-forward. The only sort of confusion I’ve met have been regarding the answer choices and the given program examples. . . For example, in this case, answers “C” and “D” cannot be correct because they do not recognize that a copy of numList is being returned while numList itself isn’t being edited. Both “A” and “B” appear to be wrong too, however: “A” is correct that j must be a number greater than or equal to zero, but it doesn’t necessarily have to be a value less than k for the list swap to occur correctly (though it cannot be equal to k); and “B” is correct that both j and k must be less than LENGTH(numList) because its length is one greater than the greatest index of the list, but the values do not have to be greater than or equal to one (instead, it should be zero because of zero-based index numbering). . I ended up deciding on “A” because the question was talking about code documentation rather than how exactly the code works. Maybe the programmer wants to express that j should be less than k simply because of how the rest of the program is intended to work. This makes the comment not necessarily an incorrect statement. However, the statement made about j and k in “B” is just imprecise, as their values can be equal to zero and, if j and k were equal to each other, no swap would occur, so this range of possible index values is faulty. However, it is important to recognize that this comment specified that the two values must be less than LENGTH(numList), a detail that isn’t included in “A”. . The answer ended up being “B” for the exact reason I explained it could have been. I likely should have recognized that “B” was arguably more correct with its recognition of LENGTH(numList). I’m curious whether or not the coding language used in this question is zero-based, as I’m not exactly sure what it’s supposed to be. Regardless, the documentation in both cases is incomplete for different reasons. It is important for the documentation in “B” to recognize as well that j and k should not be equal to each other, or else no swap will occur. . . This question is an honest mistake on my part. I seem to have disregarded that DISPLAY y would only be recognized if y was True. I’ll be more careful when selecting answers next time. . Applying Program Design and Development . This can be seen in another Notebooks post in which I plan the Work Watch project from the SCRUM Master point of view. Link here. .",
            "url": "https://drewreed2005.github.io/realdrew/programdesignnotes/",
            "relUrl": "/programdesignnotes/",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "The Work Watch - Roles, Purpose and More Information",
            "content": "The Team . Our table has decided to go by the name “The Watchers,” named after this project. The four of us as a collective will be referred to by this name throughout the post. . Roles and Weekly Plan . Drew Reed will be playing the role of SCRUM Master, meaning he will manage assignments for each group member, update the SCRUM Board, and oversee the completion of tasks. . Devon Shepherd will be playing the role of Backend Developer. His focus will be on creating the background code (variable management, functions, iteration, etc.). . Jagger Klein will be playing the role of Frontend Developer. His focus is the part of the program that users see, designed using HTML, CSS, etc. . Trent Cardall will be the swing, who will play the role of either Backend Developer or Frontend Developer depending on the goals agreed upon during the weekly/daily meeting. . SCRUM Board Hack . We have created a SCRUM Board which links to other issues which record the progress during a given week of work. Since the process of creating the program has only just started, it does not have any progress currently. The framework has been prepared for future use. . Click the colored text to access the SCRUM Board and the Week 1 Progress Report. . “Work Watch” . The “Work Watch” is a customizable timer which runs in the background of a user’s work process. Based on the details the user inputs, the timer declares when to take breaks and suggests what the user should do during the break. . Program Purpose . The purpose of the “Work Watch” is to promote taking short breaks during long bouts of work, which has shown to be beneficial to the quality of work output as well as to mental health. . As Laurie Santos discussed in her speech “Psychology and the Good Life,” many students feel as if they do not have enough time to do the things that supplement and improve their education, such as reading and exercising. Our timer will give healthy suggestions for break time activities (such as the previous) to further promote the health of the user. . To make long work sessions less arduous and provide the user a sense of progress, he or she will be able to input the tasks they intend to complete along with a rough estimate of the duration it will take to complete the tasks. These tasks will be shown as complete on the list when completed. If the user wishes, the program may send out notifications when certain intervals in the expected completion time have been met, implying how far along in the process the user should be at the time. . Second Screen (HTML and CSS) . .",
            "url": "https://drewreed2005.github.io/realdrew/wwinfo/",
            "relUrl": "/wwinfo/",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Javascript Notes",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . . console.log(&quot;Hello, World!&quot;); . Hello, World! . Javascript can do much of what Python can do, but with compeltely different syntax and requirements. The equivalent of def in Python, for example, is function. . function logIt(output) { // Defining logIt console.log(output); } msg = &quot;Hello again, world!&quot; logIt(msg); . Hello again, world! . Like Python, Javascript is a loosely-typed language. What type of information is stored in a variable is determined at runtime. . function logItType(output) { if (typeof output === &quot;object&quot;) { console.log(output + &quot; is an &quot; + typeof output); } else { console.log(output + &quot; is a &quot; + typeof output); } } console.log(&quot;Looking at dynamic nature of types in JavaScript (from APCSP)&quot;) logItType(&#39;&quot;This thing I wrote&quot;&#39;); logItType(2.7); logItType([1, 2, 3]); // &quot;Object&quot; is generic; it is similar to Python &quot;List&quot; . Looking at dynamic nature of types in JavaScript (from APCSP) &#34;This thing I wrote&#34; is a string 2.7 is a number 1,2,3 is an object . Below, I&#39;ve been so plagiarinspired by the Javascript tutorial that I&#39;ve made a function of the same name that assigns different information to an object Person. I&#39;ve then put in the role setting function (using prototype to associate a method with the function), toJSON to then print the data later. . However, variables have been redefined to fit a new purpose for the table coming later. . // define a function to hold data for a Person&#39;s scores function Person(name, tscore, avscore) { this.name = name; this.tscore = tscore; this.avscore = avscore; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, tscore: this.avscore, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr. Mortensen&quot;, &quot;N/A&quot;, &quot;N/A&quot;); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); . [object Object] is an object {&#34;name&#34;:&#34;Mr. Mortensen&#34;,&#34;tscore&#34;:&#34;N/A&#34;,&#34;role&#34;:&#34;Teacher&#34;} is a string . Now, we&#39;re going to look at last week&#39;s scores, averaging the peer scores into one value and taking the teacher score as its own variable. We&#39;ll put define those scores depending on the person in question being scored, and display them in a pretty table. . The table will have a DIFFERENT design from the one on the Javascript Tutorial page to show some amount of fluency with HTML. . // This is defining the scores of each of the people var students = [ new Person(&quot;Drew&quot;, &quot;2.7&quot;, &quot;N/A&quot;), new Person(&quot;Devon&quot;, &quot;2.6&quot;, &quot;2.6&quot;), new Person(&quot;Jagger&quot;, &quot;2.6&quot;, &quot;2.63&quot;), new Person(&quot;Trent&quot;, &quot;2.7&quot;, &quot;2.7+&quot;), ]; // This defines function Scoredata(teacher, students){ // 1 teacher, many student // Table begins with teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.scoredata = [teacher]; // Students get added to table this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.scoredata.push(student); }); // build json/string format of the data this.json = []; this.scoredata.forEach(person =&gt; this.json.push(person.toJSON())); } // make a source of info from the student data above thistable = new Scoredata(teacher, students); // define an HTML conversion &quot;method&quot; associated with the data Scoredata.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:purple;&quot; + &quot;border: 4px solid orange;&quot; + &quot;box-shadow: 0.6em 0.6em 0em white;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Name&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Teacher Score&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Student Score&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;u&gt;&quot; + &quot;Role&quot; + &quot;&lt;/u&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array is iterated for (var row of thistable.scoredata) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.tscore + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.avscore + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(thistable._toHtml()); . NameTeacher ScoreStudent ScoreRole . Mr. Mortensen | N/A | N/A | Teacher | Drew | 2.7 | N/A | Student | Devon | 2.6 | 2.6 | Student | Jagger | 2.6 | 2.63 | Student | Trent | 2.7 | 2.7+ | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://drewreed2005.github.io/realdrew/javascriptnotes/",
            "relUrl": "/javascriptnotes/",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Week 4 Review Ticket",
            "content": "This Week’s Goals . This week, we were asked to review the CollegeBoard Big Idea 1.1 videos about Collaboration, set up customizeable Fastpages and Python servers in our machines, and watch and take note of the Focus and Habits speech. I have made sure to complete all of these tasks. . Fastpages Server and Python Web Server Video . Click here to access the video. In this video, I show the functionality of both of these servers and review the process of making and committing edits to them. . I tried my best to include clips and dialogue which show understanding of what I’m doing and how one could make other, larger edits. One of the suggestions for the video was to encorporate learnings from the Collaboration and Focus and Habits videos, but due to the constraint of the video being roughly 1 minute. . Feel free to leave comments either on this Fastpages post or the liked YouTube video. . Big Idea 1 - Collaboration Notes . Click here to access my notes. I was unable to complete the multiple choice quiz on the CollegeBoard website because I finalized these notes on September 19th, the day we have off of school, and by then, the MCQ was already inaccessible. . To make up for it, I took a pretty solid amount of notes. Rather than just repeating what was in the video, I included some of my own known instances of collaboration in a programming space and connected what I learned to my previous experience in the class. . I’m sure these notes are enough to answer any question on the MCQ. . Focus and Habits Notes . Click here to access the notes. In this .docx page, I go over all of the main points discussed in the video more concisely and discuss how I will take (or already have taken) steps to better my experience as a student. . Back a couple weeks ago, the Focus and Habits video was linked as an assignment before being removed later on in the week. As a result, I already took notes on the video a while ago, which is why the date is set a while back on the page. . Independent Coding . This week, I decided to separate my progress on my independent RPG project onto another repository. Rather than applying what was in my notes to further my progress on the actual story, I ended up mostly focusing on allocating variables and functions to other folders and files in the repository in order to declutter. Having everything concentrated into a single file made it difficult to code. . Separating these things did, at times, cause me trouble. After some significant independent research and learning to make creative use of the open() and write() commands, I managed to create a menu which allows a player to customize the rate at which characters are output (using the video-game-like texttype() or textscroll() functions), the duration between the generation of lines, and the color of narration text throughout the game. At first, the values kept being reset to the default, and I figured out that it was because I was calling functions from the textstuff file rather than the file in which the variables are changed, which makes the file only read the initial values rather than the edited ones. . I’m also considering how I will incorporate the music in the game. I’m currently in the process of that, and hopefully by next week, I’ll have that framework and the framework of the main menu finished. . List of Objectives Met . Fastpages local server is up and running, and edits work correctly (see video) | Python web server is up and running, and has been edited in multiple places (see video) | Notes have been taken on the Collaboration videos | Notes have been taken on the Focus and Habits video | One-minute video has been created to show the first two functions and prove understanding of this week’s Career Tech expectations | . More to come! Thank you. .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/18/week4reviewticket.html",
            "relUrl": "/2022/09/18/week4reviewticket.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Big Idea 1 - Collaboration Notes",
            "content": "Why is it important? . Coders are responsible for working together with many other branches of teams. This is quite obvious, but what is the importance of having a fluid chain of communciation between these branches? . Polish . Coders create and polish a program, but they must rely on artists, business professionals, and peoples with various other roles to create a cohesive product. . There’s a reason programs like Facebook and Instagram are so successful, and it certainly isn’t entirely due to the team that codes it. . Innovation . The teacher in the video talks about how Kensuke Tanabe, creator of “Doki Doki Panic!” (the game that went on to be reskinned and called “Super Mario Bros. 2” in the United States), created his platformer with the ability to have both vertical levels and horizontal levels, but not at the same time. After working with Nintendo president Shigeru Miyamoto on “Super Mario Bros. 3,” they managed to create a system that allowed for both vertical and horizontal levels at the same time. . “Super Mario Bros. 3” actually contains significantly less diversity of verticality/horizontality than “Super Mario Bros. 2,” so I think this is a poor example. I think a better way to see how a video game saved and innovated is by looking at Pokémon Gold and Silver on the GameBoy Color. . After a long development process, the whole Pokémon series looked to be on a tightrope as Pokémon Gold and Silver’s code was a buggy mess, and the ambitious things they wished to include in the game seemed impossible to fit on the tragically small GameBoy Color cartridges. Desperate, they turned to Hal Laboratories CEO Satoru Iwata to see if he could help them. Very quickly, he managed not only to figure out exactly the problems with Gold and Silver’s code and how to fit everything in, but he also discovered and documented how the code of Pokémon Red and Green (the previous games) could be efficiently translated for overseas audiences, another problem GameFreak was facing at the time. Through collaboration, Pokémon, the highest grossing media franchise of all time, managed to stay afloat in a high-pressure, nearly hopeless environment. . What to Remember . It is important to have people of diverse perspectives and experiences to create a solid product, and in order to prevent a development team from turning into an echo chamber. . How to Collaborate Effectively . There are many ways for coders to effectively collaborate. Here are a few. . Pair Programming . This is something we’ve done a lot in class. When pair programming, one person writes code and the other watches the lines of code to ensure that they are correct. . This helps us to catch small errors and understand that all people are fallible when coding. . Think-Pair-Share . This is the process of considering possible solutions to a prompt, discussing it with a partner to ensure its promise as a solution, and then share the discussed solution with others (the class, the table, the teacher, etc.). . This helps to ensure the quality of our solutions. A solution may work, but it may at the same time be inefficient or overly complex. Simpler is typically better. . Leave Comments in Code . This is great for collaboration but it’s also something someone should try to do whenever coding. . Using # next to a string of text to leave an instructional comment not only helps those looking at your code understand what the purpose of certain lines or functions is, but also helps remind you of your own train of thought so that coding is a less messy process. . These comments also allow you to acknowledge code or media taken from other sources. . Applying Collaboration . Collaboration can be done with sites such as repl.it or Github. These sites allow you to code together on something at the same time and share documents/programs with one another. . Asking the people around you, especially friends or family, to help test run your code is a great way to see an impartial, non-coder vision of a program. . How Have I Used Collaboration? . In my experience, I have more often used collaboration to help fix bugs (like we can see in the Pokémon Gold and Silver example) than to innovate and create a program that is truly ground-breaking. . Just this week, as my Python and Fastpages servers were giving me the same problems over and over, I spoke with around five different students to try to understand the problems I was having. At my table, at least one person had experienced one of the problems I was having, and by figuring out how they ended up solving those problems, I was able to inch closer to problems being fixed. . Reaching out to other students with more experience than me helped me to stop my Docker packages from reading as “Dead”, preventing me from creating my Fastpages server. It allowed me to see how many others experienced the problem of the flask and flask_login not being recognized as modules, and hear different perspectives and solutions to the problem. . Ultimately, going to the teacher is what finally solved my problems, but that in itself is a form of collaboration. I think this week was overall a great example of the strengths of collaboration. . Certain concepts we learned in class like for loops were difficult for me to understand, and in those cases, I often collaborated with the people around me (particularly those at my table) to help me get a grip of it. . The for-fun text-based RPG I’m making is also the product of a lot of collaboration. Though I’m solely responsible for the code, I’ve asked various people for their thoughts on the possible mechanics and story of the game and I feel that it has allowed me to come up with a truly unique product. .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/18/collaborationnotes.html",
            "relUrl": "/2022/09/18/collaborationnotes.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Week 3 Review Ticket",
            "content": "Summary of This Week’s Goals . This week, we were tasked to make an app with AppLab on Code.org (Javascript), review and understand the expectations of CollegeBoard Create Performance Tasks, and reflect understanding of how we can do well on the AP Exam based on the article “How I Got a 5!” by Bria. . This Week’s Progress . Instead of going case by case this week (since there are only two BIG “cases”), let’s go by each learning target of the week and show how the learning goals have been met. . AppLab Program with Javascript . I created a Pokémon quiz with AppLab. There are 15 questions in order of the associated Pokémon generation covered in the question. For each question, the quiz-taker inputs his or her answer by clicking an image or a box with text in it (depending on the question). If the user clicks the correct answer, a “That’s right!” screen is displayed and the correct answer (cor) value is increased by 1; if the user clicks an incorrect answer, a “Not quite!” screen is displayed and the cor value goes unaltered. At the end, based on the cor value, elements are shown corresponding to the cor value and its reflection of your score. Flavor text is provided based on your score beneath the direct display of your results. . This program made use of onEvent, if statements, and showElement. It is relatively simple and compact, and serves its purpose of reflecting the user’s knowledge of Pokémon efficiently. . CollegeBoard Create Review Task Expectations . In my AppLab Quiz Jupyter Notebooks post (click here), I review how my quiz fits the six rows of the CollegeBoard Create Task expectations rubric. Rather than going over it all here, just check the link. . How I Got a 5! . To show understanding of what was covered in the article and in order to fit a Hack mentioned at the end of the page, I created a five-question multiple choice quiz about it. . Rather that copying the format of either of my previous quizzes, this quiz was made completely from scratch by me. Since we didn’t have quite as much time this week to have a bunch of topics to learn about, I decided I might as well look back on previous topics from last week that I didn’t quite understand. Mainly, this was loops. So, unlike my previous two quizzes, this one is done almost entirely with a single loop. . Independent Coding . I’ll use this section to cover extra coding I did for fun or to gain better understanding of the things we’ve studied so far. All of what was done this week was working toward the creation of an ambitious text-based RPG made entirely with Python. . In pursuit of a smooth music loop system (allowing for an intro segment before the loop) in the background of other functions, I have figured out how to do just about everything aside from make a smooth loop. I’ve worked with timers, the time.sleep command, pygame and mixer and subprocess to try to find a solid solution and only pygame seems to offer a potential strong solution. . I’ve also found a way to print colored text and italics text with Python. I’ve combined this with a couple functions I’ve made to do a common video game style text scrolling print (where text is printed character by character, but quickly). By defining these text colors and scroll speeds as variables, I’ll be able to make a settings menu within which you’ll be able to alter these variables based on personal preferences. How fun. . Not gonna link to this code, though…no spoilers! . Summary . Overall, this is one of my shorter review tickets. I expressed my understanding of these various topics in a few large projects rather than a bunch of little 10-minute posts or programs. I feel that I understand everything covered this week pretty well. .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/11/week3reviewticket.html",
            "relUrl": "/2022/09/11/week3reviewticket.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "How I Got a 5 Quiz",
            "content": "cor = 0 questions = [ &quot;1. When watching CollegeBoard videos, what should you do? n ta) Listen to music n tb) Work on homework from other subjects n tc) Take notes n td) Work on your fastpages site&quot;, &quot;2. When taking practice tests, what should you NOT do? n ta) Look up questions you don&#39;t know n tb) Make test corrections when finished n tc) Take note of the prompt and format of the questions n td) Time yourself&quot;, &quot;3. CollegeBoard videos are fine and all, but where else can you find videos? n ta) YouTube n tb) Khan Academy n tc) Opencast n td) Echo360&quot;, &quot;4. What are the conditions of the test? n ta) 1 hour, 40 MC n tb) 1 hour, 60 MC n tc) 1 hour and 30 minutes, 80 MC n td) 2 hours, 70 MC&quot;, &quot;5. On the Create Task, what should you try to do? n ta) Make a basic, easy-to-understand program like a GPA calcualtor n tb) A program which meets all Create Task rubric points n tc) Ignore past examples on CollegeBoard n td) Copy code from other people&quot; ] def question_loop(i): global cor global quesnum if i == 0: quesnum = 0 if i &lt; len(questions): record = questions[i] global add add = ask_question(record) if add == 1 or add == 0: cor += add elif add == 2: print(&quot;That is an invalid response! Try again.&quot;) question_loop(i) else: print(&quot;ERROR&quot;) return i += 1 quesnum = i question_loop(i) return def ask_question(question): print(question) global ans ans = input() r = ans_check() return r def ans_check(): if quesnum == 0: if ans == &quot;a&quot; or ans == &quot;A&quot; or ans == &quot;a)&quot; or ans == &quot;A)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;c) Take notes&quot;.&#39;) return 0 elif ans == &quot;b&quot; or ans == &quot;B&quot; or ans == &quot;b)&quot; or ans == &quot;B)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;c) Take notes&quot;.&#39;) return 0 elif ans == &quot;c&quot; or ans == &quot;C&quot; or ans == &quot;c)&quot; or ans == &quot;C)&quot;: print(&#39;Excellent job, &quot;c)&quot; is correct!&#39;) return 1 elif ans == &quot;d&quot; or ans == &quot;D&quot; or ans == &quot;d)&quot; or ans == &quot;D)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;c) Take notes&quot;.&#39;) return 0 else: return 2 if quesnum == 1: if ans == &quot;a&quot; or ans == &quot;A&quot; or ans == &quot;a)&quot; or ans == &quot;A)&quot;: print(&#39;Excellent job, &quot;a)&quot; is correct!&#39;) return 1 elif ans == &quot;b&quot; or ans == &quot;B&quot; or ans == &quot;b)&quot; or ans == &quot;B)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;a) Look up questions you don &#39;t know&quot;.&#39;) return 0 elif ans == &quot;c&quot; or ans == &quot;C&quot; or ans == &quot;c)&quot; or ans == &quot;C)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;a) Look up questions you don &#39;t know&quot;.&#39;) return 1 elif ans == &quot;d&quot; or ans == &quot;D&quot; or ans == &quot;d)&quot; or ans == &quot;D)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;a) Look up questions you don &#39;t know&quot;.&#39;) return 0 else: return 2 if quesnum == 2: if ans == &quot;a&quot; or ans == &quot;A&quot; or ans == &quot;a)&quot; or ans == &quot;A)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) Khan Academy&quot;.&#39;) return 0 elif ans == &quot;b&quot; or ans == &quot;B&quot; or ans == &quot;b)&quot; or ans == &quot;B)&quot;: print(&#39;Excellent job, &quot;b)&quot; is correct!&#39;) return 1 elif ans == &quot;c&quot; or ans == &quot;C&quot; or ans == &quot;c)&quot; or ans == &quot;C)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) Khan Academy&quot;.&#39;) return 1 elif ans == &quot;d&quot; or ans == &quot;D&quot; or ans == &quot;d)&quot; or ans == &quot;D)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) Khan Academy&quot;.&#39;) return 0 else: return 2 if quesnum == 3: if ans == &quot;a&quot; or ans == &quot;A&quot; or ans == &quot;a)&quot; or ans == &quot;A)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;d) 2 Hours, 70 MC&quot;.&#39;) return 0 elif ans == &quot;b&quot; or ans == &quot;B&quot; or ans == &quot;b)&quot; or ans == &quot;B)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;d) 2 Hours, 70 MC&quot;.&#39;) return 0 elif ans == &quot;c&quot; or ans == &quot;C&quot; or ans == &quot;c)&quot; or ans == &quot;C)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;d) 2 Hours, 70 MC&quot;.&#39;) return 1 elif ans == &quot;d&quot; or ans == &quot;D&quot; or ans == &quot;d)&quot; or ans == &quot;D)&quot;: print(&#39;Excellent job, &quot;d)&quot; is correct!&#39;) return 1 else: return 2 if quesnum == 4: if ans == &quot;a&quot; or ans == &quot;A&quot; or ans == &quot;a)&quot; or ans == &quot;A)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) A program which meets all Create Task rubric points&quot;.&#39;) return 0 elif ans == &quot;b&quot; or ans == &quot;B&quot; or ans == &quot;b)&quot; or ans == &quot;B)&quot;: print(&#39;Excellent job, &quot;b)&quot; is correct!&#39;) return 1 elif ans == &quot;c&quot; or ans == &quot;C&quot; or ans == &quot;c)&quot; or ans == &quot;C)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) A program which meets all Create Task rubric points&quot;.&#39;) return 1 elif ans == &quot;d&quot; or ans == &quot;D&quot; or ans == &quot;d)&quot; or ans == &quot;D)&quot;: print(&#39;I &#39;m sorry, that is incorrect! nWe were looking for &quot;b) A program which meets all Create Task rubric points&quot;.&#39;) return 0 else: return 2 question_loop(0) per_score = (cor / 5) * 100 print(&quot;You scored &quot; + str(cor) + &quot;/5! That&#39;s &quot; + str(per_score) + &quot;%.&quot;) if cor &lt;= 3: print(&quot;Unfortunately, you need 80.0&quot; + &quot;%&quot; + &quot; or more to pass the quiz. nPlease review the &quot;How I Got a 5! &quot; article on the APCSP page and try again.&quot;) else: print(&quot;You passed! Congratulations! Now it&#39;s time to pass the real test...&quot;) . 1. When watching CollegeBoard videos, what should you do? a) Listen to music b) Work on homework from other subjects c) Take notes d) Work on your fastpages site Excellent job, &#34;c)&#34; is correct! 2. When taking practice tests, what should you NOT do? a) Look up questions you don&#39;t know b) Make test corrections when finished c) Take note of the prompt and format of the questions d) Time yourself I&#39;m sorry, that is incorrect! We were looking for &#34;a) Loop up questions you don&#39;t know&#34;. 3. CollegeBoard videos are fine and all, but where else can you find videos? a) YouTube b) Khan Academy c) Opencast d) Echo360 Excellent job, &#34;b)&#34; is correct! 4. What are the conditions of the test? a) 1 hour, 40 MC b) 1 hour, 60 MC c) 1 hour and 30 minutes, 80 MC d) 2 hours, 70 MC Excellent job, &#34;d)&#34; is correct! 5. On the Create Task, what should you try to do? a) Make a basic, easy-to-understand program like a GPA calcualtor b) A program which meets all Create Task rubric points c) Ignore past examples on CollegeBoard d) Copy code from other people Excellent job, &#34;b)&#34; is correct! You scored 4/5! That&#39;s 80.0%. You passed! Congratulations! Now it&#39;s time to pass the real test... .",
            "url": "https://drewreed2005.github.io/realdrew/howigota5quiz/",
            "relUrl": "/howigota5quiz/",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "AppLab Quiz",
            "content": "What is it? . It&#39;s a quiz. But what&#39;s the topic? . After some deliberation, I&#39;ve decided on Pokémon. . Why Pokémon? . Well, at first I decided on SpongeBob, since I know a lot about that too. However, Pokémon is a gold mine of interesting trivia, whereas a SpongeBob quiz would mostly boil down to &quot;Have you seen this episode?&quot; or &quot;Did you catch this tiny detail?&quot; Where, at first, I would think &quot;What is Mr. Krabs&#39;s middle initial?&quot; for Spongebob (it&#39;s &quot;H.&quot;, by the way), with Pokémon, I could ask &quot;What did the MissingNo. glitch NOT do to your save file?&quot; or &quot;What was the first Pokémon ever designed?&quot; or &quot;What is the first Pokémon in the Generation 5 Pokédex?&quot; So many interesting questions... . Brainstorming Questions . This is the non-code part, so I won&#39;t spend an hour explaining why I asked what I did. I will say, however, that no questions about the Pokémon anime series have been asked, and I have made sure to include some trivia about each of the eight Pokémon generations (currently). Here they are in the form of a list (no answers for you!): . What was the first Pokémon design ever created? (Pikachu, Rhydon, Clefairy, or Bulbasaur?) | What is the canonical name of the Pokémon Red and Blue protagonist? (Ash, Satoshi, Red, or Blue?) | What are some properties of the famous Generation 1 glitch Pokémon &quot;MissingNo.&quot;? (The number of items in the sixth bag slot increases by 128 after the encounter, your Hall of Fame data is corrupted after the encounter, it can be encountered indefinitely, or its appearance and forms can be altered based on your Trainer ID?) | How many new Pokémon were added to Pokémon Gold, Silver and Crystal? (100, 151, 200, or 79?) | How many Gym Leaders/Elite Four members (including Champion Lance) use at least one new Johto Pokémon in Pokémon Gold, Silver and Crystal? (5/13, 8/13, 10/13, or 12/13?) | Which of these instruments is considered most prominent in the soundtrack of Pokémon Ruby, Sapphire and Emerald? (Trumpet, Saxophone, Violin, or Guitar?) | In Pokémon Emerald, when Wallace replaced Steven Stone as the Champion of Hoenn, who took Wallace&#39;s place in the Sootopolis Gym? (Misty, Juan, Captain, or Mr. Briney?) | In the Generation 3 Kanto remakes &quot;Pokémon FireRed&quot; and &quot;Pokémon LeafGreen,&quot; which of these areas CANNOT be found on the Sevii Islands? (Navel Rock, Water Labyrinth, Dotted Hole, or Sword Coast?) | Which of these aspects are the Generation 4 Pokémon games NOT known for? (Slow battle speed, new evolutions of old Pokémon, many Legendary and Mythical Pokémon, or Easy Difficulty?) | The Pokéwalker (an accessory to the Johto remakes &quot;Pokémon HeartGold&quot; and &quot;Pokémon SoulSilver&quot;) was notable for which of these aspects? (Being a particularly accurate pedometer, being difficult to obtain upon release, allowing players to capture exclusive Mythical Pokémon, or being incredibly resiliant/hard to break?) | Pokémon Black and Pokémon White were NOT the first games in the series to do which of the following things? (Make a regional Pokédex of exclusively new Pokémon, divide physical and special moves based on context rather than type, animate 2D Pokémon sprites throughout battle, or use human vocals in the soundtrack?) | Which of these features was first added in &quot;Pokémon Black Version 2&quot; and &quot;Pokémon White Version 2&quot; (the sequels to Pokémon Black and White)? (Triple Battles, Rotation Battles, the Pokémon World Tournament, or Hidden Abilities?) | Which of these sets of legendaries have the same battle theme as each other? (Ho-oh and Lugia; Groudon, Kyogre, and Rayquaza; Dialga, Palkia, and Giratina; or Zekrom, Reshiram and Kyurem?) | For the first time since Generation 2, a new type was added in Generation 6! What was it? (&#39;Light&#39;, &#39;Sound&#39;, &#39;Fairy&#39;, or &#39;???&#39;) | Which of these factors did NOT contribute to &quot;Pokémon X&quot; and &quot;Pokémon Y&quot; being some of the easiest games in the series? (Gym Leaders&#39; lack of full teams and movesets, the introduction of Mega Evolutions, heavily decreased item prices, or the EXP Share applying to the whole party?) | Which feature from Pokémon Emerald was NOT carried over to the remakes &quot;Pokémon Omega Ruby&quot; and &quot;Pokémon Alpha Sapphire&quot;? (The Battle Frontier, the Battle Chateau, Pokémon Contests, or the Wynaut egg?) | Which of these mechanics were introduced in &quot;Pokémon Sun&quot; and &quot;Pokémon Moon&quot;? (Z-Moves, Totem Pokémon, Regional Variants, or all of the above?) | Which new shiny hunting technique was introduced in &quot;Pokémon Ultra Sun&quot; and &quot;Pokémon Ultra Moon&quot; (the sequels to Pokémon Sun and Moon)? (S.O.S. chaining, Island Scan hunting, Wormhole hunting, or horde hunting?) | Before the Isle of Armor and Crown Tundra DLC, how many Pokémon of the 905 total that existed could be obtained in &quot;Pokémon Sword&quot; and &quot;Pokémon Shield&quot;? (251, 400, 551, or 630?) | Which of these Generation 8 Legendary Pokémon went on to be banned to the &quot;AG&quot; tier, the highest possible tier in Pokémon? (Zacian, Zamazenta, Eternatus, or Calyrex?) | I ended up cutting it to 15 questions. Questions 8, 12, 16, 18, and 19 were cut. Certain questions have had their answers, syntax, or even entire prompt altered on the finished app. . Layout and Images . Designing the quiz took forever just simply because of the interface of Code.org mixed with lag issues that came up later in the process. After many hours of busy work copying over images and questions, I managed to get the framework all down. Despite how much of the process was just duplicating old screens and modifying them slightly, it took forever. . When giving objects IDs, I (usually) made sure they were distinct so that I could call upon them more easily when coding. . Code . As I would come to learn, the code portion of the process would be by far the shortest and easiest. Most of the process was copying over previous questions&#39; data. . The way it works is, depending on whether or not your choice was correct, you will be sent to either a &quot;That&#39;s right!&quot; screen or a &quot;Not quite!&quot; screen. Both screens include the same images and information, but the text at the top has been altered. This was the result of tedium in the design process. . See the comments in the code below to understand what is happening. . onEvent(&quot;pikachuim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); // If the player clicks on the Pikachu image (ID: pikachuim), they will be sent to // the &quot;Not quite!&quot; version of the results screen. onEvent(&quot;rhydonim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1answer&quot;); }); // If the player clicks on the Rhydon image (ID: rhydonim), they will be sent to // the &quot;That&#39;s right!&quot; version of the results screen. onEvent(&quot;clefairyim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); onEvent(&quot;bulbasaurim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); onEvent(&quot;nextquestion1r&quot;, &quot;click&quot;, function( ) { cor = cor + 1; // Upon leaving the &quot;That&#39;s right!&quot; page, the score increases. setScreen(&quot;question2&quot;); }); onEvent(&quot;nextquestion1w&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question2&quot;); // Your score does not change after the &quot;Not quite!&quot; page. }); . After repeating this process until the end, the final destination is the &quot;Results&quot; screen. I have rigged this screen to display your score based on the cor variable&#39;s value after being added to with each correct answer. You will get different flavor text beneath your score depending on how well you do on the quiz. . function scorecheck() { if (cor == 0) { showElement(&quot;015&quot;); showElement(&quot;0to7&quot;); } if (cor == 1) { showElement(&quot;115&quot;); showElement(&quot;0to7&quot;); } if (cor == 2) { showElement(&quot;215&quot;); showElement(&quot;0to7&quot;); } if (cor == 3) { showElement(&quot;315&quot;); showElement(&quot;0to7&quot;); } if (cor == 4) { showElement(&quot;415&quot;); showElement(&quot;0to7&quot;); } if (cor == 5) { showElement(&quot;515&quot;); showElement(&quot;0to7&quot;); } if (cor == 6) { showElement(&quot;615&quot;); showElement(&quot;0to7&quot;); } if (cor == 7) { showElement(&quot;715&quot;); showElement(&quot;0to7&quot;); } if (cor == 8) { showElement(&quot;815&quot;); showElement(&quot;8to12&quot;); } if (cor == 9) { showElement(&quot;915&quot;); showElement(&quot;8to12&quot;); } if (cor == 10) { showElement(&quot;1015&quot;); showElement(&quot;8to12&quot;); } if (cor == 11) { showElement(&quot;1115&quot;); showElement(&quot;8to12&quot;); } if (cor == 12) { showElement(&quot;1215&quot;); showElement(&quot;8to12&quot;); } if (cor == 13) { showElement(&quot;1315&quot;); showElement(&quot;13to14&quot;); } if (cor == 14) { showElement(&quot;1415&quot;); showElement(&quot;13to14&quot;); } if (cor == 15) { showElement(&quot;1515&quot;); showElement(&quot;perfecttext&quot;); } } // The above function checks your score and un-hides the corresponding elements. onEvent(&quot;seeresultsr&quot;, &quot;click&quot;, function( ) { cor = cor + 1; scorecheck(); setScreen(&quot;resultsscreen&quot;); }); // The function must be performed in the onEvent statement to read &#39;cor&#39; correctly. onEvent(&quot;seeresultsw&quot;, &quot;click&quot;, function( ) { scorecheck(); setScreen(&quot;resultsscreen&quot;); }); . I discovered the necessity of making this change through some bug testing with the Debug Console (using it to check for cor&#39;s value within/outside of the onEvent statement). My understanding of local values in Javascript has been improved by this. . Create Performance Task . Below, I will review how this quiz meets the six rows of the Create Performance Task rubric. . &quot;Program Purpose and Function&quot; . The quiz-taker&#39;s input is simply clicking answers. For this quiz, there is no manually-typed text input, drag and drop, or the like. The visually clear output of these inputs is a screen change, where you are either sent to the next question from the results screen or vice-versa. If the correct answer is clicked, the screen you are sent to reflects your accuracy (&quot;That&#39;s right!&quot; or &quot;Not quite!&quot;). The final output at the end is the number of correct answers you have given, as well as a little box of flavor text corresponding to your score. . The function of the program is counting up your number of correct responses to given Pokémon trivia, then displaying it to you at the end. This is done by adding to a correct answer value by one every time the quiz taker leaves the &quot;That&#39;s right!&quot; screen. The purpose of this function is to determine the extent of your knowledge about Pokémon. The flavor text at the end implies a further purpose of encouraging the quiz-taker to keep learning more, just for the fun of it. . onEvent(&quot;nextquestion1r&quot;, &quot;click&quot;, function( ) { cor = cor + 1; // Upon leaving the &quot;That&#39;s right!&quot; page, the score increases. setScreen(&quot;question2&quot;); }); onEvent(&quot;nextquestion1w&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question2&quot;); // Your score does not change after the &quot;Not quite!&quot; page. }); . &quot;Data Abstraction&quot; . In this case, the variable that is incremented throughout the quiz-taking process is called cor. The cor data is increased by one after clicking off of the &quot;That&#39;s right!&quot; screen (see above), stored locally and called locally at the end of the quiz to display your score through the defined function scorecheck() (see below). The purpose of cor is detecting the number of correct answers you&#39;ve given and, through scorecheck(), letting you know how well you know Pokémon. . function scorecheck() { if (cor == 0) { showElement(&quot;015&quot;); showElement(&quot;0to7&quot;); } if (cor == 1) { showElement(&quot;115&quot;); showElement(&quot;0to7&quot;); } if (cor == 2) { showElement(&quot;215&quot;); showElement(&quot;0to7&quot;); } if (cor == 3) { showElement(&quot;315&quot;); showElement(&quot;0to7&quot;); } if (cor == 4) { showElement(&quot;415&quot;); showElement(&quot;0to7&quot;); } if (cor == 5) { showElement(&quot;515&quot;); showElement(&quot;0to7&quot;); } if (cor == 6) { showElement(&quot;615&quot;); showElement(&quot;0to7&quot;); } if (cor == 7) { showElement(&quot;715&quot;); showElement(&quot;0to7&quot;); } if (cor == 8) { showElement(&quot;815&quot;); showElement(&quot;8to12&quot;); } if (cor == 9) { showElement(&quot;915&quot;); showElement(&quot;8to12&quot;); } if (cor == 10) { showElement(&quot;1015&quot;); showElement(&quot;8to12&quot;); } if (cor == 11) { showElement(&quot;1115&quot;); showElement(&quot;8to12&quot;); } if (cor == 12) { showElement(&quot;1215&quot;); showElement(&quot;8to12&quot;); } if (cor == 13) { showElement(&quot;1315&quot;); showElement(&quot;13to14&quot;); } if (cor == 14) { showElement(&quot;1415&quot;); showElement(&quot;13to14&quot;); } if (cor == 15) { showElement(&quot;1515&quot;); showElement(&quot;perfecttext&quot;); } } // This function is then called just before the results screen. // Keep in mind that there are two different screens that send you to // the results screen: question15answer and question15wrong. . &quot;Managing Complexity&quot; . As shown below, correct and incorrect responses send to question[#]answer and question[#]wrong respectively, upon which the player&#39;s score is increased by one or left alone. Images and labels to answers are given their own onEvent responses so that the correct question&#39;s results screen is shown. . &quot;Procedural Abstraction&quot; . The scorecheck() function (see above) shows management of complexity using abstraction within the program. If these if statements were crowded into the two places in which scorecheck() is used, it would cause the program to be needlessly bloated. On top of this, by naming the function scorecheck(), it is clear what the purpose of the function is: checking the score of the player, and then showing the player how well they did by revealing certain score-based elements on the next screen. . // Provided for &quot;Managing Complexity&quot; onEvent(&quot;pikachuim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); // If the player clicks on the Pikachu image (ID: pikachuim), they will be sent to // the &quot;Not quite!&quot; version of the results screen. onEvent(&quot;rhydonim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1answer&quot;); }); // If the player clicks on the Rhydon image (ID: rhydonim), they will be sent to // the &quot;That&#39;s right!&quot; version of the results screen. onEvent(&quot;clefairyim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); onEvent(&quot;bulbasaurim&quot;, &quot;click&quot;, function( ) { setScreen(&quot;question1wrong&quot;); }); . &quot;Algorithm Implementation&quot; . An algorithm followed throughout the quiz is only incrementing the cor variable after correct answers. It is never subtracted from, as wrong answers are detected by finding the difference between cor and the number of questions by the end. This is easy for anyone else to put into play so long as his or her quiz recognizes correct and incorrect answers in some fashion. . &quot;Testing&quot; . The quiz has little to anticipate, as there are only so many possible inputs the user can make. Each is accounted for with an associated slide and, for some inputs, function or algorithm. This category can be satisfied by the above code, as it anticipates that the user will click one out of the four options, each of which sending to an associated results screen. The quiz anticipates that any one of these questions can be clicked at any time, so there must be a called-upon output for each. . Changes I Would Make in the Future . The only reason there are completely separate screens to differentiate between a correct response and an incorrect one (question[#]answer and question[#]wrong) is that I had planned on writing separate text for each of those slides. As is the case for multiple elements of this quiz (the 20 original questions, an ambitious planned free-response segment, etc.), what ultimately got in the way was tedium. It simply didn&#39;t feel like adding those things would really improve the purpose of the program. . The trivia was already mostly difficult. I know I could make an awesome, super complicated quiz if I wanted to, but it just didn&#39;t feel like there was much of a point to it. I could have created a bank of more questions to give the quiz some variance (like my survey from last week), created a function to generate a random number, checked prevoiusly generated numbers with a for loop, and then have 15-20 randomly-selected, non-repeating questions. But why? It serves its purpose. . That said, I&#39;m a perfectionist. A very adamant one. If it would fix some sort of bug in the program, I definitely would go back and make your score imcrement upon clicking the correct answer, then consolidate the two screens into a single question[#]answer screen on which I used showElement to display &quot;That&#39;s right!&quot; or &quot;Not quite!&quot; depending on the previous response. I know that would be just slightly more efficient...but efficiency wasn&#39;t exactly a problem to begin with. . What Other Apps Could I Make? . The options really feel limitless. Being able to display visual elements that respond to being clicked or react to certain keyboard inputs is such a boon for an aspiring game-maker like myself. Considering the for-fun Python program I&#39;m making right now, I&#39;m already tempted to use it to make a little turn-based battle system, maybe even directly replicating the Pokémon battle formula, with a back sprite on your end and a front sprite on theirs. Maybe you&#39;re battling the Champion with his full team of six and you need to find a way to win with a not-so-good team of your own. Who knows? There&#39;s lots that can be done. . If I think of something more interesting than my own custom text-based RPG I&#39;m making with Python, I&#39;ll look into it. .",
            "url": "https://drewreed2005.github.io/realdrew/applabquiz/",
            "relUrl": "/applabquiz/",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Where are the posts?",
            "content": "Where are the Daily Posts? . This week’s (and likely future weeks’) projects and work would not be as interesting or practical to give daily posts for because, for this week specifically, the vast majority of my time was spend on the survey. The rest of the objectives were finished quite quickly over the course of a few days. It likely would not have been practical to say everything I did each day; it is simply too time-consuming and wasteful of time I should be spending Code-Code-Coding. . What to Expect in the Future . After much thought, I have decided on a way to perfectly use this class for self-expression: a text-based RPG! I can already forsee certain parts being greatly challenging and time-consuming to get through, but I have some pretty novel ideas that I wish to try. . In certain places, things I’ve always wanted to put in a game (such as adaptive music) will have to be sacrificed, and certain things I dislike like old-fashioned game UI and password-based save systems will have to be used due to platform restrictions. Do not expect a poor product, though! . All music featured in this game (and, yes, there will be music throughout the game!) will all be composed and produced by me. Any other contributors will be noted in the credits at the end. . Expect a turn-based battle system, a solid number of towns to travel to and interact with, an interesting and personalizeable magic system, upgradable equipment and weapons, an element system, and much, much more. I’m really excited to discuss progress at the end of each week! . What will the game be called? What is the scenario? These details are still being decided… . Feel free to leave ideas in the comments! .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/05/whereareposts.html",
            "relUrl": "/2022/09/05/whereareposts.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Lists and Dictionaries Pair Programming",
            "content": "For the below loop, I have chosen to use the same visual formatting for the output loop as in the Lists and Dictionaries page from this week, but the included info has been altered as well as how it is collected and certain possible variations of how it can be output. . affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] InfoDb = [] def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Place of Birth:&quot;, d_rec[&quot;POB&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print() def back_print_data(d_rec): print(d_rec[&quot;LastName&quot;], d_rec[&quot;FirstName&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Place of Birth:&quot;, d_rec[&quot;POB&quot;]) print() def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return def back_recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] back_print_data(record) back_recursive_loop(i + 1) def infograb(): print(&quot;Excellent. Let&#39;s get started. nWhat is your legal first name?&quot;) fname1 = input() global infname infname = fname1.capitalize() print(&quot;Understood. Thank you, &quot; + infname + &quot;. nWhat is your legal last name?&quot;) lname1 = input() global inlname inlname = lname1.capitalize() print(&quot;Understood. Your full name is &quot; + infname, inlname + &quot;. nNow, please tell us: in what city were you born?&quot;) global inpob inpob = input() print(&quot;Understood. You were born in &quot; + inpob + &quot;. nWhat is your favorite color?&quot;) global infcolor infcolor = input() print(&quot;Understood. Your favorite color is &quot; + infcolor + &quot;. nWhat is your favorite food?&quot;) global inffood inffood = input() print(&quot;Understood. Your favorite food is &quot; + inffood + &quot;. Now, please name the species of pets you have. n(Write them all in one input with spaces separating them.) n(If you do not have a pet, simply say &#39;None&#39; or &#39;N/A&#39;.&quot;) pet_inp = input() global pet_list pet_list = pet_inp.split() print(&quot;Understood. That concludes the survey.&quot;) return InfoDb.append({ &quot;FirstName&quot;: infname, &quot;LastName&quot;: inlname, &quot;POB&quot;: inpob, &quot;Favorite Color&quot;: infcolor, &quot;Favorite Food&quot;: inffood, &quot;Pets&quot;: pet_list }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;POB&quot;: &quot;San Diego&quot;, &quot;Favorite Color&quot;: &quot;Purple&quot;, &quot;Favorite Food&quot;: &quot;Sushi&quot;, &quot;Pets&quot;: [&quot;Cat&quot;, &quot;Dog&quot;] }) print(&quot;Welcome to the Information Database! We will keep your info safe. nWould you like to provide your information to us?&quot;) consent = input() if consent in affirmative: infograb() print(&quot;Would you like to print the current log of information?&quot;) consent3 = input() if consent3 in affirmative: recursive_loop(0) print(&quot;Thank you for provding your data. nWould you like to print this data backward?&quot;) consent5 = input() if consent5 in affirmative: back_recursive_loop(0) print(&quot;I am tired. This concludes the program. Gracias.&quot;) elif consent5 in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Your response confuses me. Thank you for your interaction.&quot;) elif consent3 in negative: print(&quot;That is alright. Thank you for your data.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) elif consent in negative: print(&quot;That is alright. Would you like to print the current log of information?&quot;) consent2 = input() if consent2 in affirmative: recursive_loop(1) print(&quot;Thank you for interacting with the program. nWould you like to print this data backward?&quot;) consent4 = input() if consent4 in affirmative: back_recursive_loop(1) print(&quot;I am tired. This concludes the program. Gracias.&quot;) elif consent2 in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) . Welcome to the Information Database! We will keep your info safe. Would you like to provide your information to us? Excellent. Let&#39;s get started. What is your legal first name? Understood. Thank you, Devon. What is your legal last name? Understood. Your full name is Devon Shepherd. Now, please tell us: in what city were you born? Understood. You were born in San Diego. What is your favorite color? Understood. Your favorite color is Red. What is your favorite food? Understood. Your favorite food is IDK. Now, please name the species of pets you have. (Write them all in one input with spaces separating them.) (If you do not have a pet, simply say &#39;None&#39; or &#39;N/A&#39;. Understood. That concludes the survey. Would you like to print the current log of information? Devon Shepherd Place of Birth: San Diego Favorite Color: Red Favorite Food: I don&#39;t know Pets: Dog Drew Reed Place of Birth: San Diego Favorite Color: Purple Favorite Food: Sushi Pets: Cat, Dog Thank you for provding your data. Would you like to print this data backward? Shepherd Devon Pets: Dog Favorite Food: I don&#39;t know Favorite Color: Red Place of Birth: San Diego Reed Drew Pets: Cat, Dog Favorite Food: Sushi Favorite Color: Purple Place of Birth: San Diego I am tired. This concludes the program. Gracias. . Making use of a recursive loop and user inputs, this program allows you to give your own information to be printed in the initial InfoDb format. . A hack from one relevant page asks to print the data backward, so if you want, the program can do that to. .",
            "url": "https://drewreed2005.github.io/realdrew/landdpair/",
            "relUrl": "/landdpair/",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Week 2 Review Ticket",
            "content": "Summary of This Week’s Goals . This week primarily covered content regarding HTML Fragments (which was largely a lesson about what goes on behind the code we make), Lists and Dictionaries, and Data Abstraction overall. There was also a bit more emphasis on collaboration after many students the week before did not indicate the ideal amount of teamwork. . This Week’s Progress . This week, the hacks tended to be less plentiful but more singularly time-consuming and difficult to understand. I went into this week with a partially-complete project that I had worked on over the weekend. It just so happens that the project has some pertenance to the “Lists and Dictionaries” part of the week’s content. Let’s go into that first. . The “Survey” . After making the Python quiz, one thing that I found distinctly unsatisfying about the quiz-taking process itself was its predictability. I didn’t like that I could just know the answers to the five questions and put them in immediately. I didn’t like that I had to tell the quiz-taker how to format their inputs, capitalized versus lowercase or string versus integer versus float versus symbol, etc. If someone put in the wrong kind of input, it was just nonsense that didn’t contribute the quiz. It felt thoroughly uninteractive and clunky. . So I got to work to fix those problems. . The “Survey” (which, spoiler, is really an eligibility test to see if you are worthy of working for or being wed to ‘THE MASTER,’ an unspecified being or great power) was programmed to fix these problems. It contains 15 questions to answer, ten multiple choice and five free response, each time you take it. However, a bank of 15 multiple choice questions and nine free response questions exists, meaning that which questions you get to answer each time depends somewhat on RNG. The order of these questions is also completely random. No matter when the question is asked, each response gives the same results. . Though the Python quiz was largely intended to be a lesson on if, else, math and the like, the “Survey” taught me a whole lot more abouts lists, indexes and patience. Using the random module and its range and shuffle commands allowed me to create a list of all possible index values of the list of MC/FR questions (without repeating numbers), shuffle them randomly, and call upon only the first ten/five list integers. This is a fool-proof strategy to randomize questions…but then I need a way to check the question response. . In order to give unique feedback based on what question was being asked, a variable known as checkval is globalized and set equal to the list index corresponding to each numbered question, and this checkval would tell the defined mc_check() or fr_check() commands how to react to the response to a given question. I was very, very proud of having come up with this. . The retry() function has been set to let you repeat any question if you provide an invalid response to it (detecting which question you’re on with quesval, similar to checkval). If you mess up questions too many times, you will anger the survey robot until he eventually forces you to restart from the beginning upon finally finishing the survey. . There are also various Easter eggs which are hard to find without looking into the code. Doing exceptionally poor in the first five questions results in the survey-taker being repromanded. A bit more obviously, the survey robot actually messes up your name after the tenth question (which you provide to it along with your gender at the beginning), calling you by a bizarre name starting with the same letter. When correcting his mistake, if you say you have a different name than initially, the robot will question your response. Different names (including my own, give it a try) give different results after or during the survey. . (Don’t feel like dealing with the 1/10 luck FR question? Just name yourself “Drew” and give some good responses!) . Again, I am very proud of this project. Writing unique responses for each input took a lot of time and effort, but it feels very worth it. . Look Around You, Pal! . The site is a different color! Ain’t that wacky. . Yeah, I followed the instructions to use “dark mode” on my site. I think altered the color hex values to suit my own preferences, since dark mode gets boring to use on every site. . I also changed the image on the home page. Why not? . Lists and Dictionaries Notes . I found the content surrounding loops confusing and decided to mess around with them in a notes Jupyter file under the name above. Using this, I was able to create the objective Notebooks page found below. . I used a mix of Markdown and Python (like with most pages on this site) to explain what I was doing (for my own future reference). I also showed use of my own InfoDb data and various types of loops, though a much better instance of this is found in… . Lists and Dictionaries Pair Programming . I have made a Jupyter Notebooks page along with my partner Devon to show understanding of loops and dictionaries with InfoDb. Devon used a game to show his understanding (see his Review Ticket) with a “while loop”, and I used a “recursive loop” along with a system which allows the user to input their own information. . We did a portion of this during the 20 minute segments on Friday. . Make a Table? . Here’s a table using Markdown: . Goals Complete? Proof . Lists and Dictionaries | Yes | Notes, Pair Programming, Survey | . HTML Fragments | Yes | This Table | . Live Review | Underway | You’re looking at this table | . And here’s a table using HTML: . Header ColorCell Color . Purple | Pink | . #a38 | #f47 | . I used &lt;style&gt; to establish some colors I’d like to be in my table. I tried changing the border color as well but it ended up looking ugly. I think this looks nice with my mostly purple website. . List of Objectives Met . Changed website “theme” or colors with _sass | Home screen customization | Survey making use of lists, indexes, and past content like if and def | Lists and Dictionaries notes with all types of loops used | Pair programming: at least 2 InfoDb entries between me and Devon | All Jupyter Notebooks pages with use a mix of Markdown and Python cells | Use of # in cells to add commentary | Customized table(s) | This Review Ticket and live presentation | . And, of course, our table has submitted all Review Tickets in one comment. .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/04/week2reviewticket.html",
            "relUrl": "/2022/09/04/week2reviewticket.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "Lists and Dictionaries Notes",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . . name = &quot;Drew Reed&quot; print(&quot;name&quot;, name, type(name)) print(&quot;The variable key is &#39;name&#39;. The value is &#39;Drew Reed&#39;. It is a string.&quot;) print() age = 16 print(&quot;age&quot;, age, type(age)) print(&quot;The variable key is &#39;age&#39;. Its value is &#39;16&#39;. It is an integer.&quot;) print() score = 90.0 print(&quot;score&quot;, score, type(score)) print(&quot;The variable key is &#39;score&#39;. Its value is &#39;90.0&#39;. It is a float, a.k.a. a floating point number.&quot;) print() print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print(&quot;The variable&quot;) print() print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) print(&quot;It comes out with little squiggly brackets.&quot;) . name Drew Reed &lt;class &#39;str&#39;&gt; The variable key is &#39;name&#39;. The value is &#39;Drew Reed&#39;. It is a string. What is the variable name/key? value? type? primitive or collection, why? age 16 &lt;class &#39;int&#39;&gt; The variable key is &#39;age&#39;. Its value is &#39;16&#39;. It is an integer. What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Drew Reed&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Drew Reed &lt;class &#39;str&#39;&gt; . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;DOB&quot;: &quot;November 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;drewdafox@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Camry&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry . This can be a little bit confusing, so let&#39;s put this in simpler terms. . When defining print_data, the different data in the Info.Db is called upon based on its Dictionary definition and placed in a visually appealing way using t and spacing with comma. . Let&#39;s look at how to loop the output of the info just enough to get it out. . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;DOB&quot;: &quot;November 7&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;drewdafox@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Camry&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry . While loops and recursive loops work very similarly, just making use of slightly different commands. Both compare how much content is contained within InfoDb with how much has already been output (indicated by the i value). .",
            "url": "https://drewreed2005.github.io/realdrew/landdnotes/",
            "relUrl": "/landdnotes/",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Week 1 Review Ticket",
            "content": "Daily Posts . Every day this week, starting from when I had to restart the Fastpages site on Monday due to an issue with the setup pull request, I have made a blog post with Markdown to demonstrate both fluency with this type of file and to organize my work across each weekday. . These can all be found on the home page of the site, as well as by being searched for. They are named “Day 1,” “Day 2,” “Day 3,” and so on. Posts are not made on weekends (see “Day 5” for why). . “Day 4” contains an image at the top with a caption to fit a certain Hack. . New Pages . As was suggested as one of the Hacks, I’ve made two new pages on the top bar: “Notes” and “Quizzes and More.” . “Notes” . The “Notes” page contains links to various pages on the site which justify the site’s academic utility. Various pages of notes will be found here. . Focus and Habits Notes . As requested as a part of this week’s schedule, I watched through the “Psychology and the Good Life” speech by Laurie Santos and took notes what it said about happiness, stress, and healthy habits. . To meet the Hack regarding posting a .docx file through the ‘_word’ folder, the notes have been typed in Google Docs and exported as a Word file to put on the site. . Week 1 Python Notes . This notes page goes over some Python commands taught in the “Python Hello” page earlier this week. They are shown in action by mixing Markdown and Python cells in the Jupyter Notebook file. Within these Python cells are captions using # to explain what is being done. These aspects fit the expectations of multiple Hacks. . I also included some other commands I learned about on my own through independent research. . “Quizzes and More” . This is where I put some random non-post projects. Most of what is found in there contributes to specific Hacks, though some, like the Random Number Generator, were just made for fun. . Week 1 Python Quiz . The “Python Hello” page we read through earlier in the week included a Hack asking the reader to make his or her own Python quiz, including a percentage score at the end. . Though the quiz does not actually run on the site, the outputs for all correct inputs can be seen beneath the Python code window. . To stop the quiz from being completely plagiar-inspired, I only reused necessary aspects of the original format and the defined question_and_response command. I added some additional things to prove fluency, such as a custom name input question (which lets the bot call you by a name of your choice throughout the quiz), a progress report three questions into the quiz (with a unique response depending on how many you got right), a percentage score at the end which determines whether or not you passed (you need at least 4/5 or 80% to pass), and an additional Easter egg if you named yourself Drew and got every question correct. This was a lot of fun to make. . Tool Check with Bash . Later in the week, we were asked to use Bash to prove that we have all the necessary tools for the course. Instead of describing everything, I’ll let the page speak for itself. You can click the hyperlink on the title of this section or the “Quizzes and More” page on the top bar to access. . Random Number Generator . For fun, I made a random number generator using the random.randrange command. I thought it would be fun if the random number could cause different results based on what it was, so I gave an option for the RNG host (who I just named Python) to offer a second random number. If the numbers match (a 1/256 chance), Python will tell the user a secret. If the numbers are within 10 integer values of each other, the Python will remark that it was close, but not quite. Don’t you dare cheat and read the secret in the code! . Objectives and Hacks Completed This Week . Notes and presentation through Fastpages | New _pages categories | Focus and Habits notes | Published .docx file | “Python Hello” Notes with… | Mix of Markdown and Python cells | Use of # in cells to add commentary | Custom Python Quiz with percentage score plus extra content | Verify tools with Bash | This Review Ticket | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/27/week1reviewticket.html",
            "relUrl": "/2022/08/27/week1reviewticket.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Awesome Survey",
            "content": "import random import math from sre_compile import isstring from turtle import pd from unicodedata import name affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] lucky = random.randint(1,10) score = 0 global mcheckval mcheckval = 15 global fcheckval fcheckval = 8 tickedoff = 0 narcissim = 0 global youloseidiot youloseidiot = 0 def retry(): global tickedoff tickedoff += 1 if tickedoff &gt;= 99: print(&quot;You&#39;re impressively insolent.&quot;) global youloseidiot youloseidiot = 1 elif tickedoff &gt;= 9: print(&quot;How is it even possible to be such a screw-up? Err, ehem...&quot;) elif tickedoff &gt;= 4: print(&quot;You&#39;re on thin ice, bucko...&quot;) if quesval == 1: question1() elif quesval == 2: question2() elif quesval == 3: question3() elif quesval == 4: question4() elif quesval == 5: question5() elif quesval == 6: question6() elif quesval == 7: question7() elif quesval == 8: question8() elif quesval == 9: question9() elif quesval == 10: question10() elif quesval == 11: question11() elif quesval == 12: question12() elif quesval == 13: question13() elif quesval == 14: question14() elif quesval == 15: question15() else: print(&quot;You must&#39;ve REALLY messed something up to see this...&quot;) def fr_invalretry(realmsg): try: val = int(realmsg) except ValueError: print(&quot;What part of numeric value do you not unerstand?&quot;) retry() return if &quot;.&quot; in realmsg: print(&quot;No decimals, please! Redo!&quot;) retry() return if &quot;A&quot; in realmsg or &quot;a&quot; in realmsg or &quot;B&quot; in realmsg or &quot;b&quot; in realmsg or &quot;C&quot; in realmsg or &quot;c&quot; in realmsg or &quot;D&quot; in realmsg or &quot;d&quot; in realmsg or &quot;E&quot; in realmsg or &quot;e&quot; in realmsg or &quot;F&quot; in realmsg or &quot;f&quot; in realmsg or &quot;G&quot; in realmsg or &quot;g&quot; in realmsg or &quot;H&quot; in realmsg or &quot;h&quot; in realmsg or &quot;I&quot; in realmsg or &quot;i&quot; in realmsg or &quot;J&quot; in realmsg or &quot;j&quot; in realmsg or &quot;K&quot; in realmsg or &quot;k&quot; in realmsg or &quot;L&quot; in realmsg or &quot;l&quot; in realmsg or &quot;M&quot; in realmsg or &quot;m&quot; in realmsg or &quot;N&quot; in realmsg or &quot;n&quot; in realmsg or &quot;O&quot; in realmsg or &quot;o&quot; in realmsg or &quot;P&quot; in realmsg or &quot;p&quot; in realmsg or &quot;Q&quot; in realmsg or &quot;q&quot; in realmsg or &quot;R&quot; in realmsg or &quot;r&quot; in realmsg or &quot;S&quot; in realmsg or &quot;s&quot; in realmsg or &quot;T&quot; in realmsg or &quot;t&quot; in realmsg or &quot;U&quot; in realmsg or &quot;u&quot; in realmsg or &quot;V&quot; in realmsg or &quot;v&quot; in realmsg or &quot;W&quot; in realmsg or &quot;w&quot; in realmsg or &quot;X&quot; in realmsg or &quot;x&quot; in realmsg or &quot;y&quot; in realmsg or &quot;y&quot; in realmsg or &quot;Z&quot; in realmsg or &quot;z&quot; in realmsg: print(&quot;I said a numeric value! Like at the top of your keyboard! Redo!&quot;) retry() return else: return mc_select = list(range(0,15)) random.shuffle(mc_select) fr_select = list(range(0,9)) random.shuffle(fr_select) vowels = [&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;] vowiable = random.randint(0,4) randv = vowels[int(vowiable)] def nameselect(): print(&quot;Welcome to a deeply important survey! nIt will consist of 15 questions, 10 multiple choice and five free response. nIt should be easy. Be sure to answer one of the provided options for multiple choice questions. nPut whatever you want for open-ended questions, but answer honestly!&quot;) print(&quot;Before we begin, what is your first name?&quot;) global nmae nmae = input() global name name = nmae.capitalize() print(name + &quot;...&quot;) if name == &quot;Drew&quot;: print(&quot;You should know you&#39;re not supposed to take this quiz! nI guess you might as well test it.&quot;) elif name == &quot;Kendall&quot;: print(&quot;Off to a very good start...&quot;) elif name == &quot;Benji&quot;: print(&quot;I don&#39;t think this quiz is for you...&quot;) elif &quot;1&quot; in nmae or &quot;2&quot; in nmae or &quot;3&quot; in nmae or &quot;4&quot; in nmae or &quot;5&quot; in nmae or &quot;6&quot; in nmae or &quot;7&quot; in nmae or &quot;8&quot; in nmae or &quot;9&quot; in nmae or &quot;0&quot; in nmae: print(&quot;Real people don&#39;t have numbers in their names! Try again... n n-- n&quot;) nameselect() else: print(name + &quot;? Eh, could&#39;ve been better.&quot;) def mc_question(): global msg msg = input() global realmsg realmsg = msg.capitalize() print(&quot;You chose option &#39;&quot; + realmsg + &quot;.&#39;&quot;) def fr_question(): global msg msg = input() global realmsg realmsg = msg.capitalize() print(realmsg + &quot;, huh...?&quot;) def mc_check(): if mcheckval == 0: if realmsg == &quot;A&quot; or realmsg == &quot;1&quot;: print(&quot;A little clumsy here and there, but a classic!&quot;) return 90 elif realmsg == &quot;B&quot; or realmsg == &quot;2&quot;: print(&quot;They really found their sea legs by then! Good to hear.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;3&quot;: print(&quot;Gotta love the end of the Golden Era...&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;4&quot;: print(&quot;I guess the first little bit was solid, but...&#39;The Gift of Gum&#39;?&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;5&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 40 elif realmsg == &quot;F&quot; or realmsg == &quot;6&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 50 elif realmsg == &quot;G&quot; or realmsg == &quot;7&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 50 elif realmsg == &quot;H&quot; or realmsg == &quot;8&quot;: print(&quot;Getting there, I guess...still a lot of duds.&quot;) return 60 elif realmsg == &quot;I&quot; or realmsg == &quot;9&quot;: print(&quot;Yes, the revival! Points for precision! Well done.&quot;) return 100 elif realmsg == &quot;J&quot; or realmsg == &quot;10&quot;: print(&quot;Yeesh...&quot;) return 10 elif realmsg == &quot;K&quot; or realmsg == &quot;11&quot;: print(&quot;I&#39;m glad you can find enjoyment in it.&quot;) return 15 elif realmsg == &quot;L&quot; or realmsg == &quot;12&quot;: print(&quot;I&#39;m glad you can find enjoyment in it.&quot;) return 20 elif realmsg == &quot;M&quot; or realmsg == &quot;13&quot;: print(&quot;I&#39;ve hardly seen any of it but I can tell this is...a take.&quot;) return 30 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 1: if realmsg == &quot;A&quot; or realmsg == &quot;Math&quot;: print(&quot;Math can be a confusing to SUM, but improvement is a SINE of effort.&quot;) return 40 elif realmsg == &quot;B&quot; or realmsg == &quot;Science&quot;: print(&quot;For a set of laws that govern life, science can be pretty inconsistent...&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;English&quot;: print(&quot;I mean, you&#39;ve been speaking it this whole survey! nIt must not be THAT bad.&quot;) return 30 elif realmsg == &quot;D&quot; or realmsg == &quot;History&quot;: print(&quot;Sometimes, it&#39;s like reading fiction. Ever heard of the Latter Day Jig?&quot;) return 50 elif realmsg == &quot;E&quot; or realmsg == &quot;PE&quot;: print(&quot;Hardly seems like a subject in the first place...&quot;) return 60 elif realmsg == &quot;F&quot; or realmsg == &quot;Music/Fine Arts&quot;: print(&quot;Well, if you don&#39;t like one fine art, there are plenty more out there!&quot;) return 30 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 2: if realmsg == &quot;A&quot; or realmsg == &quot;Generation 5&quot;: print(&quot;Maybe a design dud here and there, but Unova&#39;s story holds strong.&quot;) return 10 elif realmsg == &quot;B&quot; or realmsg == &quot;Generation 6&quot;: print(&quot;With the EXP share on, that question must&#39;ve been easy for you!&quot;) return 50 elif realmsg == &quot;C&quot; or realmsg == &quot;Generation 7&quot;: print(&quot;Were the cutscenes really that unbearable?&quot;) return 30 elif realmsg == &quot;D&quot; or realmsg == &quot;Generation 8&quot;: print(&quot;The box legendary is a dog with a sword in its mouth.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 3: if realmsg == &quot;A&quot; or realmsg == &quot;Vanilla&quot;: print(&quot;Daring today, aren&#39;t we?&quot;) return 30 elif realmsg == &quot;B&quot; or realmsg == &quot;Chocolate&quot;: print(&quot;A classic.&quot;) return 70 elif realmsg == &quot;C&quot; or realmsg == &quot;Strawberry&quot;: print(&quot;Like strawberry milk but better!&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Rainbow Sherbet&quot;: print(&quot;A surprisingly good mix of flavors.&quot;) return 70 elif realmsg == &quot;E&quot; or realmsg == &quot;Mint Chocolate Chip&quot;: print(&quot;Sometimes, it just hits the spot.&quot;) return 80 elif realmsg == &quot;F&quot; or realmsg == &quot;Cookies and Cream&quot;: print(&quot;But cookies ain&#39;t ice cream...&quot;) return 60 elif realmsg == &quot;G&quot; or realmsg == &quot;Cotton Candy&quot;: print(&quot;So underrated!&quot;) return 100 elif realmsg == &quot;H&quot; or realmsg == &quot;Watermelon&quot;: print(&quot;Only the enlightened few...&quot;) return 100 elif realmsg == &quot;I&quot; or realmsg == &quot;Pralines and Cream&quot;: print(&quot;Mom?&quot;) return 20 elif realmsg == &quot;J&quot; or realmsg == &quot;Reese&#39;s Peanut Butter Cup&quot;: print(&quot;I can already feel the life leaving me.&quot;) return 10 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 4: if realmsg == &quot;A&quot; or realmsg == &quot;Pop&quot;: print(&quot;I guess that&#39;s why it&#39;s called pop.&quot;) return 60 elif realmsg == &quot;B&quot; or realmsg == &quot;Rock&quot;: print(&quot;Put another dime in the jukebox, baby!&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Country&quot;: print(&quot;In controlled circumstances...&quot;) return 25 elif realmsg == &quot;D&quot; or realmsg == &quot;Punk/Ska&quot;: print(&quot;Respectable.&quot;) return 85 elif realmsg == &quot;E&quot; or realmsg == &quot;Jazz&quot;: print(&quot;So groovy.&quot;) return 90 elif realmsg == &quot;F&quot; or realmsg == &quot;Classical&quot;: print(&quot;What year is it?&quot;) return 70 elif realmsg == &quot;G&quot; or realmsg == &quot;Lo-Fi&quot;: print(&quot;ZZZzzz...&quot;) return 50 elif realmsg == &quot;H&quot; or realmsg == &quot;Movie/Game Soundtracks&quot;: print(&quot;It takes a real musical ear to appreciate it.&quot;) return 100 elif realmsg == &quot;I&quot; or realmsg == &quot;K-Pop&quot;: print(&quot;Okay...&quot;) return 10 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 5: if realmsg == &quot;A&quot; or realmsg == &quot;Red&quot;: print(&quot;Something about it feels classic. And bloody.&quot;) return 80 elif realmsg == &quot;B&quot; or realmsg == &quot;Orange&quot;: print(&quot;Orange you glad you didn&#39;t say...never mind.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Yellow&quot;: print(&quot;A very happy color. I like it.&quot;) return 80 elif realmsg == &quot;D&quot; or realmsg == &quot;Green&quot;: print(&quot;Do you keep green things in your pocket protector?&quot;) return 30 elif realmsg == &quot;E&quot; or realmsg == &quot;Blue&quot;: print(&quot;Daring today, aren&#39;t we? Whoops, I referenced it again.&quot;) return 70 elif realmsg == &quot;F&quot; or realmsg == &quot;Purple&quot;: print(&quot;Like royalty...&quot;) return 100 elif realmsg == &quot;G&quot; or realmsg == &quot;Brown&quot;: print(&quot;Rustic and natural...it has its appeal.&quot;) return 70 elif realmsg == &quot;H&quot; or realmsg == &quot;Black&quot;: print(&quot;A Rolling Stones fan, eh?&quot;) return 60 elif realmsg == &quot;I&quot; or realmsg == &quot;Pink&quot;: print(&quot;Kendall couldn&#39;t think of a pink pun. Moving on!&quot;) return 70 elif realmsg == &quot;J&quot; or realmsg == &quot;White&quot;: print(&quot;Sleek and minimalistic with infinite possibilities.&quot;) return 90 elif realmsg == &quot;K&quot; or realmsg == &quot;Clear&quot;: print(&quot;What do you mean it&#39;s not a color? How close-minded.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 6: if realmsg == &quot;A&quot; or realmsg == &quot;Action&quot;: print(&quot;*Explosion* *Laser* *Michael Bay*&quot;) return 60 elif realmsg == &quot;B&quot; or realmsg == &quot;Comedy&quot;: print(&quot;Funny movies are always the ones that stick with me.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Horror&quot;: print(&quot;Psych-horror is interesting, but jumpscares SCREAM lazy.&quot;) return 20 elif realmsg == &quot;D&quot; or realmsg == &quot;Rom-com&quot;: print(&quot;I wish she&#39;d watch one with me sometime...&quot;) return 100 elif realmsg == &quot;E&quot; or realmsg == &quot;Drama&quot;: print(&quot;A deep moral dilemma always gets me invested.&quot;) return 50 elif realmsg == &quot;F&quot; or realmsg == &quot;Musical&quot;: print(&quot;Wait, aren&#39;t there different genres of musicals? nEh, somehow we&#39;ll work this out.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 7: if realmsg == &quot;A&quot; or realmsg == &quot;Appearance&quot;: print(&quot;Well, at least you&#39;re honest.&quot;) return 20 elif realmsg == &quot;B&quot; or realmsg == &quot;Personality&quot;: print(&quot;Yeah, I like big personalities too.&quot;) return 90 elif realmsg == &quot;C&quot; or realmsg == &quot;Intelligence&quot;: print(&quot;I get the feeling your intelligence front is deceiving...&quot;) return 70 elif realmsg == &quot;D&quot; or realmsg == &quot;Values&quot;: print(&quot;So important, yet so sorely ignored.&quot;) return 100 elif realmsg == &quot;E&quot; or realmsg == &quot;All of the above&quot;: print(&quot;In the search for a true soulmate, I see...&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 8: if realmsg == &quot;A&quot; or realmsg == &quot;Definitely&quot;: print(&quot;Try not to get into TOO much trouble...&quot;) return 70 elif realmsg == &quot;B&quot; or realmsg == &quot;Maybe&quot;: print(&quot;Circumstances are important.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Probably not&quot;: print(&quot;Somtimes, it&#39;s best not to deal with strangers.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Definitely not&quot;: print(&quot;An invertebrate? In MY survey?&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;I&#39;d ask my date to confront him&quot;: print(&quot;Bold of you to assume you went with a date.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 9: if realmsg == &quot;A&quot; or realmsg == &quot;Dog&quot;: print(&quot;The vanilla woof-woof solution.&quot;) return 80 elif realmsg == &quot;B&quot; or realmsg == &quot;Cat&quot;: print(&quot;Chill little guys with empty heads. Great pets.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Fish&quot;: print(&quot;Blub. Simple life.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Hampster/Guinea Pig&quot;: print(&quot;I mean, I&#39;ve never seen a dog on an infinitely-spinning wheel.&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;Bunny&quot;: print(&quot;It&#39;s like Easter every day.&quot;) return 90 elif realmsg == &quot;F&quot; or realmsg == &quot;Giraffe&quot;: print(&quot;He would stay in the backyard, unconditionally loved.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 10: if realmsg == &quot;A&quot; or realmsg == &quot;Once a day&quot;: print(&quot;Perfectly reasonable.&quot;) return 100 elif realmsg == &quot;B&quot; or realmsg == &quot;More than once per day&quot;: print(&quot;A bit overkill, but the spirit is admirable.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Once every other day&quot;: print(&quot;A lot accumulated over two days...&quot;) return 75 elif realmsg == &quot;D&quot; or realmsg == &quot;Once a week&quot;: print(&quot;I sure hope that&#39;s a cultural thing or something...&quot;) return 30 elif realmsg == &quot;E&quot; or realmsg == &quot;What is a shower?&quot;: print(&quot;I appreciate the honesty. nA shower is a structure found in home bathrooms. They are used to clean...&quot;) return 60 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 11: if realmsg == &quot;A&quot; or realmsg == &quot;Vanilla&quot;: print(&quot;Daring today, aren&#39;t...I did it again.&quot;) return 50 elif realmsg == &quot;B&quot; or realmsg == &quot;Chocolate&quot;: print(&quot;The ice cream classic...milkshake-ified.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Strawberry&quot;: print(&quot;Smooth, sweet and delicious.&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;Oreo/Cookies &amp; Cream&quot;: print(&quot;What kind of cookies? And pure cream?&quot;) return 75 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 12: if realmsg == &quot;A&quot; or realmsg == &quot;Sweatshirt and sweatpants&quot;: print(&quot;Nice and comfy.&quot;) return 100 elif realmsg == &quot;B&quot; or realmsg == &quot;Pajamas&quot;: print(&quot;Nice and comfy.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Full outfit just in case&quot;: print(&quot;Prepated, but restrictive.&quot;) return 75 elif realmsg == &quot;D&quot; or realmsg == &quot;Birthday suit&quot;: print(&quot;A bit haphazard, but I appreciate the spirit.&quot;) return 90 elif realmsg == &quot;E&quot; or realmsg == &quot;Other&quot;: print(&quot;You walk in the middle of the fork in the road.&quot;) return 80 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 13: if realmsg == &quot;A&quot; or realmsg == &quot;Something nonchalant&quot;: print(&quot;Gotta play it cool, right?&quot;) return 90 elif realmsg == &quot;B&quot; or realmsg == &quot;Something peppy and fun&quot;: print(&quot;Why not express how fun you are as a person?&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Something to make him/her laugh&quot;: print(&quot;Fun is one thing, but FUNNY really sells you.&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;Something endearingly mean&quot;: print(&quot;How cute...&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;Ghost the stud because of anxiety&quot;: print(&quot;Understandable.&quot;) return 90 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 14: if realmsg == &quot;A&quot; or realmsg == &quot;Today&quot;: print(&quot;At what? A KFC commercial?&quot;) return 75 elif realmsg == &quot;B&quot; or realmsg == &quot;This week&quot;: print(&quot;A real compassionate person, huh?&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;This month&quot;: print(&quot;A reasonable frequency, I&#39;d say.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;This year&quot;: print(&quot;Some pretty solid restraint you&#39;ve got there.&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;So long ago I lost track&quot;: print(&quot;Tear ducts of steel, eh?&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 else: print(&quot;There seems to have been an error! Let&#39;s start over. n n-- n&quot;) nameselect() def fr_check(): if fcheckval == 0: if realmsg == &quot;Sushi&quot; or realmsg == &quot;Pozole&quot; or realmsg == &quot;Pickle&quot; or realmsg == &quot;Pickles&quot;: print(&quot;Stop, you&#39;re making me hungry...&quot;) return 100 elif realmsg == &quot;Krabby Patty&quot;: print(&quot;You broke the two-word rule and you shall be rewarded for it...&quot;) return 100 elif realmsg == &quot;Ramen&quot; or realmsg == &quot;Burger&quot; or realmsg == &quot;Burgers&quot; or realmsg == &quot;Hamburger&quot; or realmsg == &quot;Hamburgers&quot;: print(&quot;Mmmmmm...&quot;) return 90 elif realmsg == &quot;Burrito&quot; or realmsg == &quot;Burritos&quot; or realmsg == &quot;Taco&quot; or realmsg == &quot;Tacos&quot; or realmsg == &quot;Enchiladas&quot;: print(&quot;Muy delicioso...&quot;) return 80 elif realmsg == &quot;Peanuts&quot; or realmsg == &quot;Peanut&quot; or realmsg == &quot;Nut&quot; or realmsg == &quot;Nuts&quot; or realmsg == &quot;Almond&quot; or realmsg == &quot;Almonds&quot; or realmsg == &quot;Peas&quot; or realmsg == &quot;Chickpeas&quot;: print(&quot;Just a sec, my throat is closing...&quot;) return 1 elif &quot; &quot; in realmsg: print(&#39;What part of &quot;one-word&quot; do you not understand? Redo!&#39;) retry() return else: print(&quot;Hmm... That doesn&#39;t sound too bad...&quot;) return 75 elif fcheckval == 1: fr_invalretry(realmsg) if int(realmsg) &gt;= 130: print(&quot;Don&#39;t talk to me, talk to Guinness!&quot;) return 5 elif int(realmsg) &gt;= 50: print(&quot;G o o d t o k n o w . nI w i l l s p e a k e x t r a s l o w l y . nJust kidding.&quot;) return 10 elif name == &quot;Kendall&quot; and int(realmsg) &gt;= 16: print(&quot;Cougar. nMine.&quot;) return 100 elif int(realmsg) &gt;= 19: print(&quot;A certain feline creature comes to mind... nErr, umm...&quot;) return 75 elif int(realmsg) &lt;= 10: print(&quot;How did you even get here?&quot;) return 5 elif int(realmsg) &lt; 15: print(&quot;Woah, what are you doing here, kiddo?&quot;) return 5 else: print(&quot;Within an ideal range...&quot;) return 100 elif fcheckval == 2: fr_invalretry(realmsg) if int(realmsg) == 211: print(&quot;Perfection.&quot;) return 100 elif int(realmsg) == 23: print(&quot;Beautiful.&quot;) return 90 elif int(realmsg) == 27 or int(realmsg) == 36 or int(realmsg) == 64 or int(realmsg) == 12 or int(realmsg) == 6: print(&quot;Pretty cool number you&#39;ve got there.&quot;) return 80 else: print(&quot;You do you, pal.&quot;) return 70 elif fcheckval == 3: fr_invalretry(realmsg) if int(realmsg) == 0: print(&quot;Have you no respect for your bloodline?&quot;) return 100 elif int(realmsg) == 1: print(&quot;Yeah, even one can be a handful, huh?&quot;) return 80 elif int(realmsg) == 2: print(&quot;Why not give &#39;em a friend?&quot;) return 90 elif int(realmsg) == 3: print(&quot;Nice round number.&quot;) return 100 elif int(realmsg) == 4: print(&quot;Hmm...maybe some twins in there...&quot;) return 80 else: print(&quot;How ambitious...&quot;) return 60 elif fcheckval == 4: fr_invalretry(realmsg) if int(realmsg) == 0: print(&quot;Awfully picky, aren&#39;t you?&quot;) return 80 elif int(realmsg) &lt;= 1: print(&quot;A little bit of breathing room, I guess...&quot;) return 90 elif int(realmsg) &lt;= 2: print(&quot;I think that&#39;s quite fair.&quot;) return 100 elif int(realmsg) &lt;= 3: print(&quot;I can see that...in adult circumtances.&quot;) return 100 elif int(realmsg) &lt;= 8: print(&quot;Pretty lenient...&quot;) return 90 elif int(realmsg) &lt;= 15: print(&quot;Now we&#39;re getting into criminal range...&quot;) return 75 else: print(&quot;I have to make a phone call...&quot;) return 20 elif fcheckval == 5: if realmsg == &quot;Cornelius&quot; or realmsg == &quot;Fido&quot; or realmsg == &quot;Tony&quot; or realmsg == &quot;Tigger&quot; or realmsg == &quot;Tux&quot; or realmsg == &quot;Chili&quot;: print(&quot;Couldn&#39;t pick a better name myself!&quot;) return 100 elif realmsg == &quot;Carmela&quot; or realmsg == &quot;Leo&quot;: print(&quot;No, they&#39;re in the right home for now.&quot;) return 90 elif realmsg == &quot;Worf&quot;: print(&quot;Who would name a cat that? Why not Tony?&quot;) return 80 elif realmsg == &quot;Mittens&quot;: print(&quot;Under the right circumstances...&quot;) return 90 elif realmsg == &quot;Jibanyan&quot; or realmsg == &quot;Rudy&quot;: print(&quot;I can&#39;t believe you answered like that. You&#39;re so...lame...&quot;) return 90 else: print(&quot;Interesting idea...&quot;) return 70 elif fcheckval == 6: if realmsg == &quot;Drew&quot; or realmsg == &quot;Kendall&quot; or realmsg == &quot;Louis&quot; or realmsg == &quot;Andrew&quot;: print(&quot;You really know how to get me...&quot;) return 100 elif name == &quot;Kendall&quot;: print(&quot;Good to know...&quot;) return 100 elif realmsg == &quot;Ryan&quot; or realmsg == &quot;James&quot;: print(&quot;だが断る！&quot;) return 0 elif realmsg == name: if narcissism == 1: print(&quot;You name both your son AND your daughter after yourself? nWouldn&#39;t that get confusing?&quot;) return 0 narcissism = 1 print(&quot;Yeesh, you want a kid named&quot; + realmsg + &quot;AND you&#39;re a narcissist?&quot;) return 50 else: print(&quot;I see...&quot;) return 80 elif fcheckval == 7: if realmsg == &quot;Kendall&quot; or realmsg == &quot;Chloe&quot; or realmsg == &quot;Hope&quot; or realmsg == &quot;Drew&quot;: print(&quot;Perfection.&quot;) return 100 elif realmsg == &quot;Michelle&quot; or realmsg == &quot;Lauren&quot; or realmsg == &quot;Veronica&quot;: print(&quot;At least wait a couple generations before reuse! Geez...&quot;) return 90 elif name == &quot;Kendall&quot;: print(&quot;Good to know...&quot;) return 100 elif realmsg == &quot;Ryan&quot; or realmsg == &quot;Alyssa&quot; or realmsg == &quot;Laila&quot;: print(&quot;だが断る！&quot;) return 0 elif realmsg == name: if narcissism == 1: print(&quot;You name both your son AND your daughter after yourself? nWouldn&#39;t that get confusing?&quot;) return 0 narcissism = 1 print(&quot;Yeesh, you want a kid named&quot; + realmsg + &quot;AND you&#39;re a narcissist?&quot;) return 50 else: print(&quot;I see...&quot;) return 80 elif fcheckval == 8: fr_invalretry(realmsg) if int(realmsg) == lucky: print(&quot;Way to go! It&#39;s your lucky day!&quot;) return 100 elif name == &quot;Drew&quot; and score &gt;= 900: print(&quot;You didn&#39;t get lucky. But you made the RNG so you win.&quot;) return 100 elif int(realmsg) == (lucky + 1) or int(realmsg) == (lucky - 1): print(&quot;Ah, so close! Not quite, though...&quot;) return 50 elif int(realmsg) &gt; lucky: print(&quot;You seem to have overshot just a bit! Too bad...&quot;) return 0 elif int(realmsg) &lt; lucky: print(&quot;You seem to have undershot a bit! Too bad...&quot;) return 0 else: print(&quot;Not quite! Sorry about that...&quot;) return 0 else: print(&quot;There seems to have been an error! Let&#39;s start over. n n-- n&quot;) nameselect() mc_prompts = [ &quot;Which season of SpongeBob is the best? na) 1 nb) 2 nc) 3 nd) 4 ne) 5 nf) 6 ng) 7 nh) 8 ni) 9 nj) 10 nk) 11 nl) 12 nm) 13&quot;, &quot;Which of these school subjects is the WORST? na) Math nb) Science nc) English nd) History ne) PE nf) Music/Fine Arts&quot;, &quot;Let&#39;s be honest: when did the Pokémon series REALLY start to decline? na) Generation 5 nb) Generation 6 nc) Generation 7 nd) Generation 8&quot;, &quot;Which of these ice cream flavors beats out the rest? na) Vanilla nb) Chocolate nc) Strawberry nd) Rainbow Sherbet ne) Mint Chocolate Chip nf) Cookies and Cream ng) Cotton Candy nh) Watermelon ni) Pralines and Cream nj) Reese&#39;s Peanut Butter Cup&quot;, &quot;Pick your favorite music genre (out of these): na) Pop nb) Rock nc) Country nd) Punk/Ska ne) Jazz nf) Classical ng) Lo-fi nh) Movie/Game Soundtracks ni) K-Pop&quot;, &quot;What is your favorite color? na) Red nb) Orange nc) Yellow nd) Green ne) Blue nf) Purple ng) Brown nh) Black ni) Pink nj) White nk) Clear&quot;, &quot;What kind of movie would you be most interested in watching? na) Action nb) Comedy nc) Horror nd) Rom-com ne) Drama nf) Musical&quot;, &quot;Which of these qualities is most important in a partner? na) Appearance nb) Personality nc) Intelligence nd) Values ne) All of the above&quot;, &quot;If an older man drank your drink after being asked to watch it nwhile you used the bathroom at a concert, would you confront him? na) Definitely nb) Maybe nc) Probably not nd) Definitely not ne) I&#39;d ask my date to confront him&quot;, &quot;Which kind of (common) pet would you prefer to own? na) Dog nb) Cat nc) Fish nd) Hampster/Guinea Pig ne) Bunny nf) Giraffe&quot;, &quot;How often do you usually shower? na) Once a day nb) More than once per day nc) Once every other day nd) Once a week ne) What is a shower?&quot;, &quot;What is the correct milkshake flavor? na) Vanilla nb) Chocolate nc) Strawberry nd) Oreo/Cookies &amp; Cream&quot;, &quot;It&#39;s a lazy day at home. No plans at the moment. What do you wear? na) Sweatshirt and sweatpants nb) Pajamas nc) Full outfit just in case nd) Birthday suit ne) Other&quot;, &quot;A hot stud you really like just asked for your number! What do you text? na) Something nonchalant nb) Something peppy and fun nc) Something to make him/her laugh nd) Something endearingly mean ne) Ghost the stud because of anxiety&quot;, &quot;When was the last time you cried? na) Today nb) This week nc) This month nd) This year ne) So long ago I lost track&quot; ] fr_prompts = [ &quot;What is your favorite food? (Pick a one-word food, please.)&quot;, &quot;How old are you? (Use numeric digits, please.)&quot;, &quot;What is your favorite number? (Use numeric digits, please.)&quot;, &quot;If you were to start a family, how many children would you have? (Use numeric digits, please.)&quot;, &quot;What is the largest age difference (in years) you&#39;re willing to look past in a relationship? n(Use numeric digits, please.)&quot;, &quot;You adopt a cat of unspecified gender! What do you call it?&quot;, &quot;Your son is born! What is his name?&quot;, &quot;Your daughter is born! What is her name?&quot;, &quot;Feeling lucky? Pick a number between 1 and 10...&quot; ] nameselect() print(&quot;Excellent! Your name has been saved anonymously to a public database. nErr, um...&quot;) print(&quot;Please select a gender! na) Male nb) Female nc) Other&quot;) gen_select = input() if gen_select == &quot;a&quot; or gen_select == &quot;Male&quot; or gen_select == &quot;male&quot;: gender = &quot;M&quot; print(&quot;Good to meet you then, big man!&quot;) elif gen_select == &quot;b&quot; or gen_select == &quot;Female&quot; or gen_select == &quot;female&quot;: gender = &quot;F&quot; print(&quot;Why, how do you do, m&#39;lady? nErr...ehem!&quot;) else: gender = &quot;O&quot; print(&quot;How curious...&quot;) def namescrew(): global fakename if name[0] == &quot;A&quot; and (gender == &quot;M&quot; or gender == &quot;O&quot;): fakename = &quot;AJar&quot; elif name[0] == &quot;A&quot; and gender == &quot;F&quot;: fakename = &quot;Aliciaptor&quot; elif name[0] == &quot;B&quot; and gender == &quot;M&quot;: fakename = &quot;Boristocrat&quot; elif name[0] == &quot;B&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Bailington&quot; elif name[0] == &quot;C&quot; and gender == &quot;M&quot;: fakename = &quot;Carlston&quot; elif name[0] == &quot;C&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Charlise&quot; elif name[0] == &quot;D&quot; and gender == &quot;M&quot;: fakename = &quot;Drevious&quot; elif name[0] == &quot;D&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Dremselle&quot; elif name[0] == &quot;E&quot; and gender == &quot;M&quot;: fakename = &quot;Ebbie&quot; elif name[0] == &quot;E&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Elvia&quot; elif name[0] == &quot;F&quot; and gender == &quot;M&quot;: fakename = &quot;Felvis&quot; elif name[0] == &quot;F&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Freaky&quot; elif name[0] == &quot;G&quot; and gender == &quot;M&quot;: fakename = &quot;Gooby&quot; elif name[0] == &quot;G&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Glorbis&quot; elif name[0] == &quot;H&quot; and gender == &quot;M&quot;: fakename = &quot;Harvrey&quot; elif name[0] == &quot;H&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Helenena&quot; elif name[0] == &quot;I&quot; and gender == &quot;M&quot;: fakename = &quot;Inglo&quot; elif name[0] == &quot;I&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Ingla&quot; elif name[0] == &quot;J&quot; and gender == &quot;M&quot;: fakename = &quot;Jeano&quot; elif name[0] == &quot;J&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Jacquavia&quot; elif name[0] == &quot;K&quot; and gender == &quot;M&quot;: fakename = &quot;Klevin&quot; elif name[0] == &quot;K&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Kraseche&quot; elif name[0] == &quot;L&quot; and gender == &quot;M&quot;: fakename = &quot;Levat&quot; + randv + &quot;te&quot; elif name[0] == &quot;L&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;L&quot; + randv + &quot;rvenza&quot; elif name[0] == &quot;M&quot; and gender == &quot;M&quot;: fakename = &quot;Mor&quot; + randv + &quot;svo&quot; elif name[0] == &quot;M&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Marv&quot; + randv + &quot;na&quot; elif name[0] == &quot;N&quot; and gender == &quot;M&quot;: fakename = &quot;Nels&quot; + randv + &quot;rlo&quot; elif name[0] == &quot;N&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Neebl&quot; + randv elif name[0] == &quot;O&quot; and gender == &quot;M&quot;: fakename = &quot;Orth&quot; + randv + &quot;to&quot; elif name[0] == &quot;O&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Orl&quot; + randv + &quot;va&quot; elif name[0] == &quot;P&quot; and gender == &quot;M&quot;: fakename = &quot;Pl&quot; + randv + &quot;plo&quot; elif name[0] == &quot;P&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Pro&quot; + randv + &quot;da&quot; elif name[0] == &quot;Q&quot; and gender == &quot;M&quot;: fakename = &quot;Qual&quot; + randv + &quot;cov&quot; elif name[0] == &quot;Q&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Quiz&quot; + randv + &quot;ll&quot; elif name[0] == &quot;R&quot; and gender == &quot;M&quot;: fakename = &quot;R&quot; + randv + &quot;llapso&quot; elif name[0] == &quot;R&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Rop&quot; + randv + &quot;relle&quot; elif name[0] == &quot;S&quot; and gender == &quot;M&quot;: fakename = &quot;Sl&quot; + randv + &quot;cco&quot; elif name[0] == &quot;S&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Slo&quot; + randv + &quot;na&quot; elif name[0] == &quot;T&quot; and gender == &quot;M&quot;: fakename = &quot;Tr&quot; + randv + &quot;lbo&quot; elif name[0] == &quot;T&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Test&quot; + randv + &quot;ca&quot; elif name[0] == &quot;U&quot; and gender == &quot;M&quot;: fakename = &quot;Ulyss&quot; + randv + &quot;s&quot; elif name[0] == &quot;U&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Urs&quot; + randv + &quot;loa&quot; elif name[0] == &quot;V&quot; and gender == &quot;M&quot;: fakename = &quot;Volt&quot; + randv + &quot;gio&quot; elif name[0] == &quot;V&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Ver&quot; + randv + &quot;nclessa&quot; elif name[0] == &quot;W&quot; and gender == &quot;M&quot;: fakename = &quot;Welch&quot; + randv + &quot;llo&quot; elif name[0] == &quot;W&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Wr&quot; + randv + &quot;nna&quot; elif name[0] == &quot;X&quot; and gender == &quot;M&quot;: fakename = &quot;Xan&quot; + randv + &quot;llo&quot; elif name[0] == &quot;X&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Xandra&quot; elif name[0] == &quot;Y&quot; and gender == &quot;M&quot;: fakename = &quot;Yos&quot; + randv + &quot;shi&quot; elif name[0] == &quot;Y&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Yarr&quot; + randv + &quot;ppa&quot; elif name[0] == &quot;Z&quot; and gender == &quot;M&quot;: fakename = &quot;Zoom&quot; + randv + &quot;llo&quot; else: fakename = &quot;Zerkl&quot; + randv + &quot;va&quot; print(&quot;Okay, &quot; + name + &quot;, I think it&#39;s time for us to begin the survey.&quot;) def question1(): print(mc_prompts[int(mc_select[0])]) global quesval quesval = 1 global mcheckval mcheckval = mc_select[0] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question1() def question2(): print(mc_prompts[int(mc_select[1])]) global quesval quesval = 2 global mcheckval mcheckval = mc_select[1] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question2() def question3(): print(mc_prompts[int(mc_select[2])]) global quesval quesval = 3 global mcheckval mcheckval = mc_select[2] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question3() def question4(): print(mc_prompts[int(mc_select[3])]) global quesval quesval = 4 global mcheckval mcheckval = mc_select[3] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question4() def question5(): print(mc_prompts[int(mc_select[4])]) global quesval quesval = 5 global mcheckval mcheckval = mc_select[4] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question5() if score &lt;= 250: print(&quot;You really know how to answer opinion questions wrong, huh? nLet&#39;s hope this doesn&#39;t continue...&quot;) def question6(): print(mc_prompts[int(mc_select[5])]) global quesval quesval = 6 global mcheckval mcheckval = mc_select[5] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question6() def question7(): print(mc_prompts[int(mc_select[6])]) global quesval quesval = 7 global mcheckval mcheckval = mc_select[6] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question7() def question8(): print(mc_prompts[int(mc_select[7])]) global quesval quesval = 8 global mcheckval mcheckval = mc_select[7] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question8() def question9(): print(mc_prompts[int(mc_select[8])]) global quesval quesval = 9 global mcheckval mcheckval = mc_select[8] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question9() def question10(): print(mc_prompts[int(mc_select[9])]) global quesval quesval = 10 global mcheckval mcheckval = mc_select[9] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question10() mcpoints = score mcscore = str(float(f&#39;{(mcpoints / 10):.1f}&#39;)) namescrew() print(&quot;That concludes the multiple choice portion of this quiz!&quot;) print(&quot;Alright, &quot; + fakename + &quot;, just five more free response questions to go.&quot;) print(&#39;Huh? What do you mean your name isn &#39;t &quot;&#39; + fakename + &#39;&quot;? What is it, then?&#39;) nmae2 = input() name2 = nmae2.capitalize() print(&quot;Ohh, it was &quot; + name2 + &quot;...&quot;) if name2 != name: print(&quot;Are you sure? That doesn&#39;t sound quite right...&quot;) elif name2 == name: print(&quot;Hah! I knew it started with &quot; + name[0] + &quot;!&quot;) print(&quot;Sorry about that, pal! Let&#39;s go ahead and continue. nSay whatever you want! Just make sure to answer honestly.&quot;) def question11(): print(fr_prompts[int(fr_select[0])]) global quesval quesval = 11 global fcheckval fcheckval = fr_select[0] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question11() def question12(): print(fr_prompts[int(fr_select[1])]) global quesval quesval = 12 global fcheckval fcheckval = fr_select[1] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question12() def question13(): print(fr_prompts[int(fr_select[2])]) global quesval quesval = 13 global fcheckval fcheckval = fr_select[2] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question13() def question14(): print(fr_prompts[int(fr_select[3])]) global quesval quesval = 14 global fcheckval fcheckval = fr_select[3] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question14() def question15(): print(fr_prompts[int(fr_select[4])]) global quesval quesval = 15 global fcheckval fcheckval = fr_select[4] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question15() frpoints = score - mcpoints frscore = str(float(f&#39;{(frpoints / 5):.1f}&#39;)) finalfloat = (score / 15) finalscore = str(float(f&#39;{finalfloat:.1f}&#39;)) def finalsheet(): print(&quot; n~~~ n n&quot; + name + &quot;: n tMultiple choice score: &quot; + mcscore + &quot;%. n tFree response score: &quot; + frscore + &quot;%. n tFinal score: &quot; + finalscore + &quot;%.&quot;) print(&quot; nAlright, that concludes the survey! Thank you for your patience.&quot;) if youloseidiot == 1: print(&quot;Unfortunately...&quot;) print(&quot;You have defied me with excessive frequency. nYou&#39;ll have to try the quiz again.&quot;) youloseidiot = 0 score = 0 nameselect() if name == &quot;Kendall&quot;: print(&quot;You scored 100.0%. More than 100.0%. Of course you do. nYes, it&#39;s scored. I already spoiled that. nYou really promise forever?&quot;) forever = input() if forever in affirmative: print(&quot;I love you.&quot;) elif forever in negative: print(&quot;Oh...I see...&quot;) else: print(&quot;I&#39;ll give you the benefit of the doubt and say it was a typo...&quot;) elif name == &quot;Drew&quot; and gender == &quot;M&quot; and score &gt;= 1350: print(&quot;Good job testing. The final score was &quot; + finalscore + &quot;%.&quot;) if finalfloat &lt; 100.0: print(&quot;Those point losses had better be from VSCode errors...&quot;) elif gender == &quot;M&quot; or gender == &quot;O&quot;: print(&quot;Based on your results, we will calculate your eligibility to serve THE MASTER. nTHE MASTER has certain criteria he wishes to see met.&quot;) print(&quot;...?&quot;) print(&quot;You&#39;re confused? What do you mean? nWas it not clear that this was your eligibility interview? nYou need to do better research.&quot;) print(&quot;Anyway, here comes your score...&quot;) print(finalscore + &quot;%!&quot;) if finalfloat == 100.0: print(&quot;WE HAVE DONE IT! We have found the perfect candidate! nTHE MASTER shall feed on your willingness to contribute. nYou shall make the preparations. nYou shall find salvation in serving him. nY u i h o e h m nI t m . . nERROR nE R R n~~~G~N~I~H~C~T~A~W~~S~I~~E~H~~~&quot;) nameselect() elif finalfloat &gt;= 80.0: print(&quot;Excellent work. THE MASTER will be happy to work with you. nFind some way to fix those errors, though, please...&quot;) elif finalfloat &gt;= 60.0: print(&quot;Your score is low enough to displease THE MASTER. nYou would have to be significantly more pleasant in-person to win him over. nI am very sorry, but please consider your eligibility low...&quot;) elif finalfloat &lt; 60.0: print(&quot;You are foolish for thinking you are worthy of standing in his presence. nStay out of THE MASTER&#39;s sight, or your thoughtlessness will be punished.&quot;) elif gender == &quot;F&quot;: print(&quot;Based on your results, we will calculate your eligibility to wed THE MASTER. nTHE MASTER may yet have found his bride after the long search. nIf only THE MASTER could see your live countenance.&quot;) print(&quot;...?&quot;) print(&quot;You&#39;re confused? What do you mean? nWas it not clear that this was your eligibility interview? nYou need to do better research.&quot;) print(&quot;Anyway, here comes your score...&quot;) print(finalscore + &quot;%!&quot;) if finalfloat == 100.0: print(&quot;WE HAVE DONE IT! We have found the perfect bride! nTHE MASTER shall feed on your willingness to contribute. nYou shall carry on his lineage. nYou shall find salvation in serving him. nY u i h o e h m nI t m . . nERROR nE R R n~~~G~N~I~H~C~T~A~W~~S~I~~E~H~~~&quot;) nameselect() elif finalfloat &gt;= 80.0: print(&quot;You are certainly a candidate with such a high score. nTHE MASTER will keep you in mind...&quot;) elif finalfloat &gt;= 60.0: print(&quot;Unfortunately, THE MASTER&#39;s standards for a bride are higher than you fit. nYou would have to be awfully attractive to win him over. nI am very sorry, ma&#39;am.&quot;) elif finalfloat &lt; 60.0: print(&quot;You are foolish for thinking you are worthy of standing in his presence. nStay out of THE MASTER&#39;s sight, or your thoughtlessness will be punished.&quot;) print(&quot;Do you wish to see a written report of your results?&quot;) reportconsent = input() if reportconsent in affirmative: print(&quot;Understood. Printing...&quot;) finalsheet() elif reportconsent in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Response unfamiliar. Presuming REPORT = FALSE. Have a nice day.&quot;) . Welcome to a deeply important survey! It will consist of 15 questions, 10 multiple choice and five free response. It should be easy. Be sure to answer one of the provided options for multiple choice questions. Put whatever you want for open-ended questions, but answer honestly! Before we begin, what is your first name? John... John? Eh, could&#39;ve been better. Excellent! Your name has been saved anonymously to a public database. Err, um... Please select a gender! a) Male b) Female c) Other Good to meet you then, big man! Okay, John, I think it&#39;s time for us to begin the survey. What is the correct milkshake flavor? a) Vanilla b) Chocolate c) Strawberry d) Oreo/Cookies &amp; Cream You chose option &#39;B.&#39; The ice cream classic...milkshake-ified. What is your favorite color? a) Red b) Orange c) Yellow d) Green e) Blue f) Purple g) Brown h) Black i) Pink j) White k) Clear You chose option &#39;K.&#39; What do you mean it&#39;s not a color? How close-minded. Let&#39;s be honest: when did the Pokémon series REALLY start to decline? a) Generation 5 b) Generation 6 c) Generation 7 d) Generation 8 You chose option &#39;D.&#39; The box legendary is a dog with a sword in its mouth. What kind of movie would you be most interested in watching? a) Action b) Comedy c) Horror d) Rom-com e) Drama f) Musical You chose option &#39;A.&#39; *Explosion* *Laser* *Michael Bay* How often do you usually shower? a) Once a day b) More than once per day c) Once every other day d) Once a week e) What is a shower? You chose option &#39;A.&#39; Perfectly reasonable. When was the last time you cried? a) Today b) This week c) This month d) This year e) So long ago I lost track You chose option &#39;D.&#39; Some pretty solid restraint you&#39;ve got there. If an older man drank your drink after being asked to watch it while you used the bathroom at a concert, would you confront him? a) Definitely b) Maybe c) Probably not d) Definitely not e) I&#39;d ask my date to confront him You chose option &#39;A.&#39; Try not to get into TOO much trouble... Which season of SpongeBob is the best? a) 1 b) 2 c) 3 d) 4 e) 5 f) 6 g) 7 h) 8 i) 9 j) 10 k) 11 l) 12 m) 13 You chose option &#39;Vscode error.&#39; That&#39;s an invalid response! Make sure to pick one of the letters. Which season of SpongeBob is the best? a) 1 b) 2 c) 3 d) 4 e) 5 f) 6 g) 7 h) 8 i) 9 j) 10 k) 11 l) 12 m) 13 You chose option &#39;I.&#39; Yes, the revival! Points for precision! Well done. Which of these ice cream flavors beats out the rest? a) Vanilla b) Chocolate c) Strawberry d) Rainbow Sherbet e) Mint Chocolate Chip f) Cookies and Cream g) Cotton Candy h) Watermelon i) Pralines and Cream j) Reese&#39;s Peanut Butter Cup You chose option &#39;E.&#39; Sometimes, it just hits the spot. Pick your favorite music genre (out of these): a) Pop b) Rock c) Country d) Punk/Ska e) Jazz f) Classical g) Lo-fi h) Movie/Game Soundtracks i) K-Pop You chose option &#39;E.&#39; So groovy. That concludes the multiple choice portion of this quiz! Alright, Jeano, just five more free response questions to go. Huh? What do you mean your name isn&#39;t &#34;Jeano&#34;? What is it, then? Ohh, it was John... Hah! I knew it started with J! Sorry about that, pal! Let&#39;s go ahead and continue. Say whatever you want! Just make sure to answer honestly. Feeling lucky? Pick a number between 1 and 10... 7, huh...? Ah, so close! Not quite, though... What is your favorite food? (Pick a one-word food, please.) Spaghetti, huh...? Hmm... That doesn&#39;t sound too bad... If you were to start a family, how many children would you have? (Use numeric digits, please.) 2, huh...? Why not give &#39;em a friend? What is the largest age difference (in years) you&#39;re willing to look past in a relationship? (Use numeric digits, please.) 10, huh...? Now we&#39;re getting into criminal range... You adopt a cat of unspecified gender! What do you call it? Tony, huh...? Couldn&#39;t pick a better name myself! Alright, that concludes the survey! Thank you for your patience. Based on your results, we will calculate your eligibility to serve THE MASTER. THE MASTER has certain criteria he wishes to see met. ...? You&#39;re confused? What do you mean? Was it not clear that this was your eligibility interview? You need to do better research. Anyway, here comes your score... 83.3%! Excellent work. THE MASTER will be happy to work with you. Find some way to fix those errors, though, please... Do you wish to see a written report of your results? Understood. Printing... ~~~ John: Multiple choice score: 86.0%. Free response score: 78.0%. Final score: 83.3%. .",
            "url": "https://drewreed2005.github.io/realdrew/survey/",
            "relUrl": "/survey/",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Week 1 Notes",
            "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . . Commands from &quot;Python Hello&quot; . In this section, I will put the commands found in &quot;Python Hello&quot; in terms that are easy for someone who has been coding for, say, one week to understand. . Print and Static Text . The &quot;print&quot; command can be used to output static text. . print(&quot;This is the static text produced.&quot;) print(&quot;It can be found within the quotation marks in the parentheses.&quot;) . This is the static text produced. It can be found within the quotation marks in the parentheses. . You can also add variables to the printed static text with the &quot;+&quot; symbol. . x = 5 + 3 print(&quot;The sum of 5 and 3 is &quot; + str(x) + &quot;.&quot;) . The sum of 5 and 3 is 8. . This is just scratching the surface. . &quot;if&quot; and &quot;else&quot; . The &quot;if&quot; and &quot;else&quot; commands can make certain things happen under certain conditions. . Instead of giving a copius amount of examples, just know that anything you can make happen unconditionally with Python can be restricted to occur under only certain situations with &quot;if.&quot; How to handle the remaining cases is determined by &quot;else,&quot; which doesn&#39;t necessarily have to be present. . x = 4 * 3 # Remember to use a colon at the end of the &quot;if&quot; statement to activiate the condition. if x == 12: print(&quot;Four times three is 12.&quot;) else: print(&quot;Something went wrong.&quot;) # We use &quot;else&quot; above for when x is equal to something different. . Four times three is 12. . But why does it matter that we can do that? How can &#39;x&#39; be equal to anything other than 12 with the set factors of 3 and 4? . Input . Input allows the person interacting with the code to type in a custom response to a prompt. . from tkinter import Y x = input(&quot;What is your favorite number?&quot;) # Fastpages does not allow one to input a response in the actual page. # For the sake of demonstration, &#39;x&#39; has been set to equal 5. # The syntax looks like this if you want a separately printed question and response. print(&quot;What is your other favorite number?&quot;) y = input() # The variable &#39;y&#39; has been set to equal 3. # Now the &quot;if&quot; command will vary based on what we said. z = int(x) * int(y) if z == 12: print(&quot;The product of your favorite numbers is 12.&quot;) else: print(&quot;The product of your favorite numbers is not 12.&quot;) . What is your other favorite number? The product of your favorite numbers is not 12. . Extra Learning . Here are some extra commands and functions I found out about on my own. They can be very helpful in tandem with the rest of these functions. . &quot;elif&quot; . This adds an additional condition to an &quot;if&quot; command. It goes between &quot;if&quot; and &quot;else&quot; vertically. . x = input(&quot;What is your favorite number?&quot;) y = input(&quot;What is your second favorite number?&quot;) z = int(x) * int(y) if z == 12: print(&quot;The product of your favorite numbers is 12.&quot;) elif z == 15: print(&quot;The product of your favorite numbers is 15.&quot;) else: print(&quot;The product of your favorite numbers is not 12 or 15.&quot;) . The product of your favorite numbers is 15. . Algebra . All the algebra stuff above was not taught in the lesson. I figured it out on my own. . &quot;+&quot; = Addition | &quot;-&quot; = Subtraction | &quot;*&quot; = Multiplication | &quot;/&quot; = Division | &quot;&gt;&quot; or &quot;&lt;&quot; = Less Than or Greater Than (often for &#39;if&#39; conditions) | &quot;=&quot; = Equating a value/string | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/26/week1learning.html",
            "relUrl": "/2022/08/26/week1learning.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Day 5",
            "content": "More Hacks from This Week . Remember Day 4? Maybe not. Here were the three things I set out to do by the end of today: . Create a page from a “.docx” file with Google Docs. | A page with vocabulary and notes from the “Psychology and the Good Life” speech by Laurie Santos. | (Optional, not for class) A fun little survey idea I had. | . Let’s go over what I ended up doing. . Psychology and the Good Life Notes . I was initially planning to focus on vocabulary presented in the video and how to apply it, but it ended up being almost completely devoid of any particular “vocabulary.” Instead, though I did have a definition for the “GI Joe Fallacy,” I ended up just taking some general notes from the video. . The whole reason for the “vocabulary” aspect was a certain note in various Hacks and objectives about using my site to collect and define vocabulary. . I hadn’t really considered that I already basically did that with Python in my notes from about day ago. I think I’m safe to put that goal to rest for now. . Trying .docx Files . The formatting of the notes is quite visibly different. This is because it was initially a Google Doc converted to a Microsoft Word file. To fit a certain Hack, I put it in the _word folder and let it automatically become a post. . The only problem with this is that I am unable to take it out of the “Posts” list as far as I’m aware. I cannot add front matter to the .docx file so I cannot use hide: true. Otherwise, the formatting is unique and interesting. I’m not sure if I’d willingly go back to this format in the future. . Change of Plans . Initially, I planned on making the Day 5 post a Word document rather than the Focus and Habits notes, but ultimately it made more sense to take notes in a format I’m more used to. Disregard what I implied in my Day 4 conclusion. . This Weekend? . It was a busy day, so I never got to make the for-fun survey. I’ll probably mess around over the weekend and do it. . Since I started from scratch this Monday, there’s no precedent set for posting on weekends. Do I plan on making Day 6 on Saturday and 7 on Sunday? . No. I’ve spent time considering it, but especially after what was discussed in the Focus and Habits video, I’d like to balance my time to spend most of my weekends with friends and family rather than doing gratuitous amounts of school work. . I’ll make my Review Ticket to show everything I’ve done as soon as possible and be done there. . See you next week! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/26/day5.html",
            "relUrl": "/daily/2022/08/26/day5.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Focus And Habits Notes",
            "content": "Laurie Santos: Psychology and the Good Life . At the Aspen Ideas Festival . Taken from a .docx file . Students are often so stressed and busy that they feel they lack the time to do things that supplement their education like reading . At Yale, around a third are so depressed “it’s difficult to function,” 40% report feeling hopeless and over 60% report crippling anxiety . | . | Including healthy habits as a suggestion in a class syllabus managed to greatly increase interest in the class and actually was followed by Yale students . | About 50% of our happiness is not inherited; we have the power to affect 50% of our happiness if we set out to . | Life circumstances matter significantly less to our happiness than people think . People who have a terrible event occur to them tend to see more meaning in life . | . | Improving our happiness through behaviors (about 40% of happiness controlled by this) takes a lot of hard, consistent effort . | GI Joe Fallacy: Knowing is not half the battle, it’s a lot less; following through is more . | Our intuitions lie to us about what will make us happy . Having more money, for example, would increase our happiness because it generally means more stability, but the increase in happiness is not even close to linear as money increases . Happiness bump from $10k -&gt; $20k salary is vastly larger than $75k -&gt; $85k . | . | . | Prioritizing the people they care about is a very important part of living a happy life . People on a train asked to try to make a connection with a stranger on the train were much happier than those who were asked to keep to themselves . The solitude people would normally spend the time trying to do some work and failing to really accomplish anything, which led to frustration; those who talked with others took away something meaningful . | . | . | Helping others can greatly increase your happiness . A study showed that people who spent free money on themselves were much less happy both immediately and after a week than those who spent it on another . | . | Doing simple things to improve your physical health is significantly more effective at causing happiness than people realize . 30 minutes of cardio can have the same effect as taking Zoloft . | Getting proper sleep (high schoolers get 4-5 hours) can greatly improve mood, not just immune system . People getting as much sleep as high school students even for a short experimental time ended up having mood levels low enough to be considered clinically depressed . | . | . | One strong way to improve mood is to live more in the present rather than being absorbed by anxiety about the future . This also means staying in the moment when doing something unpleasurable rather than dreaming of a more pleasurable time . | Just being aware of your present situation helps you appreciate all the good . | Meditating even 10 minutes a day is enough to greatly improve your mood . | . | Prioritizing (leisure) time over money generally causes one to be happier . | . Now I have the knowledge…but this is far less than half the battle. . Ways I Can Improve my Mood (things I’m not already doing): . Pay more attention to friends and family, making sure to take advantage of opportunities to spend time together when possible . | Help others with things whenever possible . Will be a lot easier when WHAT Center starts . | . | Get back into an exercise routine, half an hour at least each day . | Set bedtime of 11:00 on days that homework allows, which will be easier to follow if I… . | Live in the moment to stay focused on less pleasurable things, like taking notes on a psychology video (ouch, sorry) . | When treating myself, focus on all of the enjoyable aspects about my situation . | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/26/Focus-and-Habits-Notes.html",
            "relUrl": "/2022/08/26/Focus-and-Habits-Notes.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Day 4",
            "content": ". Some Fun Hacks . There are quite a few ways to express understanding of the learning this week through my site. This may be a blog, but it’s also a place for me to collect my thoughts. Maybe these thoughts will reflect the effort and devotion I have to this class. . I’m having fun. I don’t say it often. . Python Quiz . I technically finished the quiz at some point on Day 3, but Day 4 was when everything was finalized and certain “Python Hello” hack goals (percentage score) were met. . I wanted to go above and beyond “plagiar-inspiration,” so anything I was “plagiar-inspired” by has been edited to a degree to prove I understand the reason the functions behind it work. For example, the def command paired with question_and_response usually spat out a slightly different reaction to inputs, which I changed to fit the more casual, personal tone of my own quiz. . Obviously, every question from “Python Hello” has been changed, though the subject matter is the same. There are now five questions. At the beginning, instead of using the getpass.getuser command to call the quiz-taker by his or her often inaccurate system username, I make the quiz ask for the quiz-taker’s name directly, which will be reused throughout. . (If you name yourself “Drew,” the code knows who you must be…) . To show proper understanding if commands (as well as independent research on elif commands), I put a score check two questions before the end which detects your score and gives a completely different response depending on the current number of correct responses. . If you score more than 60.0% (4/5 or 5/5), the quiz determines that you have passed. Otherwise, you have failed. . The quiz is now out on the site, though it’s only the code and outputs for the correct inputs. . Messing with ‘_pages’ . Hey, look at the top bar of the site! Check out those two new categories: “Notes” and “Quizzes and More.” That’s right, these new pages link directly to relevant resources. Please look forward to seeing updates to these pages. . (“Quizzes and More” generally don’t work on the Fastpages site directly. They run perfectly well in VSCode.) . This was a Hack on one of the APCSP instruction pages. . Python Notes . In the “Notes” section, you can find a link to a page full of notes about Python, specifically commands taught on the “Python Hello” page. . Though I have already mostly proven my understanding of those teachings with my Python Quiz and its fairly fluent use of those resources, I figured this would be a good opportunity to complete one of the other Hacks: mix Markdown and Code in a Jupyter Notebooks post and use # in Code cells to add commentary to visible code. I made sure to do both of these things multiple times throughout the page. . Page Relocation . Instead of keeping the Python Quiz and Random Number Generator on the main page with the rest of these posts, I have moved them both to the “Quizzes and More” section. Feel free to access them with the provided hyperlinks. . Bash and Showing my Stuff . As instructed in class, I used Bash to show the tools I have downloaded. The page used to exclusively found through “Search,” but you can also find it linked here and in the “Quizzes and More” page. . Plan for Day 5 . Here is the main place for thought collection. There are a few Hacks I have not fulfilled that I want to make sure to tomorrow: . Create a page from a “.docx” file with Google Docs. Maybe I’ll make Day 5’s post with that format… | A page with vocabulary and notes from the “Psychology and the Good Life” speech by Laurie Santos. This can be put in the “Notes” section. | In free time for fun: just a little survey! Instead of using a ratio of questions to correct answers to score, it will be a multiple choice survey with different percent increases and decreases depending on which response sucks the least. I’ll go into the math more if I end up making it (probably this weekend, after Day 5; we can talk about it on Day 6). | . Thanks for reading! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/25/day4.html",
            "relUrl": "/daily/2022/08/25/day4.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "I've Got the Power",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Anaconda Check . conda list . # packages in environment at /Users/mister_dew/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/mister_dew/Library/Jupyter/kernels/bash javascript /Users/mister_dew/Library/Jupyter/kernels/javascript python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://drewreed2005.github.io/realdrew/bashstuff/",
            "relUrl": "/bashstuff/",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post75": {
            "title": "Day 3",
            "content": "Squashing Bugs and New Ideas . After writing my daily post yesterday, I ended up working on making a quiz of my own (since it was listed under “Hacks” in the Python quiz page) and failed to make it work correctly. Because I did not understand the “input” Python function, all answers, correct or not, reacted as if they were incorrect. . With slightly more Python knowledge, I went to bed that night knowing I could definitely improve my old random number generator from Monday. So… . The Python Quiz . At first, yesterday, I started making a survey without even knowing it was a potential Hack for the week. The whole joke was going to be that it said there were no right or wrong answers, but only certain responses were “correct.” Just a little goofy thing. I wasn’t able to create the semi-diverse range of responses that would be based on anticipated answers because I was pretty tunnel-visioned into what was provided in that page. Later, I decided to do some independent research. . I then saw the tip to make a quiz about Python functions and reworked the survey. Plagiar-inspired by the Python quiz’s defined “question_and_answer” and “question_and_response” functions, I used the same basic template to make my own quiz that’s just a bit more personal. I decided to express my icnreasing fluency by asking for the user’s name (which is reused throughout the quiz), giving a status check halfway through the quiz, and determining whether or not the user failed based on their score. As was mentioned in the Hacks, I also used math to calculate the score percentage based on the ratio of correct answers to questions. . Work on this quiz is not quite finished. Please stay tuned for its full release. . The Random Number Generator . My random number generator can now be reset and retried as many times as the user wants. I decided, since I gave Python a defined identity the first time around, I would really lean into it by giving his dialogue a strange, quirky style. Like the first time, I also kept the option to generate a second random number for the user to get lucky. . However, this time, Python recognizes if the second generated number is the same as the first. As he says, he’ll share a secret with you if you manage to generate the same number twice…and no peeking in the code! . I even used some more complex math mixed with ‘if’ and ‘and’ functions to make Python give a special response if the two numbers are relatively close to each other, but not quite the same. . Have fun with that! You can access it right now. . What’s Coming Up? . I’m really just gonna focus on completing Hacks tasks from the APCSP fastpages as well as the Python quiz. As the RNG machine may imply, I have spent a minute or two minutes or half an hour or more messing with code for my own amusement, but as a fairly busy weekend approaches, I’ll make sure to buckle down. . More to come! Stay tuned… .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/24/day3.html",
            "relUrl": "/daily/2022/08/24/day3.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post76": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(prompt) msg = input() print(&quot;You said: &quot; + msg + &quot;.&quot;) return msg questions = 5 correct = 0 print(&quot;Hello! Welcome to Drew&#39;s super awesome (slightly plagiar-inspired) Python quiz!&quot;) print(&quot;You will be asked &quot; + str(questions) + &quot; questions about basic Python commands. All quiz responses should be in all lowercase letters.&quot;) print(&quot;Before we begin, what would you like me to call you?&quot;) bigboy = input() print(bigboy + &quot;? That&#39;s a cool name!&quot;) rsp = question_with_response(&quot;1. Let&#39;s start with the simplest function of all: how can you make Python display static text?&quot;) if rsp == &quot;print&quot;: print(&quot;That&#39;s right! Let&#39;s make things more interesting.&quot;) correct += 1 else: print(&quot;Not quite... The response we were looking for was &#39;print&#39;.&quot;) rsp = question_with_response(&quot;2. When using the &#39;if&#39; function to force a unique reaction for a specific scenario, which function lets you give a different response for ALL other answers?&quot;) if rsp == &quot;else&quot;: print(&quot;Good job! Let&#39;s continue...&quot;) correct += 1 else: print(&quot;Nope... Looks like you&#39;ll have to try something ELSE for that one.&quot;) rsp = question_with_response(&quot;3. This three-letter function can redefine a phrase to automate certain behaviors when used. What is it?&quot;) if rsp == &quot;def&quot;: print(&quot;Great job! Two more to go.&quot;) correct += 1 else: print(&quot;That&#39;s DEF-initely not it...&quot;) print(&quot;Let&#39;s see how you&#39;re doing so far, &quot; + bigboy + &quot;...&quot;) if correct == 3: print(&quot;Wow! 3/3! You&#39;re a natural. Let&#39;s get back to it.&quot;) elif correct == 2: print(&quot;2/3 isn&#39;t bad, you know. Get the next two right and you&#39;ll have a solid B minus!&quot;) elif correct == 1: print(&quot;1/3 isn&#39;t quite ideal, but it&#39;s better than nothing. Why not give these next two your best shot?&quot;) else: print(&quot;Really? None? ...I mean, you&#39;ve got two more chances to get some points on the board...&quot;) rsp = question_with_response(&quot;4. Which function allows the user to provide a custom response to a given prompt?&quot;) if rsp == &quot;input&quot;: print(&quot;That&#39;s right! You&#39;ve been using that the whole time, FYI.&quot;) correct += 1 else: print(&quot;Unfortunately, you seem to have INPUT an incorrect response.&quot;) rsp = question_with_response(&quot;5. The home stretch! To display a variable, for example, in printed static text, which symbol separates the variable from the rest of the quote?&quot;) if rsp == &quot;+&quot;: print(&quot;Nailed it!&quot;) correct += 1 elif rsp == &quot;plus&quot;: print(&quot;Nailed it!&quot;) correct += 1 else: print(&quot;Rough conclusion...definitely not a PLUS.&quot;) per_score = (correct / questions) * 100 print(bigboy + &quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;! That&#39;s &quot; + str(per_score) + &quot;%.&quot;) if correct &lt; 4: print(&quot;Too bad, though! You needed at least 4 out of 5 (80.0&quot; + &quot;%&quot; + &quot;) of the problems correct to pass. Why not reload and try again?&quot;) elif correct == 4: print(&quot;One mistake is perfectly okay! You still managed to pass this quiz. Congratulations!&quot;) else: print(&quot;You managed to pass with flying colors! A perfect score! Why didn&#39;t you make this quiz, then?&quot;) if bigboy == &quot;Drew&quot; and correct == 5: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) elif bigboy == &quot;drew&quot;: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) . Hello! Welcome to Drew&#39;s super awesome (slightly plagiar-inspired) Python quiz! You will be asked 5 questions about basic Python commands. All quiz responses should be in all lowercase letters. Before we begin, what would you like me to call you? ? That&#39;s a cool name! 1. Let&#39;s start with the simplest function of all: how can you make Python display static text? You said: . Not quite... The response we were looking for was &#39;print&#39;. 2. When using the &#39;if&#39; function to force a unique reaction for a specific scenario, which function lets you give a different response for ALL other answers? You said: . Nope... Looks like you&#39;ll have to try something ELSE for that one. 3. This three-letter function can redefine a phrase to automate certain behaviors when used. What is it? You said: . That&#39;s DEF-initely not it... Let&#39;s see how you&#39;re doing so far, ... Really? None? ...I mean, you&#39;ve got two more chances to get some points on the board... 4. Which function allows the user to provide a custom response to a given prompt? You said: . Unfortunately, you seem to have INPUT an incorrect response. 5. The home stretch! To display a variable, for example, in printed static text, which symbol separates the variable from the rest of the quote? You said: . Rough conclusion...definitely not a PLUS. , you scored 0/5! That&#39;s 0.0%. Too bad, though! You needed at least 4 out of 5 (80.0%) of the problems correct to pass. Why not reload and try again? .",
            "url": "https://drewreed2005.github.io/realdrew/week1quiz/",
            "relUrl": "/week1quiz/",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post77": {
            "title": "Day 2",
            "content": "Independent Endeavors . It takes a lot of investment in a class for me to go out of my way to apply my knowledge in ways not enforced by the teacher or class. Maybe computer science is my thing. . Research . Over summer, I spent some time looking over the things you could do with Python. One thing I always wanted to make for some strange reason was a random number generator. . From a mathematical standpoint, I have always been fascinated by the concept of probability. Given things like the butterfly effect and the way that various microscopic events and processes manipulate free will, even humans cannot truly create randomness. Unfortunately, computers really can’t either, but they can do their very best to replicate it. . I looked around on Google in my very minimal free time and found the “rand.integer” and “rand.range” commands. This is enough to create the basic RNG code I set out to. . What’s the point of a random number generator? . Ultimately, I want to use this RNG to add an element of unpredictability to my site. Maybe, after setting a variable, using “If” commands will allow me to create certain images, phrases, words, etc. based on which number is generated. Messing with which numbers do what and the possible range of generated numbers could make certain events more likely than others. . I also really like the concept of adding little Easter eggs for people who interact with the site. Maybe if you click on certain pages and get lucky, something goofy or unexpected appears. . There’s just a lot of fun to be had with unpredictability. . Current Obstacles . So I made a random number generator that works perfectly in the code of my website…but not on the website itself. . When the page reloads, the generated numbers stay the same. I think the only way I can make the generator work as intended is if I make a button to click and let it run a new generation. I don’t know how to do this at the moment, and a small amount of research hasn’t led to much. . More to come! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/23/day2.html",
            "relUrl": "/daily/2022/08/23/day2.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post78": {
            "title": "Random Number Generator",
            "content": "import random your_num = random.randint(0,255) pys_num = random.randint(0, 255) # Using random.int to create a range of exactly 256 values (including zero) that can be selected. affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] print(&quot;Howdy there! I&#39;m Python. I can do lots of cool stuff.&quot;) print(&quot;Before I can generate a random number for you, you have to give me permission to do so.&quot;) print(&quot;May I generate a number for you?&quot;) consent = input() if consent in affirmative: print(&quot;Okay! Your number is... &quot; + str(your_num) + &quot;!&quot;) print(&quot;Now, I can&#39;t actually see what number I just gave you.&quot;) print(&quot;I can generate another one, and there&#39;s a one in 256 chance that it&#39;s the same.&quot;) print(&quot;I&#39;ll tell you a secret if it is.&quot;) print(&quot;Do you want me to generate a new one?&quot;) consent2 = input() if consent in affirmative: print(&quot;Cool! And my number is...&quot;) print(str(pys_num) + &quot;!&quot;) if pys_num == your_num: print(&quot;Golly! Looks like I&#39;d better hold up my end of the bargain. My secret is...&quot;) print(&quot;I&#39;m guilty of several misdemeanors and felonies, the latter primarily.&quot;) print(&quot;Nobody ever thinks a computer can do that.&quot;) print(&quot;The guy that made this random number generator keeps getting harrassed by police for stunts I pulled.&quot;) print(&quot;It&#39;s hilarious!&quot;) print(&quot;You&#39;re gonna keep that little factoid a secret if you know what&#39;s best for you. :)&quot;) elif (pys_num - your_num) &lt; 11 and (pys_num - your_num) &gt; 0: print(&quot;Ah! Close, but not close enough to learn my secret. Try again!&quot;) elif (your_num - pys_num) &lt; 11 and (your_num - pys_num) &gt; 0: print(&quot;Ah! Close, but not close enough to learn my secret. Try again!&quot;) else: print(&quot;Welp! Looks like my secret is safe for now...&quot;) elif consent in negative: print(&quot;That&#39;s alright! I hope you enjoyed your number.&quot;) else: print(&quot;I&#39;m confused, so I&#39;ll just leave you be...&quot;) elif consent in negative: print(&quot;Alrighty then! Come back if you change your mind.&quot;) else: print(&quot;Uhhh...okay? I&#39;ll take that as a no.&quot;) . Howdy there! I&#39;m Python. I can do lots of cool stuff. Before I can generate a random number for you, you have to give me permission to do so. May I generate a number for you? Okay! Your number is... 65! Now, I can&#39;t actually see what number I just gave you. I can generate another one, and there&#39;s a one in 256 chance that it&#39;s the same. I&#39;ll tell you a secret if it is. Do you want me to generate a new one? Cool! And my number is... 45! Welp! Looks like my secret is safe for now... .",
            "url": "https://drewreed2005.github.io/realdrew/rng/",
            "relUrl": "/rng/",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post79": {
            "title": "Day 1*",
            "content": "The Early Trouble . The first days . Figuring it was homework to do so, I downloaded all of the programs listed in the Tools and Setup page and saved the fastpages part for the next day. This step would be a permanent help, even after the fastpages site had to be reset. . The problem that would lead to the loss of my admittedly little progress was evident from the very beginning: that Thurday, even after following all the steps listed in the first pull request, I had either forgotten to resolve the request or something had prevented me from doing so. Either way, by the next day, it seemed that there was no way to resolve the request, causing my website to look far less professional than other students’ I had seen. It’s surprising how much a lack of proper UI can make a site go from a 2022 professional business site to a 2008 fan site. . Showing off . I tried to make some bold and italicized text in my About Me section, but the site bug made it impossible for the link redirects to work. Headers worked on the home page but subheaders did not. A notebook post making use of the Python “print” command was created as well, but the same issue with the About Me page existed. . The Solution . Two words: Thanos snap. . Well, more accurately, none of my previous repository history had been deleted, but I did have to start the fastpages creation process from scration. . There’s a reason I called it a Thanos snap, though: the fastpages issues were competely separate from the rest of the work I had put into downloading the tools. This means that only the time I had put into the initial drew2 fastpages setup was a waste. That time was very quickly made up; setup took noticeably longer. . Now, everything looks perfect. Turns out the problem was, as implied earlier, pertaining to the unresolved pull request from the very beginning. An unresolvable issue was found in one of the Jupyter files (still not sure exacly what the deal was with that) but it doesn’t matter now, this site is pure and new and is brimming with potential. . Why not bring over the previous progress to this new site? . That would be because my old edits were mostly cries for help to the github gods to fix my broken website. It would be a little bit strange to have that on a perfectly sound, as-intended site. . Plus, with just this content, I already have a lot more done. I have a lot more progress to talk about and a lot of hindsight to document. Might as well start documentation from scratch along with the site. . Anticipations . It looks like we’ll expand upon our knowledge of Python this week. I’m exicted to use it to do funny things. . I’d really like to use a random number generator to make a page on my website which is different every time you load it. I’m not exactly sure how yet, but I’m sure it’s possible. Why not boost my aspirations? .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/22/post1.html",
            "relUrl": "/daily/2022/08/22/post1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post80": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Color Minus . +1 | 00000000 | 0 | 0 | 0 | ▣ | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | . 8388608 | 4194304 | 2097152 | 1048576 | 524288 | 262144 | 131072 | 65536 | 32768 | 16384 | 8192 | 4096 | 2048 | 1024 | 512 | 256 | 128 | 64 | 32 | 16 | 8 | 4 | 2 | 1 | .",
            "url": "https://drewreed2005.github.io/realdrew/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Drew panicked over the course of four days because his fastpages website would not load correctly. Commits worked (vaguely) but it was difficult to present edits to pages which only showed 404 errors. . After starting from scratch, it seems like the website is good to go. . He is now playing with mixing knowledge of various code languages and complaining because he is teaching himself. . (Formerly known as “mister-dew”, commonly misconceived as “misty-dew,” apparently.) .",
          "url": "https://drewreed2005.github.io/realdrew/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Vocabulary",
          "content": "(Code cells are in Python.) . 3.1 (Variables and Assignments) . Variables: abstractions within programs which represent a value . variable = 3 [&#39;3&#39; can be any valid value] . Booleans: a binary type of data which can be set to “True” or “False (can be output as a result of equality/inequality statements) . running = True while running: process() #booleans can be used for things like this . 3.2 (Data Abstraction) . List: a set of elements organized in a specific order (can be infinitely long) . list = [2, 3, True, &quot;String&quot;, 3.14159] #can contain all sorts of data . Element: a unique, individual value in a list . list[0] == 2 #(output: true); 2 is the 0th (first) element in &#39;list&#39; . Data Abstraction: the storage of data in abstract variables . winningscore = 100 #for a game where scoring 100 makes you win . 3.3 (Mathematical Expressions) . Algorithm: a set of actions with a set of rules that tells a program what to do . def add_2(num): #it&#39;s important to name the algorithm (abstraction) return (num += 2) . 3.4 (Strings) . Concatenation: combining strings using + (or sometimes ,) . greeting = &quot;Hello, &quot; + &quot;world!&quot; print(greeting) #(output: Hello, world!) greeting2 = &quot;How&quot;, &quot;are&quot;, &quot;you?&quot; print(greeting2) #(output: How are you?) . Length: the amount of elements in a list, characters in a string, etc. depending on the source in question . list = [1, 2, 3] print(len(list)) #(output: 3) string = &quot;Hello&quot; print(len(string)) #(output: 5) . Substring: individual characters within a string . string = &quot;word&quot; print(string[1]) #(output: o, the substring at index &#39;1&#39;) . 3.5 (Boolean Expressions) . (See “Booleans” in 3.1 vocabulary) . Logical operators: and, or and not; operators that compare the state of multiple things . raining = True cold = False def rain_check(): if raining and cold: #only active if raining AND cold wear(&quot;Rain Jacket&quot;) def shorts_check(): if not raining: #only active if raining == False wear(&quot;Shorts&quot;) . 3.6 (Conditionals) . (See “Algorithm” in 3.3 vocabulary) . Selection: the process that determines which parts of an algoritm is being executed based on a condition that is true or false . def hot_check(): if temp &gt; 90: #this part is running when (temp &gt; 90) is True return True else: #this part runs otherwise return False . Conditional: reliant upon a certain variable condition to occur . #see like all of the functions above . 3.7 (Nested Conditional Statements) . (See “Conditional” in 3.6 vocabulary) . Nested conditionals: conditionals within conditionals . def thing_check(this, that) if this: if that: #two conditionals????? INSIDE each other?????? return &quot;WOW!&quot; else: return &quot;Cool...&quot; else: return &quot;Not cool...&quot; . 3.9 (Developing Algorithms) . (See “Algorithm” in 3.3 vocabulary) . (See “Booleans” in 3.1 vocabulary) . (See “Conditional” in 3.6 vocabulary) . 3.11 (Searching) . Sequential Search: a search method that requires a program to look at each instance in a series of information in order (which is generally inefficient compared to Binary Search) . def sequentialSearch(arr, target): #see this in the lesson itself N = len(arr) for i in range(N): if arr[i] == target: return i function call return -1 . Binary Search: a search method that starts in the middle of a series of information, compares the information found to the target, then recenters with half of the remaining data cut off . def binarySearch(array, target): low = 0 high = len(array)-1 while high &gt;= low: mid = (high + low) // 2 #floor division, see below if array[mid] == target: return mid elif array[mid] &gt; target: high = mid-1 else: low = mid+1 return False . Floor division: division that automatically rounds down non-integer quotients . mid = (high + low) // 2 #floor division, rounds it down to the nearest int . 3.12 Calling Procedures . Procedure: a named group of programming instructions that may have parameters and return values . def procedure(parameter): #name of procedure and parameter if this: #conditional return &quot;Uh-huh&quot; #returned value else: return &quot;Uh-uh-uh&quot; . Parameters: input values of a procedure, specified by arguments . add_2(5) #returns 7 because parameter was 5 . Arguments: specify the values of the parameters when a procedure is called . add_2(5) #specifying 7 based on the parameter 5 . 3.13 Developing Procedures . Modularity: separating a program’s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality . def brush_teeth(): toothpaste() #various functions specifying the rest of the process brush(&quot;bottom&quot;) brush(&quot;top&quot;) brush(&quot;tongue&quot;) floss() return &quot;Teeth are squeaky-clean!&quot; . Procedural Abstraction: providing a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it . brush_teeth() #take a wild guess at what this does...thanks, procedural abstraction . 3.14 Libraries . Library: a digital code library full of methods that serve specific purposes, imported through packages . import pygame . Packages: collections of methods from libraries . random.randint(1, 10) random.choice([&#39;Red&#39;, &#39;Blue&#39;]) #various other methods provided in the packages . Documentation: written explanations of the use of various methods in libraries (Example: here’s Pygame’s documentation.) . 3.15 Random Values . (no new vocabulary) . 3.16 Simulations . Simulations: abstractions that mimic more complex objects or phenomena from the real world. (The purpose is drawing inferences without the contraints of the real world.) . from random import * #we need this for the example def lottery(): draw = randint(1, 13983816) lucky = randint(1, 13983816) if draw == lucky: return &quot;You won $100,000,000!!!!!!!!!&quot; else: return &quot;You&#39;re a sucker who lost. :(&quot; . Variance: random chance, simulated through random number generation in simulations. . import random #it&#39;s all in here, see the lottery sim above . 3.17 Algorithmic Efficiency . (Also found within the notes linked above) . Problem: A general description of a task that can or cannot be solved algorithmically . Decision Problem: A problem with a yes or no answer . Organization Problem: A problem with a goal of finding the best answer . #problem: is the user input more than 3? num = int(input(&quot;Input a number&quot;)) if num &gt; 3: print(&quot;Input is greater than 3!&quot;) else: print(&quot;Input is not greater than 3.&quot;) #this is a decision problem . Efficiency: Amount of computing needed to solve a problem . Polynomial Efficiency (Good): More work takes a proportional amount of time (1 job is +2 time) . Exponential Efficiency (Bad): More work takes an exponential amount more time (1 job is 2x time) . Heuristic Approach: When optimal solutions are inefficient, look for a possibly optimal solution that is more efficient . &quot;&quot;&quot; For the finding the fastest route homework, it was best to have it look through the data procedurally rather than check every possible route for the most efficient one. &quot;&quot;&quot; . Decidable Problem: A decision problem that has a clear solution that will always make a correct output . Undecidable Problem: A decision problem with no solution that is not guarenteed to produce the correct output . num = int(&quot;Hello&quot;) if num &gt; 3: return &quot;Yep&quot; #would return an error . 3.18 Undecidable Problems . The Halting Problem: the problem of determining whether or not a program should stop trying to run if it will end up running forever . (see notes for code example) .",
          "url": "https://drewreed2005.github.io/realdrew/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Notes",
          "content": "| Week 1 Python Notes | Focus and Habits Notes | Lists and Dictionaries Notes | Javascript Notes | Program Design and Development Notes | Identifying and Correcting Errors Notes | RapidAPI Notes | . Access notes by clicking on the link above. Notes pages include information about topics covered in weekly lectures. .",
          "url": "https://drewreed2005.github.io/realdrew/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "Programs and More",
          "content": "See various fun quizzes and programs below. . Trimester 1 . Random Number Generator . Week 1 Python Quiz . Bash and My Tools . The Survey . AppLab Quiz . How I Got a 5! Quiz . Work Watch - Roles, Purpose and Information . Trimester 2 . Binary Frontend Page . More to come! .",
          "url": "https://drewreed2005.github.io/realdrew/more/",
          "relUrl": "/more/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drewreed2005.github.io/realdrew/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}