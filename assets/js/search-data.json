{
  
    
        "post0": {
            "title": "Where are the posts?",
            "content": "Where are the Daily Posts? . This week’s (and likely future weeks’) projects and work would not be as interesting or practical to give daily posts for because, for this week specifically, the vast majority of my time was spend on the survey. The rest of the objectives were finished quite quickly over the course of a few days. It likely would not have been practical to say everything I did each day; it is simply too time-consuming and wasteful of time I should be spending Code-Code-Coding. . What to Expect in the Future . After much thought, I have decided on a way to perfectly use this class for self-expression: a text-based RPG! I can already forsee certain parts being greatly challenging and time-consuming to get through, but I have some pretty novel ideas that I wish to try. . In certain places, things I’ve always wanted to put in a game (such as adaptive music) will have to be sacrificed, and certain things I dislike like old-fashioned game UI and password-based save systems will have to be used due to platform restrictions. Do not expect a poor product, though! . All music featured in this game (and, yes, there will be music throughout the game!) will all be composed and produced by me. Any other contributors will be noted in the credits at the end. . Expect a turn-based battle system, a solid number of towns to travel to and interact with, an interesting and personalizeable magic system, upgradable equipment and weapons, an element system, and much, much more. I’m really excited to discuss progress at the end of each week! . What will the game be called? What is the scenario? These details are still being decided… . Feel free to leave ideas in the description! .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/05/whereareposts.html",
            "relUrl": "/2022/09/05/whereareposts.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
  
    
  
    
        ,"post3": {
            "title": "Lists and Dictionaries Pair Programming",
            "content": "For the below loop, I have chosen to use the same visual formatting for the output loop as in the Lists and Dictionaries page from this week, but the included info has been altered as well as how it is collected and certain possible variations of how it can be output. . affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] InfoDb = [] def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Place of Birth:&quot;, d_rec[&quot;POB&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print() def back_print_data(d_rec): print(d_rec[&quot;LastName&quot;], d_rec[&quot;FirstName&quot;]) print(&quot; t&quot;, &quot;Pets: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Pets&quot;])) print(&quot; t&quot;, &quot;Favorite Food:&quot;, d_rec[&quot;Favorite Food&quot;]) print(&quot; t&quot;, &quot;Favorite Color:&quot;, d_rec[&quot;Favorite Color&quot;]) print(&quot; t&quot;, &quot;Place of Birth:&quot;, d_rec[&quot;POB&quot;]) print() def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return def back_recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] back_print_data(record) back_recursive_loop(i + 1) def infograb(): print(&quot;Excellent. Let&#39;s get started. nWhat is your legal first name?&quot;) fname1 = input() global infname infname = fname1.capitalize() print(&quot;Understood. Thank you, &quot; + infname + &quot;. nWhat is your legal last name?&quot;) lname1 = input() global inlname inlname = lname1.capitalize() print(&quot;Understood. Your full name is &quot; + infname, inlname + &quot;. nNow, please tell us: in what city were you born?&quot;) global inpob inpob = input() print(&quot;Understood. You were born in &quot; + inpob + &quot;. nWhat is your favorite color?&quot;) global infcolor infcolor = input() print(&quot;Understood. Your favorite color is &quot; + infcolor + &quot;. nWhat is your favorite food?&quot;) global inffood inffood = input() print(&quot;Understood. Your favorite food is &quot; + inffood + &quot;. Now, please name the species of pets you have. n(Write them all in one input with spaces separating them.) n(If you do not have a pet, simply say &#39;None&#39; or &#39;N/A&#39;.&quot;) pet_inp = input() global pet_list pet_list = pet_inp.split() print(&quot;Understood. That concludes the survey.&quot;) return InfoDb.append({ &quot;FirstName&quot;: infname, &quot;LastName&quot;: inlname, &quot;POB&quot;: inpob, &quot;Favorite Color&quot;: infcolor, &quot;Favorite Food&quot;: inffood, &quot;Pets&quot;: pet_list }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;POB&quot;: &quot;San Diego&quot;, &quot;Favorite Color&quot;: &quot;Purple&quot;, &quot;Favorite Food&quot;: &quot;Sushi&quot;, &quot;Pets&quot;: [&quot;Cat&quot;, &quot;Dog&quot;] }) print(&quot;Welcome to the Information Database! We will keep your info safe. nWould you like to provide your information to us?&quot;) consent = input() if consent in affirmative: infograb() print(&quot;Would you like to print the current log of information?&quot;) consent3 = input() if consent3 in affirmative: recursive_loop(0) print(&quot;Thank you for provding your data. nWould you like to print this data backward?&quot;) consent5 = input() if consent5 in affirmative: back_recursive_loop(0) print(&quot;I am tired. This concludes the program. Gracias.&quot;) elif consent5 in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Your response confuses me. Thank you for your interaction.&quot;) elif consent3 in negative: print(&quot;That is alright. Thank you for your data.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) elif consent in negative: print(&quot;That is alright. Would you like to print the current log of information?&quot;) consent2 = input() if consent2 in affirmative: recursive_loop(1) print(&quot;Thank you for interacting with the program. nWould you like to print this data backward?&quot;) consent4 = input() if consent4 in affirmative: back_recursive_loop(1) print(&quot;I am tired. This concludes the program. Gracias.&quot;) elif consent2 in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) else: print(&quot;Your response confuses me. Try again later.&quot;) . Welcome to the Information Database! We will keep your info safe. Would you like to provide your information to us? Excellent. Let&#39;s get started. What is your legal first name? Understood. Thank you, Devon. What is your legal last name? Understood. Your full name is Devon Shepherd. Now, please tell us: in what city were you born? Understood. You were born in San Diego. What is your favorite color? Understood. Your favorite color is Red. What is your favorite food? Understood. Your favorite food is IDK. Now, please name the species of pets you have. (Write them all in one input with spaces separating them.) (If you do not have a pet, simply say &#39;None&#39; or &#39;N/A&#39;. Understood. That concludes the survey. Would you like to print the current log of information? Devon Shepherd Place of Birth: San Diego Favorite Color: Red Favorite Food: I don&#39;t know Pets: Dog Drew Reed Place of Birth: San Diego Favorite Color: Purple Favorite Food: Sushi Pets: Cat, Dog Thank you for provding your data. Would you like to print this data backward? Shepherd Devon Pets: Dog Favorite Food: I don&#39;t know Favorite Color: Red Place of Birth: San Diego Reed Drew Pets: Cat, Dog Favorite Food: Sushi Favorite Color: Purple Place of Birth: San Diego I am tired. This concludes the program. Gracias. . Making use of a recursive loop and user inputs, this program allows you to give your own information to be printed in the initial InfoDb format. . A hack from one relevant page asks to print the data backward, so if you want, the program can do that to. .",
            "url": "https://drewreed2005.github.io/realdrew/landdpair/",
            "relUrl": "/landdpair/",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Week 2 Review Ticket",
            "content": "Summary of This Week’s Goals . This week primarily covered content regarding HTML Fragments (which was largely a lesson about what goes on behind the code we make), Lists and Dictionaries, and Data Abstraction overall. There was also a bit more emphasis on collaboration after many students the week before did not indicate the ideal amount of teamwork. . This Week’s Progress . This week, the hacks tended to be less plentiful but more singularly time-consuming and difficult to understand. I went into this week with a partially-complete project that I had worked on over the weekend. It just so happens that the project has some pertenance to the “Lists and Dictionaries” part of the week’s content. Let’s go into that first. . The “Survey” . After making the Python quiz, one thing that I found distinctly unsatisfying about the quiz-taking process itself was its predictability. I didn’t like that I could just know the answers to the five questions and put them in immediately. I didn’t like that I had to tell the quiz-taker how to format their inputs, capitalized versus lowercase or string versus integer versus float versus symbol, etc. If someone put in the wrong kind of input, it was just nonsense that didn’t contribute the quiz. It felt thoroughly uninteractive and clunky. . So I got to work to fix those problems. . The “Survey” (which, spoiler, is really an eligibility test to see if you are worthy of working for or being wed to ‘THE MASTER,’ an unspecified being or great power) was programmed to fix these problems. It contains 15 questions to answer, ten multiple choice and five free response, each time you take it. However, a bank of 15 multiple choice questions and nine free response questions exists, meaning that which questions you get to answer each time depends somewhat on RNG. The order of these questions is also completely random. No matter when the question is asked, each response gives the same results. . Though the Python quiz was largely intended to be a lesson on if, else, math and the like, the “Survey” taught me a whole lot more abouts lists, indexes and patience. Using the random module and its range and shuffle commands allowed me to create a list of all possible index values of the list of MC/FR questions (without repeating numbers), shuffle them randomly, and call upon only the first ten/five list integers. This is a fool-proof strategy to randomize questions…but then I need a way to check the question response. . In order to give unique feedback based on what question was being asked, a variable known as checkval is globalized and set equal to the list index corresponding to each numbered question, and this checkval would tell the defined mc_check() or fr_check() commands how to react to the response to a given question. I was very, very proud of having come up with this. . The retry() function has been set to let you repeat any question if you provide an invalid response to it (detecting which question you’re on with quesval, similar to checkval). If you mess up questions too many times, you will anger the survey robot until he eventually forces you to restart from the beginning upon finally finishing the survey. . There are also various Easter eggs which are hard to find without looking into the code. Doing exceptionally poor in the first five questions results in the survey-taker being repromanded. A bit more obviously, the survey robot actually messes up your name after the tenth question (which you provide to it along with your gender at the beginning), calling you by a bizarre name starting with the same letter. When correcting his mistake, if you say you have a different name than initially, the robot will question your response. Different names (including my own, give it a try) give different results after or during the survey. . (Don’t feel like dealing with the 1/10 luck FR question? Just name yourself “Drew” and give some good responses!) . Again, I am very proud of this project. Writing unique responses for each input took a lot of time and effort, but it feels very worth it. . Look Around You, Pal! . The site is a different color! Ain’t that wacky. . Yeah, I followed the instructions to use “dark mode” on my site. I think altered the color hex values to suit my own preferences, since dark mode gets boring to use on every site. . I also changed the image on the home page. Why not? . Lists and Dictionaries Notes . I found the content surrounding loops confusing and decided to mess around with them in a notes Jupyter file under the name above. Using this, I was able to create the objective Notebooks page found below. . I used a mix of Markdown and Python (like with most pages on this site) to explain what I was doing (for my own future reference). I also showed use of my own InfoDb data and various types of loops, though a much better instance of this is found in… . Lists and Dictionaries Pair Programming . I have made a Jupyter Notebooks page along with my partner Devon to show understanding of loops and dictionaries with InfoDb. Devon used a game to show his understanding (see his Review Ticket) with a “while loop”, and I used a “recursive loop” along with a system which allows the user to input their own information. . We did a portion of this during the 20 minute segments on Friday. . Make a Table? . Here’s a table using Markdown: . Goals Complete? Proof . Lists and Dictionaries | Yes | Notes, Pair Programming, Survey | . HTML Fragments | Yes | This Table | . Live Review | Underway | You’re looking at this table | . And here’s a table using HTML: . Header ColorCell Color . Purple | Pink | . #a38 | #f47 | . I used &lt;style&gt; to establish some colors I’d like to be in my table. I tried changing the border color as well but it ended up looking ugly. I think this looks nice with my mostly purple website. . List of Objectives Met . Changed website “theme” or colors with _sass | Home screen customization | Survey making use of lists, indexes, and past content like if and def | Lists and Dictionaries notes with all types of loops used | Pair programming: at least 2 InfoDb entries between me and Devon | All Jupyter Notebooks pages with use a mix of Markdown and Python cells | Use of # in cells to add commentary | Customized table(s) | This Review Ticket and live presentation | . And, of course, our table has submitted all Review Tickets in one comment. .",
            "url": "https://drewreed2005.github.io/realdrew/2022/09/04/week2reviewticket.html",
            "relUrl": "/2022/09/04/week2reviewticket.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Lists and Dictionaries Notes",
            "content": "name = &quot;Drew Reed&quot; print(&quot;name&quot;, name, type(name)) print(&quot;The variable key is &#39;name&#39;. The value is &#39;Drew Reed&#39;. It is a string.&quot;) print() age = 16 print(&quot;age&quot;, age, type(age)) print(&quot;The variable key is &#39;age&#39;. Its value is &#39;16&#39;. It is an integer.&quot;) print() score = 90.0 print(&quot;score&quot;, score, type(score)) print(&quot;The variable key is &#39;score&#39;. Its value is &#39;90.0&#39;. It is a float, a.k.a. a floating point number.&quot;) print() print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print(&quot;The variable&quot;) print() print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) print(&quot;It comes out with little squiggly brackets.&quot;) . name Drew Reed &lt;class &#39;str&#39;&gt; The variable key is &#39;name&#39;. The value is &#39;Drew Reed&#39;. It is a string. What is the variable name/key? value? type? primitive or collection, why? age 16 &lt;class &#39;int&#39;&gt; The variable key is &#39;age&#39;. Its value is &#39;16&#39;. It is an integer. What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;Drew Reed&#39;, &#39;age&#39;: 16, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Drew Reed &lt;class &#39;str&#39;&gt; . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;DOB&quot;: &quot;November 7&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;drewdafox@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Camry&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry . This can be a little bit confusing, so let&#39;s put this in simpler terms. . When defining print_data, the different data in the Info.Db is called upon based on its Dictionary definition and placed in a visually appealing way using t and spacing with comma. . Let&#39;s look at how to loop the output of the info just enough to get it out. . InfoDb = [] InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Drew&quot;, &quot;LastName&quot;: &quot;Reed&quot;, &quot;DOB&quot;: &quot;November 7&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;drewdafox@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;Toyota Camry&quot;] }) def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) print() def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Drew Reed Residence: Temecula Birth Day: November 7 Cars: Toyota Camry . While loops and recursive loops work very similarly, just making use of slightly different commands. Both compare how much content is contained within InfoDb with how much has already been output (indicated by the i value). .",
            "url": "https://drewreed2005.github.io/realdrew/landdnotes/",
            "relUrl": "/landdnotes/",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 1 Review Ticket",
            "content": "Daily Posts . Every day this week, starting from when I had to restart the Fastpages site on Monday due to an issue with the setup pull request, I have made a blog post with Markdown to demonstrate both fluency with this type of file and to organize my work across each weekday. . These can all be found on the home page of the site, as well as by being searched for. They are named “Day 1,” “Day 2,” “Day 3,” and so on. Posts are not made on weekends (see “Day 5” for why). . “Day 4” contains an image at the top with a caption to fit a certain Hack. . New Pages . As was suggested as one of the Hacks, I’ve made two new pages on the top bar: “Notes” and “Quizzes and More.” . “Notes” . The “Notes” page contains links to various pages on the site which justify the site’s academic utility. Various pages of notes will be found here. . Focus and Habits Notes . As requested as a part of this week’s schedule, I watched through the “Psychology and the Good Life” speech by Laurie Santos and took notes what it said about happiness, stress, and healthy habits. . To meet the Hack regarding posting a .docx file through the ‘_word’ folder, the notes have been typed in Google Docs and exported as a Word file to put on the site. . Week 1 Python Notes . This notes page goes over some Python commands taught in the “Python Hello” page earlier this week. They are shown in action by mixing Markdown and Python cells in the Jupyter Notebook file. Within these Python cells are captions using # to explain what is being done. These aspects fit the expectations of multiple Hacks. . I also included some other commands I learned about on my own through independent research. . “Quizzes and More” . This is where I put some random non-post projects. Most of what is found in there contributes to specific Hacks, though some, like the Random Number Generator, were just made for fun. . Week 1 Python Quiz . The “Python Hello” page we read through earlier in the week included a Hack asking the reader to make his or her own Python quiz, including a percentage score at the end. . Though the quiz does not actually run on the site, the outputs for all correct inputs can be seen beneath the Python code window. . To stop the quiz from being completely plagiar-inspired, I only reused necessary aspects of the original format and the defined question_and_response command. I added some additional things to prove fluency, such as a custom name input question (which lets the bot call you by a name of your choice throughout the quiz), a progress report three questions into the quiz (with a unique response depending on how many you got right), a percentage score at the end which determines whether or not you passed (you need at least 4/5 or 80% to pass), and an additional Easter egg if you named yourself Drew and got every question correct. This was a lot of fun to make. . Tool Check with Bash . Later in the week, we were asked to use Bash to prove that we have all the necessary tools for the course. Instead of describing everything, I’ll let the page speak for itself. You can click the hyperlink on the title of this section or the “Quizzes and More” page on the top bar to access. . Random Number Generator . For fun, I made a random number generator using the random.randrange command. I thought it would be fun if the random number could cause different results based on what it was, so I gave an option for the RNG host (who I just named Python) to offer a second random number. If the numbers match (a 1/256 chance), Python will tell the user a secret. If the numbers are within 10 integer values of each other, the Python will remark that it was close, but not quite. Don’t you dare cheat and read the secret in the code! . Objectives and Hacks Completed This Week . Notes and presentation through Fastpages | New _pages categories | Focus and Habits notes | Published .docx file | “Python Hello” Notes with… | Mix of Markdown and Python cells | Use of # in cells to add commentary | Custom Python Quiz with percentage score plus extra content | Verify tools with Bash | This Review Ticket | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/27/week1reviewticket.html",
            "relUrl": "/2022/08/27/week1reviewticket.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Vocabulary",
            "content": "Lists .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/27/vocabulary.html",
            "relUrl": "/2022/08/27/vocabulary.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Awesome Survey",
            "content": "import random import math from sre_compile import isstring from turtle import pd from unicodedata import name affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] lucky = random.randint(1,10) score = 0 global mcheckval mcheckval = 15 global fcheckval fcheckval = 8 tickedoff = 0 narcissim = 0 global youloseidiot youloseidiot = 0 def retry(): global tickedoff tickedoff += 1 if tickedoff &gt;= 99: print(&quot;You&#39;re impressively insolent.&quot;) global youloseidiot youloseidiot = 1 elif tickedoff &gt;= 9: print(&quot;How is it even possible to be such a screw-up? Err, ehem...&quot;) elif tickedoff &gt;= 4: print(&quot;You&#39;re on thin ice, bucko...&quot;) if quesval == 1: question1() elif quesval == 2: question2() elif quesval == 3: question3() elif quesval == 4: question4() elif quesval == 5: question5() elif quesval == 6: question6() elif quesval == 7: question7() elif quesval == 8: question8() elif quesval == 9: question9() elif quesval == 10: question10() elif quesval == 11: question11() elif quesval == 12: question12() elif quesval == 13: question13() elif quesval == 14: question14() elif quesval == 15: question15() else: print(&quot;You must&#39;ve REALLY messed something up to see this...&quot;) def fr_invalretry(realmsg): try: val = int(realmsg) except ValueError: print(&quot;What part of numeric value do you not unerstand?&quot;) retry() return if &quot;.&quot; in realmsg: print(&quot;No decimals, please! Redo!&quot;) retry() return if &quot;A&quot; in realmsg or &quot;a&quot; in realmsg or &quot;B&quot; in realmsg or &quot;b&quot; in realmsg or &quot;C&quot; in realmsg or &quot;c&quot; in realmsg or &quot;D&quot; in realmsg or &quot;d&quot; in realmsg or &quot;E&quot; in realmsg or &quot;e&quot; in realmsg or &quot;F&quot; in realmsg or &quot;f&quot; in realmsg or &quot;G&quot; in realmsg or &quot;g&quot; in realmsg or &quot;H&quot; in realmsg or &quot;h&quot; in realmsg or &quot;I&quot; in realmsg or &quot;i&quot; in realmsg or &quot;J&quot; in realmsg or &quot;j&quot; in realmsg or &quot;K&quot; in realmsg or &quot;k&quot; in realmsg or &quot;L&quot; in realmsg or &quot;l&quot; in realmsg or &quot;M&quot; in realmsg or &quot;m&quot; in realmsg or &quot;N&quot; in realmsg or &quot;n&quot; in realmsg or &quot;O&quot; in realmsg or &quot;o&quot; in realmsg or &quot;P&quot; in realmsg or &quot;p&quot; in realmsg or &quot;Q&quot; in realmsg or &quot;q&quot; in realmsg or &quot;R&quot; in realmsg or &quot;r&quot; in realmsg or &quot;S&quot; in realmsg or &quot;s&quot; in realmsg or &quot;T&quot; in realmsg or &quot;t&quot; in realmsg or &quot;U&quot; in realmsg or &quot;u&quot; in realmsg or &quot;V&quot; in realmsg or &quot;v&quot; in realmsg or &quot;W&quot; in realmsg or &quot;w&quot; in realmsg or &quot;X&quot; in realmsg or &quot;x&quot; in realmsg or &quot;y&quot; in realmsg or &quot;y&quot; in realmsg or &quot;Z&quot; in realmsg or &quot;z&quot; in realmsg: print(&quot;I said a numeric value! Like at the top of your keyboard! Redo!&quot;) retry() return else: return mc_select = list(range(0,15)) random.shuffle(mc_select) fr_select = list(range(0,9)) random.shuffle(fr_select) vowels = [&quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot;] vowiable = random.randint(0,4) randv = vowels[int(vowiable)] def nameselect(): print(&quot;Welcome to a deeply important survey! nIt will consist of 15 questions, 10 multiple choice and five free response. nIt should be easy. Be sure to answer one of the provided options for multiple choice questions. nPut whatever you want for open-ended questions, but answer honestly!&quot;) print(&quot;Before we begin, what is your first name?&quot;) global nmae nmae = input() global name name = nmae.capitalize() print(name + &quot;...&quot;) if name == &quot;Drew&quot;: print(&quot;You should know you&#39;re not supposed to take this quiz! nI guess you might as well test it.&quot;) elif name == &quot;Kendall&quot;: print(&quot;Off to a very good start...&quot;) elif name == &quot;Benji&quot;: print(&quot;I don&#39;t think this quiz is for you...&quot;) elif &quot;1&quot; in nmae or &quot;2&quot; in nmae or &quot;3&quot; in nmae or &quot;4&quot; in nmae or &quot;5&quot; in nmae or &quot;6&quot; in nmae or &quot;7&quot; in nmae or &quot;8&quot; in nmae or &quot;9&quot; in nmae or &quot;0&quot; in nmae: print(&quot;Real people don&#39;t have numbers in their names! Try again... n n-- n&quot;) nameselect() else: print(name + &quot;? Eh, could&#39;ve been better.&quot;) def mc_question(): global msg msg = input() global realmsg realmsg = msg.capitalize() print(&quot;You chose option &#39;&quot; + realmsg + &quot;.&#39;&quot;) def fr_question(): global msg msg = input() global realmsg realmsg = msg.capitalize() print(realmsg + &quot;, huh...?&quot;) def mc_check(): if mcheckval == 0: if realmsg == &quot;A&quot; or realmsg == &quot;1&quot;: print(&quot;A little clumsy here and there, but a classic!&quot;) return 90 elif realmsg == &quot;B&quot; or realmsg == &quot;2&quot;: print(&quot;They really found their sea legs by then! Good to hear.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;3&quot;: print(&quot;Gotta love the end of the Golden Era...&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;4&quot;: print(&quot;I guess the first little bit was solid, but...&#39;The Gift of Gum&#39;?&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;5&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 40 elif realmsg == &quot;F&quot; or realmsg == &quot;6&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 50 elif realmsg == &quot;G&quot; or realmsg == &quot;7&quot;: print(&quot;You must be nostalgic for it...right? I hope...&quot;) return 50 elif realmsg == &quot;H&quot; or realmsg == &quot;8&quot;: print(&quot;Getting there, I guess...still a lot of duds.&quot;) return 60 elif realmsg == &quot;I&quot; or realmsg == &quot;9&quot;: print(&quot;Yes, the revival! Points for precision! Well done.&quot;) return 100 elif realmsg == &quot;J&quot; or realmsg == &quot;10&quot;: print(&quot;Yeesh...&quot;) return 10 elif realmsg == &quot;K&quot; or realmsg == &quot;11&quot;: print(&quot;I&#39;m glad you can find enjoyment in it.&quot;) return 15 elif realmsg == &quot;L&quot; or realmsg == &quot;12&quot;: print(&quot;I&#39;m glad you can find enjoyment in it.&quot;) return 20 elif realmsg == &quot;M&quot; or realmsg == &quot;13&quot;: print(&quot;I&#39;ve hardly seen any of it but I can tell this is...a take.&quot;) return 30 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 1: if realmsg == &quot;A&quot; or realmsg == &quot;Math&quot;: print(&quot;Math can be a confusing to SUM, but improvement is a SINE of effort.&quot;) return 40 elif realmsg == &quot;B&quot; or realmsg == &quot;Science&quot;: print(&quot;For a set of laws that govern life, science can be pretty inconsistent...&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;English&quot;: print(&quot;I mean, you&#39;ve been speaking it this whole survey! nIt must not be THAT bad.&quot;) return 30 elif realmsg == &quot;D&quot; or realmsg == &quot;History&quot;: print(&quot;Sometimes, it&#39;s like reading fiction. Ever heard of the Latter Day Jig?&quot;) return 50 elif realmsg == &quot;E&quot; or realmsg == &quot;PE&quot;: print(&quot;Hardly seems like a subject in the first place...&quot;) return 60 elif realmsg == &quot;F&quot; or realmsg == &quot;Music/Fine Arts&quot;: print(&quot;Well, if you don&#39;t like one fine art, there are plenty more out there!&quot;) return 30 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 2: if realmsg == &quot;A&quot; or realmsg == &quot;Generation 5&quot;: print(&quot;Maybe a design dud here and there, but Unova&#39;s story holds strong.&quot;) return 10 elif realmsg == &quot;B&quot; or realmsg == &quot;Generation 6&quot;: print(&quot;With the EXP share on, that question must&#39;ve been easy for you!&quot;) return 50 elif realmsg == &quot;C&quot; or realmsg == &quot;Generation 7&quot;: print(&quot;Were the cutscenes really that unbearable?&quot;) return 30 elif realmsg == &quot;D&quot; or realmsg == &quot;Generation 8&quot;: print(&quot;The box legendary is a dog with a sword in its mouth.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 3: if realmsg == &quot;A&quot; or realmsg == &quot;Vanilla&quot;: print(&quot;Daring today, aren&#39;t we?&quot;) return 30 elif realmsg == &quot;B&quot; or realmsg == &quot;Chocolate&quot;: print(&quot;A classic.&quot;) return 70 elif realmsg == &quot;C&quot; or realmsg == &quot;Strawberry&quot;: print(&quot;Like strawberry milk but better!&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Rainbow Sherbet&quot;: print(&quot;A surprisingly good mix of flavors.&quot;) return 70 elif realmsg == &quot;E&quot; or realmsg == &quot;Mint Chocolate Chip&quot;: print(&quot;Sometimes, it just hits the spot.&quot;) return 80 elif realmsg == &quot;F&quot; or realmsg == &quot;Cookies and Cream&quot;: print(&quot;But cookies ain&#39;t ice cream...&quot;) return 60 elif realmsg == &quot;G&quot; or realmsg == &quot;Cotton Candy&quot;: print(&quot;So underrated!&quot;) return 100 elif realmsg == &quot;H&quot; or realmsg == &quot;Watermelon&quot;: print(&quot;Only the enlightened few...&quot;) return 100 elif realmsg == &quot;I&quot; or realmsg == &quot;Pralines and Cream&quot;: print(&quot;Mom?&quot;) return 20 elif realmsg == &quot;J&quot; or realmsg == &quot;Reese&#39;s Peanut Butter Cup&quot;: print(&quot;I can already feel the life leaving me.&quot;) return 10 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 4: if realmsg == &quot;A&quot; or realmsg == &quot;Pop&quot;: print(&quot;I guess that&#39;s why it&#39;s called pop.&quot;) return 60 elif realmsg == &quot;B&quot; or realmsg == &quot;Rock&quot;: print(&quot;Put another dime in the jukebox, baby!&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Country&quot;: print(&quot;In controlled circumstances...&quot;) return 25 elif realmsg == &quot;D&quot; or realmsg == &quot;Punk/Ska&quot;: print(&quot;Respectable.&quot;) return 85 elif realmsg == &quot;E&quot; or realmsg == &quot;Jazz&quot;: print(&quot;So groovy.&quot;) return 90 elif realmsg == &quot;F&quot; or realmsg == &quot;Classical&quot;: print(&quot;What year is it?&quot;) return 70 elif realmsg == &quot;G&quot; or realmsg == &quot;Lo-Fi&quot;: print(&quot;ZZZzzz...&quot;) return 50 elif realmsg == &quot;H&quot; or realmsg == &quot;Movie/Game Soundtracks&quot;: print(&quot;It takes a real musical ear to appreciate it.&quot;) return 100 elif realmsg == &quot;I&quot; or realmsg == &quot;K-Pop&quot;: print(&quot;Okay...&quot;) return 10 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 5: if realmsg == &quot;A&quot; or realmsg == &quot;Red&quot;: print(&quot;Something about it feels classic. And bloody.&quot;) return 80 elif realmsg == &quot;B&quot; or realmsg == &quot;Orange&quot;: print(&quot;Orange you glad you didn&#39;t say...never mind.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Yellow&quot;: print(&quot;A very happy color. I like it.&quot;) return 80 elif realmsg == &quot;D&quot; or realmsg == &quot;Green&quot;: print(&quot;Do you keep green things in your pocket protector?&quot;) return 30 elif realmsg == &quot;E&quot; or realmsg == &quot;Blue&quot;: print(&quot;Daring today, aren&#39;t we? Whoops, I referenced it again.&quot;) return 70 elif realmsg == &quot;F&quot; or realmsg == &quot;Purple&quot;: print(&quot;Like royalty...&quot;) return 100 elif realmsg == &quot;G&quot; or realmsg == &quot;Brown&quot;: print(&quot;Rustic and natural...it has its appeal.&quot;) return 70 elif realmsg == &quot;H&quot; or realmsg == &quot;Black&quot;: print(&quot;A Rolling Stones fan, eh?&quot;) return 60 elif realmsg == &quot;I&quot; or realmsg == &quot;Pink&quot;: print(&quot;Kendall couldn&#39;t think of a pink pun. Moving on!&quot;) return 70 elif realmsg == &quot;J&quot; or realmsg == &quot;White&quot;: print(&quot;Sleek and minimalistic with infinite possibilities.&quot;) return 90 elif realmsg == &quot;K&quot; or realmsg == &quot;Clear&quot;: print(&quot;What do you mean it&#39;s not a color? How close-minded.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 6: if realmsg == &quot;A&quot; or realmsg == &quot;Action&quot;: print(&quot;*Explosion* *Laser* *Michael Bay*&quot;) return 60 elif realmsg == &quot;B&quot; or realmsg == &quot;Comedy&quot;: print(&quot;Funny movies are always the ones that stick with me.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Horror&quot;: print(&quot;Psych-horror is interesting, but jumpscares SCREAM lazy.&quot;) return 20 elif realmsg == &quot;D&quot; or realmsg == &quot;Rom-com&quot;: print(&quot;I wish she&#39;d watch one with me sometime...&quot;) return 100 elif realmsg == &quot;E&quot; or realmsg == &quot;Drama&quot;: print(&quot;A deep moral dilemma always gets me invested.&quot;) return 50 elif realmsg == &quot;F&quot; or realmsg == &quot;Musical&quot;: print(&quot;Wait, aren&#39;t there different genres of musicals? nEh, somehow we&#39;ll work this out.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 7: if realmsg == &quot;A&quot; or realmsg == &quot;Appearance&quot;: print(&quot;Well, at least you&#39;re honest.&quot;) return 20 elif realmsg == &quot;B&quot; or realmsg == &quot;Personality&quot;: print(&quot;Yeah, I like big personalities too.&quot;) return 90 elif realmsg == &quot;C&quot; or realmsg == &quot;Intelligence&quot;: print(&quot;I get the feeling your intelligence front is deceiving...&quot;) return 70 elif realmsg == &quot;D&quot; or realmsg == &quot;Values&quot;: print(&quot;So important, yet so sorely ignored.&quot;) return 100 elif realmsg == &quot;E&quot; or realmsg == &quot;All of the above&quot;: print(&quot;In the search for a true soulmate, I see...&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 8: if realmsg == &quot;A&quot; or realmsg == &quot;Definitely&quot;: print(&quot;Try not to get into TOO much trouble...&quot;) return 70 elif realmsg == &quot;B&quot; or realmsg == &quot;Maybe&quot;: print(&quot;Circumstances are important.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Probably not&quot;: print(&quot;Somtimes, it&#39;s best not to deal with strangers.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Definitely not&quot;: print(&quot;An invertebrate? In MY survey?&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;I&#39;d ask my date to confront him&quot;: print(&quot;Bold of you to assume you went with a date.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 9: if realmsg == &quot;A&quot; or realmsg == &quot;Dog&quot;: print(&quot;The vanilla woof-woof solution.&quot;) return 80 elif realmsg == &quot;B&quot; or realmsg == &quot;Cat&quot;: print(&quot;Chill little guys with empty heads. Great pets.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Fish&quot;: print(&quot;Blub. Simple life.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;Hampster/Guinea Pig&quot;: print(&quot;I mean, I&#39;ve never seen a dog on an infinitely-spinning wheel.&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;Bunny&quot;: print(&quot;It&#39;s like Easter every day.&quot;) return 90 elif realmsg == &quot;F&quot; or realmsg == &quot;Giraffe&quot;: print(&quot;He would stay in the backyard, unconditionally loved.&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 10: if realmsg == &quot;A&quot; or realmsg == &quot;Once a day&quot;: print(&quot;Perfectly reasonable.&quot;) return 100 elif realmsg == &quot;B&quot; or realmsg == &quot;More than once per day&quot;: print(&quot;A bit overkill, but the spirit is admirable.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Once every other day&quot;: print(&quot;A lot accumulated over two days...&quot;) return 75 elif realmsg == &quot;D&quot; or realmsg == &quot;Once a week&quot;: print(&quot;I sure hope that&#39;s a cultural thing or something...&quot;) return 30 elif realmsg == &quot;E&quot; or realmsg == &quot;What is a shower?&quot;: print(&quot;I appreciate the honesty. nA shower is a structure found in home bathrooms. They are used to clean...&quot;) return 60 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 11: if realmsg == &quot;A&quot; or realmsg == &quot;Vanilla&quot;: print(&quot;Daring today, aren&#39;t...I did it again.&quot;) return 50 elif realmsg == &quot;B&quot; or realmsg == &quot;Chocolate&quot;: print(&quot;The ice cream classic...milkshake-ified.&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Strawberry&quot;: print(&quot;Smooth, sweet and delicious.&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;Oreo/Cookies &amp; Cream&quot;: print(&quot;What kind of cookies? And pure cream?&quot;) return 75 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 12: if realmsg == &quot;A&quot; or realmsg == &quot;Sweatshirt and sweatpants&quot;: print(&quot;Nice and comfy.&quot;) return 100 elif realmsg == &quot;B&quot; or realmsg == &quot;Pajamas&quot;: print(&quot;Nice and comfy.&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;Full outfit just in case&quot;: print(&quot;Prepated, but restrictive.&quot;) return 75 elif realmsg == &quot;D&quot; or realmsg == &quot;Birthday suit&quot;: print(&quot;A bit haphazard, but I appreciate the spirit.&quot;) return 90 elif realmsg == &quot;E&quot; or realmsg == &quot;Other&quot;: print(&quot;You walk in the middle of the fork in the road.&quot;) return 80 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 13: if realmsg == &quot;A&quot; or realmsg == &quot;Something nonchalant&quot;: print(&quot;Gotta play it cool, right?&quot;) return 90 elif realmsg == &quot;B&quot; or realmsg == &quot;Something peppy and fun&quot;: print(&quot;Why not express how fun you are as a person?&quot;) return 80 elif realmsg == &quot;C&quot; or realmsg == &quot;Something to make him/her laugh&quot;: print(&quot;Fun is one thing, but FUNNY really sells you.&quot;) return 100 elif realmsg == &quot;D&quot; or realmsg == &quot;Something endearingly mean&quot;: print(&quot;How cute...&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;Ghost the stud because of anxiety&quot;: print(&quot;Understandable.&quot;) return 90 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 elif mcheckval == 14: if realmsg == &quot;A&quot; or realmsg == &quot;Today&quot;: print(&quot;At what? A KFC commercial?&quot;) return 75 elif realmsg == &quot;B&quot; or realmsg == &quot;This week&quot;: print(&quot;A real compassionate person, huh?&quot;) return 100 elif realmsg == &quot;C&quot; or realmsg == &quot;This month&quot;: print(&quot;A reasonable frequency, I&#39;d say.&quot;) return 90 elif realmsg == &quot;D&quot; or realmsg == &quot;This year&quot;: print(&quot;Some pretty solid restraint you&#39;ve got there.&quot;) return 80 elif realmsg == &quot;E&quot; or realmsg == &quot;So long ago I lost track&quot;: print(&quot;Tear ducts of steel, eh?&quot;) return 100 else: print(&quot;That&#39;s an invalid response! Make sure to pick one of the letters.&quot;) retry() return 0 else: print(&quot;There seems to have been an error! Let&#39;s start over. n n-- n&quot;) nameselect() def fr_check(): if fcheckval == 0: if realmsg == &quot;Sushi&quot; or realmsg == &quot;Pozole&quot; or realmsg == &quot;Pickle&quot; or realmsg == &quot;Pickles&quot;: print(&quot;Stop, you&#39;re making me hungry...&quot;) return 100 elif realmsg == &quot;Krabby Patty&quot;: print(&quot;You broke the two-word rule and you shall be rewarded for it...&quot;) return 100 elif realmsg == &quot;Ramen&quot; or realmsg == &quot;Burger&quot; or realmsg == &quot;Burgers&quot; or realmsg == &quot;Hamburger&quot; or realmsg == &quot;Hamburgers&quot;: print(&quot;Mmmmmm...&quot;) return 90 elif realmsg == &quot;Burrito&quot; or realmsg == &quot;Burritos&quot; or realmsg == &quot;Taco&quot; or realmsg == &quot;Tacos&quot; or realmsg == &quot;Enchiladas&quot;: print(&quot;Muy delicioso...&quot;) return 80 elif realmsg == &quot;Peanuts&quot; or realmsg == &quot;Peanut&quot; or realmsg == &quot;Nut&quot; or realmsg == &quot;Nuts&quot; or realmsg == &quot;Almond&quot; or realmsg == &quot;Almonds&quot; or realmsg == &quot;Peas&quot; or realmsg == &quot;Chickpeas&quot;: print(&quot;Just a sec, my throat is closing...&quot;) return 1 elif &quot; &quot; in realmsg: print(&#39;What part of &quot;one-word&quot; do you not understand? Redo!&#39;) retry() return else: print(&quot;Hmm... That doesn&#39;t sound too bad...&quot;) return 75 elif fcheckval == 1: fr_invalretry(realmsg) if int(realmsg) &gt;= 130: print(&quot;Don&#39;t talk to me, talk to Guinness!&quot;) return 5 elif int(realmsg) &gt;= 50: print(&quot;G o o d t o k n o w . nI w i l l s p e a k e x t r a s l o w l y . nJust kidding.&quot;) return 10 elif name == &quot;Kendall&quot; and int(realmsg) &gt;= 16: print(&quot;Cougar. nMine.&quot;) return 100 elif int(realmsg) &gt;= 19: print(&quot;A certain feline creature comes to mind... nErr, umm...&quot;) return 75 elif int(realmsg) &lt;= 10: print(&quot;How did you even get here?&quot;) return 5 elif int(realmsg) &lt; 15: print(&quot;Woah, what are you doing here, kiddo?&quot;) return 5 else: print(&quot;Within an ideal range...&quot;) return 100 elif fcheckval == 2: fr_invalretry(realmsg) if int(realmsg) == 211: print(&quot;Perfection.&quot;) return 100 elif int(realmsg) == 23: print(&quot;Beautiful.&quot;) return 90 elif int(realmsg) == 27 or int(realmsg) == 36 or int(realmsg) == 64 or int(realmsg) == 12 or int(realmsg) == 6: print(&quot;Pretty cool number you&#39;ve got there.&quot;) return 80 else: print(&quot;You do you, pal.&quot;) return 70 elif fcheckval == 3: fr_invalretry(realmsg) if int(realmsg) == 0: print(&quot;Have you no respect for your bloodline?&quot;) return 100 elif int(realmsg) == 1: print(&quot;Yeah, even one can be a handful, huh?&quot;) return 80 elif int(realmsg) == 2: print(&quot;Why not give &#39;em a friend?&quot;) return 90 elif int(realmsg) == 3: print(&quot;Nice round number.&quot;) return 100 elif int(realmsg) == 4: print(&quot;Hmm...maybe some twins in there...&quot;) return 80 else: print(&quot;How ambitious...&quot;) return 60 elif fcheckval == 4: fr_invalretry(realmsg) if int(realmsg) == 0: print(&quot;Awfully picky, aren&#39;t you?&quot;) return 80 elif int(realmsg) &lt;= 1: print(&quot;A little bit of breathing room, I guess...&quot;) return 90 elif int(realmsg) &lt;= 2: print(&quot;I think that&#39;s quite fair.&quot;) return 100 elif int(realmsg) &lt;= 3: print(&quot;I can see that...in adult circumtances.&quot;) return 100 elif int(realmsg) &lt;= 8: print(&quot;Pretty lenient...&quot;) return 90 elif int(realmsg) &lt;= 15: print(&quot;Now we&#39;re getting into criminal range...&quot;) return 75 else: print(&quot;I have to make a phone call...&quot;) return 20 elif fcheckval == 5: if realmsg == &quot;Cornelius&quot; or realmsg == &quot;Fido&quot; or realmsg == &quot;Tony&quot; or realmsg == &quot;Tigger&quot; or realmsg == &quot;Tux&quot; or realmsg == &quot;Chili&quot;: print(&quot;Couldn&#39;t pick a better name myself!&quot;) return 100 elif realmsg == &quot;Carmela&quot; or realmsg == &quot;Leo&quot;: print(&quot;No, they&#39;re in the right home for now.&quot;) return 90 elif realmsg == &quot;Worf&quot;: print(&quot;Who would name a cat that? Why not Tony?&quot;) return 80 elif realmsg == &quot;Mittens&quot;: print(&quot;Under the right circumstances...&quot;) return 90 elif realmsg == &quot;Jibanyan&quot; or realmsg == &quot;Rudy&quot;: print(&quot;I can&#39;t believe you answered like that. You&#39;re so...lame...&quot;) return 90 else: print(&quot;Interesting idea...&quot;) return 70 elif fcheckval == 6: if realmsg == &quot;Drew&quot; or realmsg == &quot;Kendall&quot; or realmsg == &quot;Louis&quot; or realmsg == &quot;Andrew&quot;: print(&quot;You really know how to get me...&quot;) return 100 elif name == &quot;Kendall&quot;: print(&quot;Good to know...&quot;) return 100 elif realmsg == &quot;Ryan&quot; or realmsg == &quot;James&quot;: print(&quot;だが断る！&quot;) return 0 elif realmsg == name: if narcissism == 1: print(&quot;You name both your son AND your daughter after yourself? nWouldn&#39;t that get confusing?&quot;) return 0 narcissism = 1 print(&quot;Yeesh, you want a kid named&quot; + realmsg + &quot;AND you&#39;re a narcissist?&quot;) return 50 else: print(&quot;I see...&quot;) return 80 elif fcheckval == 7: if realmsg == &quot;Kendall&quot; or realmsg == &quot;Chloe&quot; or realmsg == &quot;Hope&quot; or realmsg == &quot;Drew&quot;: print(&quot;Perfection.&quot;) return 100 elif realmsg == &quot;Michelle&quot; or realmsg == &quot;Lauren&quot; or realmsg == &quot;Veronica&quot;: print(&quot;At least wait a couple generations before reuse! Geez...&quot;) return 90 elif name == &quot;Kendall&quot;: print(&quot;Good to know...&quot;) return 100 elif realmsg == &quot;Ryan&quot; or realmsg == &quot;Alyssa&quot; or realmsg == &quot;Laila&quot;: print(&quot;だが断る！&quot;) return 0 elif realmsg == name: if narcissism == 1: print(&quot;You name both your son AND your daughter after yourself? nWouldn&#39;t that get confusing?&quot;) return 0 narcissism = 1 print(&quot;Yeesh, you want a kid named&quot; + realmsg + &quot;AND you&#39;re a narcissist?&quot;) return 50 else: print(&quot;I see...&quot;) return 80 elif fcheckval == 8: fr_invalretry(realmsg) if int(realmsg) == lucky: print(&quot;Way to go! It&#39;s your lucky day!&quot;) return 100 elif name == &quot;Drew&quot; and score &gt;= 900: print(&quot;You didn&#39;t get lucky. But you made the RNG so you win.&quot;) return 100 elif int(realmsg) == (lucky + 1) or int(realmsg) == (lucky - 1): print(&quot;Ah, so close! Not quite, though...&quot;) return 50 elif int(realmsg) &gt; lucky: print(&quot;You seem to have overshot just a bit! Too bad...&quot;) return 0 elif int(realmsg) &lt; lucky: print(&quot;You seem to have undershot a bit! Too bad...&quot;) return 0 else: print(&quot;Not quite! Sorry about that...&quot;) return 0 else: print(&quot;There seems to have been an error! Let&#39;s start over. n n-- n&quot;) nameselect() mc_prompts = [ &quot;Which season of SpongeBob is the best? na) 1 nb) 2 nc) 3 nd) 4 ne) 5 nf) 6 ng) 7 nh) 8 ni) 9 nj) 10 nk) 11 nl) 12 nm) 13&quot;, &quot;Which of these school subjects is the WORST? na) Math nb) Science nc) English nd) History ne) PE nf) Music/Fine Arts&quot;, &quot;Let&#39;s be honest: when did the Pokémon series REALLY start to decline? na) Generation 5 nb) Generation 6 nc) Generation 7 nd) Generation 8&quot;, &quot;Which of these ice cream flavors beats out the rest? na) Vanilla nb) Chocolate nc) Strawberry nd) Rainbow Sherbet ne) Mint Chocolate Chip nf) Cookies and Cream ng) Cotton Candy nh) Watermelon ni) Pralines and Cream nj) Reese&#39;s Peanut Butter Cup&quot;, &quot;Pick your favorite music genre (out of these): na) Pop nb) Rock nc) Country nd) Punk/Ska ne) Jazz nf) Classical ng) Lo-fi nh) Movie/Game Soundtracks ni) K-Pop&quot;, &quot;What is your favorite color? na) Red nb) Orange nc) Yellow nd) Green ne) Blue nf) Purple ng) Brown nh) Black ni) Pink nj) White nk) Clear&quot;, &quot;What kind of movie would you be most interested in watching? na) Action nb) Comedy nc) Horror nd) Rom-com ne) Drama nf) Musical&quot;, &quot;Which of these qualities is most important in a partner? na) Appearance nb) Personality nc) Intelligence nd) Values ne) All of the above&quot;, &quot;If an older man drank your drink after being asked to watch it nwhile you used the bathroom at a concert, would you confront him? na) Definitely nb) Maybe nc) Probably not nd) Definitely not ne) I&#39;d ask my date to confront him&quot;, &quot;Which kind of (common) pet would you prefer to own? na) Dog nb) Cat nc) Fish nd) Hampster/Guinea Pig ne) Bunny nf) Giraffe&quot;, &quot;How often do you usually shower? na) Once a day nb) More than once per day nc) Once every other day nd) Once a week ne) What is a shower?&quot;, &quot;What is the correct milkshake flavor? na) Vanilla nb) Chocolate nc) Strawberry nd) Oreo/Cookies &amp; Cream&quot;, &quot;It&#39;s a lazy day at home. No plans at the moment. What do you wear? na) Sweatshirt and sweatpants nb) Pajamas nc) Full outfit just in case nd) Birthday suit ne) Other&quot;, &quot;A hot stud you really like just asked for your number! What do you text? na) Something nonchalant nb) Something peppy and fun nc) Something to make him/her laugh nd) Something endearingly mean ne) Ghost the stud because of anxiety&quot;, &quot;When was the last time you cried? na) Today nb) This week nc) This month nd) This year ne) So long ago I lost track&quot; ] fr_prompts = [ &quot;What is your favorite food? (Pick a one-word food, please.)&quot;, &quot;How old are you? (Use numeric digits, please.)&quot;, &quot;What is your favorite number? (Use numeric digits, please.)&quot;, &quot;If you were to start a family, how many children would you have? (Use numeric digits, please.)&quot;, &quot;What is the largest age difference (in years) you&#39;re willing to look past in a relationship? n(Use numeric digits, please.)&quot;, &quot;You adopt a cat of unspecified gender! What do you call it?&quot;, &quot;Your son is born! What is his name?&quot;, &quot;Your daughter is born! What is her name?&quot;, &quot;Feeling lucky? Pick a number between 1 and 10...&quot; ] nameselect() print(&quot;Excellent! Your name has been saved anonymously to a public database. nErr, um...&quot;) print(&quot;Please select a gender! na) Male nb) Female nc) Other&quot;) gen_select = input() if gen_select == &quot;a&quot; or gen_select == &quot;Male&quot; or gen_select == &quot;male&quot;: gender = &quot;M&quot; print(&quot;Good to meet you then, big man!&quot;) elif gen_select == &quot;b&quot; or gen_select == &quot;Female&quot; or gen_select == &quot;female&quot;: gender = &quot;F&quot; print(&quot;Why, how do you do, m&#39;lady? nErr...ehem!&quot;) else: gender = &quot;O&quot; print(&quot;How curious...&quot;) def namescrew(): global fakename if name[0] == &quot;A&quot; and (gender == &quot;M&quot; or gender == &quot;O&quot;): fakename = &quot;AJar&quot; elif name[0] == &quot;A&quot; and gender == &quot;F&quot;: fakename = &quot;Aliciaptor&quot; elif name[0] == &quot;B&quot; and gender == &quot;M&quot;: fakename = &quot;Boristocrat&quot; elif name[0] == &quot;B&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Bailington&quot; elif name[0] == &quot;C&quot; and gender == &quot;M&quot;: fakename = &quot;Carlston&quot; elif name[0] == &quot;C&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Charlise&quot; elif name[0] == &quot;D&quot; and gender == &quot;M&quot;: fakename = &quot;Drevious&quot; elif name[0] == &quot;D&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Dremselle&quot; elif name[0] == &quot;E&quot; and gender == &quot;M&quot;: fakename = &quot;Ebbie&quot; elif name[0] == &quot;E&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Elvia&quot; elif name[0] == &quot;F&quot; and gender == &quot;M&quot;: fakename = &quot;Felvis&quot; elif name[0] == &quot;F&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Freaky&quot; elif name[0] == &quot;G&quot; and gender == &quot;M&quot;: fakename = &quot;Gooby&quot; elif name[0] == &quot;G&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Glorbis&quot; elif name[0] == &quot;H&quot; and gender == &quot;M&quot;: fakename = &quot;Harvrey&quot; elif name[0] == &quot;H&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Helenena&quot; elif name[0] == &quot;I&quot; and gender == &quot;M&quot;: fakename = &quot;Inglo&quot; elif name[0] == &quot;I&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Ingla&quot; elif name[0] == &quot;J&quot; and gender == &quot;M&quot;: fakename = &quot;Jeano&quot; elif name[0] == &quot;J&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Jacquavia&quot; elif name[0] == &quot;K&quot; and gender == &quot;M&quot;: fakename = &quot;Klevin&quot; elif name[0] == &quot;K&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Kraseche&quot; elif name[0] == &quot;L&quot; and gender == &quot;M&quot;: fakename = &quot;Levat&quot; + randv + &quot;te&quot; elif name[0] == &quot;L&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;L&quot; + randv + &quot;rvenza&quot; elif name[0] == &quot;M&quot; and gender == &quot;M&quot;: fakename = &quot;Mor&quot; + randv + &quot;svo&quot; elif name[0] == &quot;M&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Marv&quot; + randv + &quot;na&quot; elif name[0] == &quot;N&quot; and gender == &quot;M&quot;: fakename = &quot;Nels&quot; + randv + &quot;rlo&quot; elif name[0] == &quot;N&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Neebl&quot; + randv elif name[0] == &quot;O&quot; and gender == &quot;M&quot;: fakename = &quot;Orth&quot; + randv + &quot;to&quot; elif name[0] == &quot;O&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Orl&quot; + randv + &quot;va&quot; elif name[0] == &quot;P&quot; and gender == &quot;M&quot;: fakename = &quot;Pl&quot; + randv + &quot;plo&quot; elif name[0] == &quot;P&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Pro&quot; + randv + &quot;da&quot; elif name[0] == &quot;Q&quot; and gender == &quot;M&quot;: fakename = &quot;Qual&quot; + randv + &quot;cov&quot; elif name[0] == &quot;Q&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Quiz&quot; + randv + &quot;ll&quot; elif name[0] == &quot;R&quot; and gender == &quot;M&quot;: fakename = &quot;R&quot; + randv + &quot;llapso&quot; elif name[0] == &quot;R&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Rop&quot; + randv + &quot;relle&quot; elif name[0] == &quot;S&quot; and gender == &quot;M&quot;: fakename = &quot;Sl&quot; + randv + &quot;cco&quot; elif name[0] == &quot;S&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Slo&quot; + randv + &quot;na&quot; elif name[0] == &quot;T&quot; and gender == &quot;M&quot;: fakename = &quot;Tr&quot; + randv + &quot;lbo&quot; elif name[0] == &quot;T&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Test&quot; + randv + &quot;ca&quot; elif name[0] == &quot;U&quot; and gender == &quot;M&quot;: fakename = &quot;Ulyss&quot; + randv + &quot;s&quot; elif name[0] == &quot;U&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Urs&quot; + randv + &quot;loa&quot; elif name[0] == &quot;V&quot; and gender == &quot;M&quot;: fakename = &quot;Volt&quot; + randv + &quot;gio&quot; elif name[0] == &quot;V&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Ver&quot; + randv + &quot;nclessa&quot; elif name[0] == &quot;W&quot; and gender == &quot;M&quot;: fakename = &quot;Welch&quot; + randv + &quot;llo&quot; elif name[0] == &quot;W&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Wr&quot; + randv + &quot;nna&quot; elif name[0] == &quot;X&quot; and gender == &quot;M&quot;: fakename = &quot;Xan&quot; + randv + &quot;llo&quot; elif name[0] == &quot;X&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Xandra&quot; elif name[0] == &quot;Y&quot; and gender == &quot;M&quot;: fakename = &quot;Yos&quot; + randv + &quot;shi&quot; elif name[0] == &quot;Y&quot; and (gender == &quot;F&quot; or gender == &quot;O&quot;): fakename = &quot;Yarr&quot; + randv + &quot;ppa&quot; elif name[0] == &quot;Z&quot; and gender == &quot;M&quot;: fakename = &quot;Zoom&quot; + randv + &quot;llo&quot; else: fakename = &quot;Zerkl&quot; + randv + &quot;va&quot; print(&quot;Okay, &quot; + name + &quot;, I think it&#39;s time for us to begin the survey.&quot;) def question1(): print(mc_prompts[int(mc_select[0])]) global quesval quesval = 1 global mcheckval mcheckval = mc_select[0] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question1() def question2(): print(mc_prompts[int(mc_select[1])]) global quesval quesval = 2 global mcheckval mcheckval = mc_select[1] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question2() def question3(): print(mc_prompts[int(mc_select[2])]) global quesval quesval = 3 global mcheckval mcheckval = mc_select[2] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question3() def question4(): print(mc_prompts[int(mc_select[3])]) global quesval quesval = 4 global mcheckval mcheckval = mc_select[3] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question4() def question5(): print(mc_prompts[int(mc_select[4])]) global quesval quesval = 5 global mcheckval mcheckval = mc_select[4] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question5() if score &lt;= 250: print(&quot;You really know how to answer opinion questions wrong, huh? nLet&#39;s hope this doesn&#39;t continue...&quot;) def question6(): print(mc_prompts[int(mc_select[5])]) global quesval quesval = 6 global mcheckval mcheckval = mc_select[5] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question6() def question7(): print(mc_prompts[int(mc_select[6])]) global quesval quesval = 7 global mcheckval mcheckval = mc_select[6] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question7() def question8(): print(mc_prompts[int(mc_select[7])]) global quesval quesval = 8 global mcheckval mcheckval = mc_select[7] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question8() def question9(): print(mc_prompts[int(mc_select[8])]) global quesval quesval = 9 global mcheckval mcheckval = mc_select[8] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question9() def question10(): print(mc_prompts[int(mc_select[9])]) global quesval quesval = 10 global mcheckval mcheckval = mc_select[9] mc_question() global scorechange scorechange = mc_check() global score score += scorechange question10() mcpoints = score mcscore = str(float(f&#39;{(mcpoints / 10):.1f}&#39;)) namescrew() print(&quot;That concludes the multiple choice portion of this quiz!&quot;) print(&quot;Alright, &quot; + fakename + &quot;, just five more free response questions to go.&quot;) print(&#39;Huh? What do you mean your name isn &#39;t &quot;&#39; + fakename + &#39;&quot;? What is it, then?&#39;) nmae2 = input() name2 = nmae2.capitalize() print(&quot;Ohh, it was &quot; + name2 + &quot;...&quot;) if name2 != name: print(&quot;Are you sure? That doesn&#39;t sound quite right...&quot;) elif name2 == name: print(&quot;Hah! I knew it started with &quot; + name[0] + &quot;!&quot;) print(&quot;Sorry about that, pal! Let&#39;s go ahead and continue. nSay whatever you want! Just make sure to answer honestly.&quot;) def question11(): print(fr_prompts[int(fr_select[0])]) global quesval quesval = 11 global fcheckval fcheckval = fr_select[0] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question11() def question12(): print(fr_prompts[int(fr_select[1])]) global quesval quesval = 12 global fcheckval fcheckval = fr_select[1] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question12() def question13(): print(fr_prompts[int(fr_select[2])]) global quesval quesval = 13 global fcheckval fcheckval = fr_select[2] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question13() def question14(): print(fr_prompts[int(fr_select[3])]) global quesval quesval = 14 global fcheckval fcheckval = fr_select[3] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question14() def question15(): print(fr_prompts[int(fr_select[4])]) global quesval quesval = 15 global fcheckval fcheckval = fr_select[4] fr_question() global scorechange scorechange = fr_check() global score score += scorechange question15() frpoints = score - mcpoints frscore = str(float(f&#39;{(frpoints / 5):.1f}&#39;)) finalfloat = (score / 15) finalscore = str(float(f&#39;{finalfloat:.1f}&#39;)) def finalsheet(): print(&quot; n~~~ n n&quot; + name + &quot;: n tMultiple choice score: &quot; + mcscore + &quot;%. n tFree response score: &quot; + frscore + &quot;%. n tFinal score: &quot; + finalscore + &quot;%.&quot;) print(&quot; nAlright, that concludes the survey! Thank you for your patience.&quot;) if youloseidiot == 1: print(&quot;Unfortunately...&quot;) print(&quot;You have defied me with excessive frequency. nYou&#39;ll have to try the quiz again.&quot;) youloseidiot = 0 score = 0 nameselect() if name == &quot;Kendall&quot;: print(&quot;You scored 100.0%. More than 100.0%. Of course you do. nYes, it&#39;s scored. I already spoiled that. nYou really promise forever?&quot;) forever = input() if forever in affirmative: print(&quot;I love you.&quot;) elif forever in negative: print(&quot;Oh...I see...&quot;) else: print(&quot;I&#39;ll give you the benefit of the doubt and say it was a typo...&quot;) elif name == &quot;Drew&quot; and gender == &quot;M&quot; and score &gt;= 1350: print(&quot;Good job testing. The final score was &quot; + finalscore + &quot;%.&quot;) if finalfloat &lt; 100.0: print(&quot;Those point losses had better be from VSCode errors...&quot;) elif gender == &quot;M&quot; or gender == &quot;O&quot;: print(&quot;Based on your results, we will calculate your eligibility to serve THE MASTER. nTHE MASTER has certain criteria he wishes to see met.&quot;) print(&quot;...?&quot;) print(&quot;You&#39;re confused? What do you mean? nWas it not clear that this was your eligibility interview? nYou need to do better research.&quot;) print(&quot;Anyway, here comes your score...&quot;) print(finalscore + &quot;%!&quot;) if finalfloat == 100.0: print(&quot;WE HAVE DONE IT! We have found the perfect candidate! nTHE MASTER shall feed on your willingness to contribute. nYou shall make the preparations. nYou shall find salvation in serving him. nY u i h o e h m nI t m . . nERROR nE R R n~~~G~N~I~H~C~T~A~W~~S~I~~E~H~~~&quot;) nameselect() elif finalfloat &gt;= 80.0: print(&quot;Excellent work. THE MASTER will be happy to work with you. nFind some way to fix those errors, though, please...&quot;) elif finalfloat &gt;= 60.0: print(&quot;Your score is low enough to displease THE MASTER. nYou would have to be significantly more pleasant in-person to win him over. nI am very sorry, but please consider your eligibility low...&quot;) elif finalfloat &lt; 60.0: print(&quot;You are foolish for thinking you are worthy of standing in his presence. nStay out of THE MASTER&#39;s sight, or your thoughtlessness will be punished.&quot;) elif gender == &quot;F&quot;: print(&quot;Based on your results, we will calculate your eligibility to wed THE MASTER. nTHE MASTER may yet have found his bride after the long search. nIf only THE MASTER could see your live countenance.&quot;) print(&quot;...?&quot;) print(&quot;You&#39;re confused? What do you mean? nWas it not clear that this was your eligibility interview? nYou need to do better research.&quot;) print(&quot;Anyway, here comes your score...&quot;) print(finalscore + &quot;%!&quot;) if finalfloat == 100.0: print(&quot;WE HAVE DONE IT! We have found the perfect bride! nTHE MASTER shall feed on your willingness to contribute. nYou shall carry on his lineage. nYou shall find salvation in serving him. nY u i h o e h m nI t m . . nERROR nE R R n~~~G~N~I~H~C~T~A~W~~S~I~~E~H~~~&quot;) nameselect() elif finalfloat &gt;= 80.0: print(&quot;You are certainly a candidate with such a high score. nTHE MASTER will keep you in mind...&quot;) elif finalfloat &gt;= 60.0: print(&quot;Unfortunately, THE MASTER&#39;s standards for a bride are higher than you fit. nYou would have to be awfully attractive to win him over. nI am very sorry, ma&#39;am.&quot;) elif finalfloat &lt; 60.0: print(&quot;You are foolish for thinking you are worthy of standing in his presence. nStay out of THE MASTER&#39;s sight, or your thoughtlessness will be punished.&quot;) print(&quot;Do you wish to see a written report of your results?&quot;) reportconsent = input() if reportconsent in affirmative: print(&quot;Understood. Printing...&quot;) finalsheet() elif reportconsent in negative: print(&quot;Understood. Have a nice day.&quot;) else: print(&quot;Response unfamiliar. Presuming REPORT = FALSE. Have a nice day.&quot;) . Welcome to a deeply important survey! It will consist of 15 questions, 10 multiple choice and five free response. It should be easy. Be sure to answer one of the provided options for multiple choice questions. Put whatever you want for open-ended questions, but answer honestly! Before we begin, what is your first name? John... John? Eh, could&#39;ve been better. Excellent! Your name has been saved anonymously to a public database. Err, um... Please select a gender! a) Male b) Female c) Other Good to meet you then, big man! Okay, John, I think it&#39;s time for us to begin the survey. What is the correct milkshake flavor? a) Vanilla b) Chocolate c) Strawberry d) Oreo/Cookies &amp; Cream You chose option &#39;B.&#39; The ice cream classic...milkshake-ified. What is your favorite color? a) Red b) Orange c) Yellow d) Green e) Blue f) Purple g) Brown h) Black i) Pink j) White k) Clear You chose option &#39;K.&#39; What do you mean it&#39;s not a color? How close-minded. Let&#39;s be honest: when did the Pokémon series REALLY start to decline? a) Generation 5 b) Generation 6 c) Generation 7 d) Generation 8 You chose option &#39;D.&#39; The box legendary is a dog with a sword in its mouth. What kind of movie would you be most interested in watching? a) Action b) Comedy c) Horror d) Rom-com e) Drama f) Musical You chose option &#39;A.&#39; *Explosion* *Laser* *Michael Bay* How often do you usually shower? a) Once a day b) More than once per day c) Once every other day d) Once a week e) What is a shower? You chose option &#39;A.&#39; Perfectly reasonable. When was the last time you cried? a) Today b) This week c) This month d) This year e) So long ago I lost track You chose option &#39;D.&#39; Some pretty solid restraint you&#39;ve got there. If an older man drank your drink after being asked to watch it while you used the bathroom at a concert, would you confront him? a) Definitely b) Maybe c) Probably not d) Definitely not e) I&#39;d ask my date to confront him You chose option &#39;A.&#39; Try not to get into TOO much trouble... Which season of SpongeBob is the best? a) 1 b) 2 c) 3 d) 4 e) 5 f) 6 g) 7 h) 8 i) 9 j) 10 k) 11 l) 12 m) 13 You chose option &#39;Vscode error.&#39; That&#39;s an invalid response! Make sure to pick one of the letters. Which season of SpongeBob is the best? a) 1 b) 2 c) 3 d) 4 e) 5 f) 6 g) 7 h) 8 i) 9 j) 10 k) 11 l) 12 m) 13 You chose option &#39;I.&#39; Yes, the revival! Points for precision! Well done. Which of these ice cream flavors beats out the rest? a) Vanilla b) Chocolate c) Strawberry d) Rainbow Sherbet e) Mint Chocolate Chip f) Cookies and Cream g) Cotton Candy h) Watermelon i) Pralines and Cream j) Reese&#39;s Peanut Butter Cup You chose option &#39;E.&#39; Sometimes, it just hits the spot. Pick your favorite music genre (out of these): a) Pop b) Rock c) Country d) Punk/Ska e) Jazz f) Classical g) Lo-fi h) Movie/Game Soundtracks i) K-Pop You chose option &#39;E.&#39; So groovy. That concludes the multiple choice portion of this quiz! Alright, Jeano, just five more free response questions to go. Huh? What do you mean your name isn&#39;t &#34;Jeano&#34;? What is it, then? Ohh, it was John... Hah! I knew it started with J! Sorry about that, pal! Let&#39;s go ahead and continue. Say whatever you want! Just make sure to answer honestly. Feeling lucky? Pick a number between 1 and 10... 7, huh...? Ah, so close! Not quite, though... What is your favorite food? (Pick a one-word food, please.) Spaghetti, huh...? Hmm... That doesn&#39;t sound too bad... If you were to start a family, how many children would you have? (Use numeric digits, please.) 2, huh...? Why not give &#39;em a friend? What is the largest age difference (in years) you&#39;re willing to look past in a relationship? (Use numeric digits, please.) 10, huh...? Now we&#39;re getting into criminal range... You adopt a cat of unspecified gender! What do you call it? Tony, huh...? Couldn&#39;t pick a better name myself! Alright, that concludes the survey! Thank you for your patience. Based on your results, we will calculate your eligibility to serve THE MASTER. THE MASTER has certain criteria he wishes to see met. ...? You&#39;re confused? What do you mean? Was it not clear that this was your eligibility interview? You need to do better research. Anyway, here comes your score... 83.3%! Excellent work. THE MASTER will be happy to work with you. Find some way to fix those errors, though, please... Do you wish to see a written report of your results? Understood. Printing... ~~~ John: Multiple choice score: 86.0%. Free response score: 78.0%. Final score: 83.3%. .",
            "url": "https://drewreed2005.github.io/realdrew/survey/",
            "relUrl": "/survey/",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Week 1 Notes",
            "content": "Commands from &quot;Python Hello&quot; . In this section, I will put the commands found in &quot;Python Hello&quot; in terms that are easy for someone who has been coding for, say, one week to understand. . Print and Static Text . The &quot;print&quot; command can be used to output static text. . print(&quot;This is the static text produced.&quot;) print(&quot;It can be found within the quotation marks in the parentheses.&quot;) . This is the static text produced. It can be found within the quotation marks in the parentheses. . You can also add variables to the printed static text with the &quot;+&quot; symbol. . x = 5 + 3 print(&quot;The sum of 5 and 3 is &quot; + str(x) + &quot;.&quot;) . The sum of 5 and 3 is 8. . This is just scratching the surface. . &quot;if&quot; and &quot;else&quot; . The &quot;if&quot; and &quot;else&quot; commands can make certain things happen under certain conditions. . Instead of giving a copius amount of examples, just know that anything you can make happen unconditionally with Python can be restricted to occur under only certain situations with &quot;if.&quot; How to handle the remaining cases is determined by &quot;else,&quot; which doesn&#39;t necessarily have to be present. . x = 4 * 3 # Remember to use a colon at the end of the &quot;if&quot; statement to activiate the condition. if x == 12: print(&quot;Four times three is 12.&quot;) else: print(&quot;Something went wrong.&quot;) # We use &quot;else&quot; above for when x is equal to something different. . Four times three is 12. . But why does it matter that we can do that? How can &#39;x&#39; be equal to anything other than 12 with the set factors of 3 and 4? . Input . Input allows the person interacting with the code to type in a custom response to a prompt. . from tkinter import Y x = input(&quot;What is your favorite number?&quot;) # Fastpages does not allow one to input a response in the actual page. # For the sake of demonstration, &#39;x&#39; has been set to equal 5. # The syntax looks like this if you want a separately printed question and response. print(&quot;What is your other favorite number?&quot;) y = input() # The variable &#39;y&#39; has been set to equal 3. # Now the &quot;if&quot; command will vary based on what we said. z = int(x) * int(y) if z == 12: print(&quot;The product of your favorite numbers is 12.&quot;) else: print(&quot;The product of your favorite numbers is not 12.&quot;) . What is your other favorite number? The product of your favorite numbers is not 12. . Extra Learning . Here are some extra commands and functions I found out about on my own. They can be very helpful in tandem with the rest of these functions. . &quot;elif&quot; . This adds an additional condition to an &quot;if&quot; command. It goes between &quot;if&quot; and &quot;else&quot; vertically. . x = input(&quot;What is your favorite number?&quot;) y = input(&quot;What is your second favorite number?&quot;) z = int(x) * int(y) if z == 12: print(&quot;The product of your favorite numbers is 12.&quot;) elif z == 15: print(&quot;The product of your favorite numbers is 15.&quot;) else: print(&quot;The product of your favorite numbers is not 12 or 15.&quot;) . The product of your favorite numbers is 15. . Algebra . All the algebra stuff above was not taught in the lesson. I figured it out on my own. . &quot;+&quot; = Addition | &quot;-&quot; = Subtraction | &quot;*&quot; = Multiplication | &quot;/&quot; = Division | &quot;&gt;&quot; or &quot;&lt;&quot; = Less Than or Greater Than (often for &#39;if&#39; conditions) | &quot;=&quot; = Equating a value/string | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/26/week1learning.html",
            "relUrl": "/2022/08/26/week1learning.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Day 5",
            "content": "More Hacks from This Week . Remember Day 4? Maybe not. Here were the three things I set out to do by the end of today: . Create a page from a “.docx” file with Google Docs. | A page with vocabulary and notes from the “Psychology and the Good Life” speech by Laurie Santos. | (Optional, not for class) A fun little survey idea I had. | . Let’s go over what I ended up doing. . Psychology and the Good Life Notes . I was initially planning to focus on vocabulary presented in the video and how to apply it, but it ended up being almost completely devoid of any particular “vocabulary.” Instead, though I did have a definition for the “GI Joe Fallacy,” I ended up just taking some general notes from the video. . The whole reason for the “vocabulary” aspect was a certain note in various Hacks and objectives about using my site to collect and define vocabulary. . I hadn’t really considered that I already basically did that with Python in my notes from about day ago. I think I’m safe to put that goal to rest for now. . Trying .docx Files . The formatting of the notes is quite visibly different. This is because it was initially a Google Doc converted to a Microsoft Word file. To fit a certain Hack, I put it in the _word folder and let it automatically become a post. . The only problem with this is that I am unable to take it out of the “Posts” list as far as I’m aware. I cannot add front matter to the .docx file so I cannot use hide: true. Otherwise, the formatting is unique and interesting. I’m not sure if I’d willingly go back to this format in the future. . Change of Plans . Initially, I planned on making the Day 5 post a Word document rather than the Focus and Habits notes, but ultimately it made more sense to take notes in a format I’m more used to. Disregard what I implied in my Day 4 conclusion. . This Weekend? . It was a busy day, so I never got to make the for-fun survey. I’ll probably mess around over the weekend and do it. . Since I started from scratch this Monday, there’s no precedent set for posting on weekends. Do I plan on making Day 6 on Saturday and 7 on Sunday? . No. I’ve spent time considering it, but especially after what was discussed in the Focus and Habits video, I’d like to balance my time to spend most of my weekends with friends and family rather than doing gratuitous amounts of school work. . I’ll make my Review Ticket to show everything I’ve done as soon as possible and be done there. . See you next week! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/26/day5.html",
            "relUrl": "/daily/2022/08/26/day5.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Focus And Habits Notes",
            "content": "Laurie Santos: Psychology and the Good Life . At the Aspen Ideas Festival . Taken from a .docx file . Students are often so stressed and busy that they feel they lack the time to do things that supplement their education like reading . At Yale, around a third are so depressed “it’s difficult to function,” 40% report feeling hopeless and over 60% report crippling anxiety . | . | Including healthy habits as a suggestion in a class syllabus managed to greatly increase interest in the class and actually was followed by Yale students . | About 50% of our happiness is not inherited; we have the power to affect 50% of our happiness if we set out to . | Life circumstances matter significantly less to our happiness than people think . People who have a terrible event occur to them tend to see more meaning in life . | . | Improving our happiness through behaviors (about 40% of happiness controlled by this) takes a lot of hard, consistent effort . | GI Joe Fallacy: Knowing is not half the battle, it’s a lot less; following through is more . | Our intuitions lie to us about what will make us happy . Having more money, for example, would increase our happiness because it generally means more stability, but the increase in happiness is not even close to linear as money increases . Happiness bump from $10k -&gt; $20k salary is vastly larger than $75k -&gt; $85k . | . | . | Prioritizing the people they care about is a very important part of living a happy life . People on a train asked to try to make a connection with a stranger on the train were much happier than those who were asked to keep to themselves . The solitude people would normally spend the time trying to do some work and failing to really accomplish anything, which led to frustration; those who talked with others took away something meaningful . | . | . | Helping others can greatly increase your happiness . A study showed that people who spent free money on themselves were much less happy both immediately and after a week than those who spent it on another . | . | Doing simple things to improve your physical health is significantly more effective at causing happiness than people realize . 30 minutes of cardio can have the same effect as taking Zoloft . | Getting proper sleep (high schoolers get 4-5 hours) can greatly improve mood, not just immune system . People getting as much sleep as high school students even for a short experimental time ended up having mood levels low enough to be considered clinically depressed . | . | . | One strong way to improve mood is to live more in the present rather than being absorbed by anxiety about the future . This also means staying in the moment when doing something unpleasurable rather than dreaming of a more pleasurable time . | Just being aware of your present situation helps you appreciate all the good . | Meditating even 10 minutes a day is enough to greatly improve your mood . | . | Prioritizing (leisure) time over money generally causes one to be happier . | . Now I have the knowledge…but this is far less than half the battle. . Ways I Can Improve my Mood (things I’m not already doing): . Pay more attention to friends and family, making sure to take advantage of opportunities to spend time together when possible . | Help others with things whenever possible . Will be a lot easier when WHAT Center starts . | . | Get back into an exercise routine, half an hour at least each day . | Set bedtime of 11:00 on days that homework allows, which will be easier to follow if I… . | Live in the moment to stay focused on less pleasurable things, like taking notes on a psychology video (ouch, sorry) . | When treating myself, focus on all of the enjoyable aspects about my situation . | .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/26/Focus-and-Habits-Notes.html",
            "relUrl": "/2022/08/26/Focus-and-Habits-Notes.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Day 4",
            "content": ". Some Fun Hacks . There are quite a few ways to express understanding of the learning this week through my site. This may be a blog, but it’s also a place for me to collect my thoughts. Maybe these thoughts will reflect the effort and devotion I have to this class. . I’m having fun. I don’t say it often. . Python Quiz . I technically finished the quiz at some point on Day 3, but Day 4 was when everything was finalized and certain “Python Hello” hack goals (percentage score) were met. . I wanted to go above and beyond “plagiar-inspiration,” so anything I was “plagiar-inspired” by has been edited to a degree to prove I understand the reason the functions behind it work. For example, the def command paired with question_and_response usually spat out a slightly different reaction to inputs, which I changed to fit the more casual, personal tone of my own quiz. . Obviously, every question from “Python Hello” has been changed, though the subject matter is the same. There are now five questions. At the beginning, instead of using the getpass.getuser command to call the quiz-taker by his or her often inaccurate system username, I make the quiz ask for the quiz-taker’s name directly, which will be reused throughout. . (If you name yourself “Drew,” the code knows who you must be…) . To show proper understanding if commands (as well as independent research on elif commands), I put a score check two questions before the end which detects your score and gives a completely different response depending on the current number of correct responses. . If you score more than 60.0% (4/5 or 5/5), the quiz determines that you have passed. Otherwise, you have failed. . The quiz is now out on the site, though it’s only the code and outputs for the correct inputs. . Messing with ‘_pages’ . Hey, look at the top bar of the site! Check out those two new categories: “Notes” and “Quizzes and More.” That’s right, these new pages link directly to relevant resources. Please look forward to seeing updates to these pages. . (“Quizzes and More” generally don’t work on the Fastpages site directly. They run perfectly well in VSCode.) . This was a Hack on one of the APCSP instruction pages. . Python Notes . In the “Notes” section, you can find a link to a page full of notes about Python, specifically commands taught on the “Python Hello” page. . Though I have already mostly proven my understanding of those teachings with my Python Quiz and its fairly fluent use of those resources, I figured this would be a good opportunity to complete one of the other Hacks: mix Markdown and Code in a Jupyter Notebooks post and use # in Code cells to add commentary to visible code. I made sure to do both of these things multiple times throughout the page. . Page Relocation . Instead of keeping the Python Quiz and Random Number Generator on the main page with the rest of these posts, I have moved them both to the “Quizzes and More” section. Feel free to access them with the provided hyperlinks. . Bash and Showing my Stuff . As instructed in class, I used Bash to show the tools I have downloaded. The page used to exclusively found through “Search,” but you can also find it linked here and in the “Quizzes and More” page. . Plan for Day 5 . Here is the main place for thought collection. There are a few Hacks I have not fulfilled that I want to make sure to tomorrow: . Create a page from a “.docx” file with Google Docs. Maybe I’ll make Day 5’s post with that format… | A page with vocabulary and notes from the “Psychology and the Good Life” speech by Laurie Santos. This can be put in the “Notes” section. | In free time for fun: just a little survey! Instead of using a ratio of questions to correct answers to score, it will be a multiple choice survey with different percent increases and decreases depending on which response sucks the least. I’ll go into the math more if I end up making it (probably this weekend, after Day 5; we can talk about it on Day 6). | . Thanks for reading! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/25/day4.html",
            "relUrl": "/daily/2022/08/25/day4.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "I've Got the Power",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Anaconda Check . conda list . # packages in environment at /Users/mister_dew/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Check . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/mister_dew/Library/Jupyter/kernels/bash javascript /Users/mister_dew/Library/Jupyter/kernels/javascript python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/mister_dew/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/25/bashstuff.html",
            "relUrl": "/2022/08/25/bashstuff.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Day 3",
            "content": "Squashing Bugs and New Ideas . After writing my daily post yesterday, I ended up working on making a quiz of my own (since it was listed under “Hacks” in the Python quiz page) and failed to make it work correctly. Because I did not understand the “input” Python function, all answers, correct or not, reacted as if they were incorrect. . With slightly more Python knowledge, I went to bed that night knowing I could definitely improve my old random number generator from Monday. So… . The Python Quiz . At first, yesterday, I started making a survey without even knowing it was a potential Hack for the week. The whole joke was going to be that it said there were no right or wrong answers, but only certain responses were “correct.” Just a little goofy thing. I wasn’t able to create the semi-diverse range of responses that would be based on anticipated answers because I was pretty tunnel-visioned into what was provided in that page. Later, I decided to do some independent research. . I then saw the tip to make a quiz about Python functions and reworked the survey. Plagiar-inspired by the Python quiz’s defined “question_and_answer” and “question_and_response” functions, I used the same basic template to make my own quiz that’s just a bit more personal. I decided to express my icnreasing fluency by asking for the user’s name (which is reused throughout the quiz), giving a status check halfway through the quiz, and determining whether or not the user failed based on their score. As was mentioned in the Hacks, I also used math to calculate the score percentage based on the ratio of correct answers to questions. . Work on this quiz is not quite finished. Please stay tuned for its full release. . The Random Number Generator . My random number generator can now be reset and retried as many times as the user wants. I decided, since I gave Python a defined identity the first time around, I would really lean into it by giving his dialogue a strange, quirky style. Like the first time, I also kept the option to generate a second random number for the user to get lucky. . However, this time, Python recognizes if the second generated number is the same as the first. As he says, he’ll share a secret with you if you manage to generate the same number twice…and no peeking in the code! . I even used some more complex math mixed with ‘if’ and ‘and’ functions to make Python give a special response if the two numbers are relatively close to each other, but not quite the same. . Have fun with that! You can access it right now. . What’s Coming Up? . I’m really just gonna focus on completing Hacks tasks from the APCSP fastpages as well as the Python quiz. As the RNG machine may imply, I have spent a minute or two minutes or half an hour or more messing with code for my own amusement, but as a fairly busy weekend approaches, I’ll make sure to buckle down. . More to come! Stay tuned… .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/24/day3.html",
            "relUrl": "/daily/2022/08/24/day3.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(prompt) msg = input() print(&quot;You said: &quot; + msg + &quot;.&quot;) return msg questions = 5 correct = 0 print(&quot;Hello! Welcome to Drew&#39;s super awesome (slightly plagiar-inspired) Python quiz!&quot;) print(&quot;You will be asked &quot; + str(questions) + &quot; questions about basic Python commands. All quiz responses should be in all lowercase letters.&quot;) print(&quot;Before we begin, what would you like me to call you?&quot;) bigboy = input() print(bigboy + &quot;? That&#39;s a cool name!&quot;) rsp = question_with_response(&quot;1. Let&#39;s start with the simplest function of all: how can you make Python display static text?&quot;) if rsp == &quot;print&quot;: print(&quot;That&#39;s right! Let&#39;s make things more interesting.&quot;) correct += 1 else: print(&quot;Not quite... The response we were looking for was &#39;print&#39;.&quot;) rsp = question_with_response(&quot;2. When using the &#39;if&#39; function to force a unique reaction for a specific scenario, which function lets you give a different response for ALL other answers?&quot;) if rsp == &quot;else&quot;: print(&quot;Good job! Let&#39;s continue...&quot;) correct += 1 else: print(&quot;Nope... Looks like you&#39;ll have to try something ELSE for that one.&quot;) rsp = question_with_response(&quot;3. This three-letter function can redefine a phrase to automate certain behaviors when used. What is it?&quot;) if rsp == &quot;def&quot;: print(&quot;Great job! Two more to go.&quot;) correct += 1 else: print(&quot;That&#39;s DEF-initely not it...&quot;) print(&quot;Let&#39;s see how you&#39;re doing so far, &quot; + bigboy + &quot;...&quot;) if correct == 3: print(&quot;Wow! 3/3! You&#39;re a natural. Let&#39;s get back to it.&quot;) elif correct == 2: print(&quot;2/3 isn&#39;t bad, you know. Get the next two right and you&#39;ll have a solid B minus!&quot;) elif correct == 1: print(&quot;1/3 isn&#39;t quite ideal, but it&#39;s better than nothing. Why not give these next two your best shot?&quot;) else: print(&quot;Really? None? ...I mean, you&#39;ve got two more chances to get some points on the board...&quot;) rsp = question_with_response(&quot;4. Which function allows the user to provide a custom response to a given prompt?&quot;) if rsp == &quot;input&quot;: print(&quot;That&#39;s right! You&#39;ve been using that the whole time, FYI.&quot;) correct += 1 else: print(&quot;Unfortunately, you seem to have INPUT an incorrect response.&quot;) rsp = question_with_response(&quot;5. The home stretch! To display a variable, for example, in printed static text, which symbol separates the variable from the rest of the quote?&quot;) if rsp == &quot;+&quot;: print(&quot;Nailed it!&quot;) correct += 1 elif rsp == &quot;plus&quot;: print(&quot;Nailed it!&quot;) correct += 1 else: print(&quot;Rough conclusion...definitely not a PLUS.&quot;) per_score = (correct / questions) * 100 print(bigboy + &quot;, you scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;! That&#39;s &quot; + str(per_score) + &quot;%.&quot;) if correct &lt; 4: print(&quot;Too bad, though! You needed at least 4 out of 5 (80.0&quot; + &quot;%&quot; + &quot;) of the problems correct to pass. Why not reload and try again?&quot;) elif correct == 4: print(&quot;One mistake is perfectly okay! You still managed to pass this quiz. Congratulations!&quot;) else: print(&quot;You managed to pass with flying colors! A perfect score! Why didn&#39;t you make this quiz, then?&quot;) if bigboy == &quot;Drew&quot; and correct == 5: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) elif bigboy == &quot;drew&quot;: print(&quot;Whadduya mean you did make this? You&#39;re THAT Drew? What a coincidence.&quot;) . Hello! Welcome to Drew&#39;s super awesome (slightly plagiar-inspired) Python quiz! You will be asked 5 questions about basic Python commands. All quiz responses should be in all lowercase letters. Before we begin, what would you like me to call you? ? That&#39;s a cool name! 1. Let&#39;s start with the simplest function of all: how can you make Python display static text? You said: . Not quite... The response we were looking for was &#39;print&#39;. 2. When using the &#39;if&#39; function to force a unique reaction for a specific scenario, which function lets you give a different response for ALL other answers? You said: . Nope... Looks like you&#39;ll have to try something ELSE for that one. 3. This three-letter function can redefine a phrase to automate certain behaviors when used. What is it? You said: . That&#39;s DEF-initely not it... Let&#39;s see how you&#39;re doing so far, ... Really? None? ...I mean, you&#39;ve got two more chances to get some points on the board... 4. Which function allows the user to provide a custom response to a given prompt? You said: . Unfortunately, you seem to have INPUT an incorrect response. 5. The home stretch! To display a variable, for example, in printed static text, which symbol separates the variable from the rest of the quote? You said: . Rough conclusion...definitely not a PLUS. , you scored 0/5! That&#39;s 0.0%. Too bad, though! You needed at least 4 out of 5 (80.0%) of the problems correct to pass. Why not reload and try again? .",
            "url": "https://drewreed2005.github.io/realdrew/2022/08/23/pythonworkweek1.html",
            "relUrl": "/2022/08/23/pythonworkweek1.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Day 2",
            "content": "Independent Endeavors . It takes a lot of investment in a class for me to go out of my way to apply my knowledge in ways not enforced by the teacher or class. Maybe computer science is my thing. . Research . Over summer, I spent some time looking over the things you could do with Python. One thing I always wanted to make for some strange reason was a random number generator. . From a mathematical standpoint, I have always been fascinated by the concept of probability. Given things like the butterfly effect and the way that various microscopic events and processes manipulate free will, even humans cannot truly create randomness. Unfortunately, computers really can’t either, but they can do their very best to replicate it. . I looked around on Google in my very minimal free time and found the “rand.integer” and “rand.range” commands. This is enough to create the basic RNG code I set out to. . What’s the point of a random number generator? . Ultimately, I want to use this RNG to add an element of unpredictability to my site. Maybe, after setting a variable, using “If” commands will allow me to create certain images, phrases, words, etc. based on which number is generated. Messing with which numbers do what and the possible range of generated numbers could make certain events more likely than others. . I also really like the concept of adding little Easter eggs for people who interact with the site. Maybe if you click on certain pages and get lucky, something goofy or unexpected appears. . There’s just a lot of fun to be had with unpredictability. . Current Obstacles . So I made a random number generator that works perfectly in the code of my website…but not on the website itself. . When the page reloads, the generated numbers stay the same. I think the only way I can make the generator work as intended is if I make a button to click and let it run a new generation. I don’t know how to do this at the moment, and a small amount of research hasn’t led to much. . More to come! .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/23/day2.html",
            "relUrl": "/daily/2022/08/23/day2.html",
            "date": " • Aug 23, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Random Number Generator",
            "content": "import random your_num = random.randint(0,255) pys_num = random.randint(0, 255) # Using random.int to create a range of exactly 256 values (including zero) that can be selected. affirmative = [&#39;yes&#39;, &#39;Yes&#39;, &#39;yeah&#39;, &#39;Yeah&#39;, &#39;yup&#39;, &#39;Yup&#39;, &#39;y&#39;, &#39;Y&#39;, &#39;yea&#39;, &#39;Yea&#39;, &#39;mhm&#39;, &#39;Mhm&#39;, &#39;yep&#39;, &#39;Yep&#39;, &#39;Affirmative,&#39; &#39;affirmative&#39;, &#39;sure&#39;, &#39;Sure&#39;, &#39;alright&#39;, &#39;Alright&#39;, &#39;okay&#39;, &#39;Okay&#39;, &#39;OK&#39;, &#39;ok&#39;, &#39;Ok&#39;] negative = [&#39;No&#39;, &#39;no&#39;, &#39;Nope&#39;, &#39;nope&#39;, &#39;N&#39;, &#39;n&#39;, &#39;Nah&#39;, &#39;nah&#39;, &#39;nuh-uh&#39;, &#39;Nuh-uh&#39;, &#39;negative&#39;, &#39;Negative&#39;] print(&quot;Howdy there! I&#39;m Python. I can do lots of cool stuff.&quot;) print(&quot;Before I can generate a random number for you, you have to give me permission to do so.&quot;) print(&quot;May I generate a number for you?&quot;) consent = input() if consent in affirmative: print(&quot;Okay! Your number is... &quot; + str(your_num) + &quot;!&quot;) print(&quot;Now, I can&#39;t actually see what number I just gave you.&quot;) print(&quot;I can generate another one, and there&#39;s a one in 256 chance that it&#39;s the same.&quot;) print(&quot;I&#39;ll tell you a secret if it is.&quot;) print(&quot;Do you want me to generate a new one?&quot;) consent2 = input() if consent in affirmative: print(&quot;Cool! And my number is...&quot;) print(str(pys_num) + &quot;!&quot;) if pys_num == your_num: print(&quot;Golly! Looks like I&#39;d better hold up my end of the bargain. My secret is...&quot;) print(&quot;I&#39;m guilty of several misdemeanors and felonies, the latter primarily.&quot;) print(&quot;Nobody ever thinks a computer can do that.&quot;) print(&quot;The guy that made this random number generator keeps getting harrassed by police for stunts I pulled.&quot;) print(&quot;It&#39;s hilarious!&quot;) print(&quot;You&#39;re gonna keep that little factoid a secret if you know what&#39;s best for you. :)&quot;) elif (pys_num - your_num) &lt; 11 and (pys_num - your_num) &gt; 0: print(&quot;Ah! Close, but not close enough to learn my secret. Try again!&quot;) elif (your_num - pys_num) &lt; 11 and (your_num - pys_num) &gt; 0: print(&quot;Ah! Close, but not close enough to learn my secret. Try again!&quot;) else: print(&quot;Welp! Looks like my secret is safe for now...&quot;) elif consent in negative: print(&quot;That&#39;s alright! I hope you enjoyed your number.&quot;) else: print(&quot;I&#39;m confused, so I&#39;ll just leave you be...&quot;) elif consent in negative: print(&quot;Alrighty then! Come back if you change your mind.&quot;) else: print(&quot;Uhhh...okay? I&#39;ll take that as a no.&quot;) . Howdy there! I&#39;m Python. I can do lots of cool stuff. Before I can generate a random number for you, you have to give me permission to do so. May I generate a number for you? Okay! Your number is... 65! Now, I can&#39;t actually see what number I just gave you. I can generate another one, and there&#39;s a one in 256 chance that it&#39;s the same. I&#39;ll tell you a secret if it is. Do you want me to generate a new one? Cool! And my number is... 45! Welp! Looks like my secret is safe for now... .",
            "url": "https://drewreed2005.github.io/realdrew/python/2022/08/22/randomnumber.html",
            "relUrl": "/python/2022/08/22/randomnumber.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Day 1*",
            "content": "The Early Trouble . The first days . Figuring it was homework to do so, I downloaded all of the programs listed in the Tools and Setup page and saved the fastpages part for the next day. This step would be a permanent help, even after the fastpages site had to be reset. . The problem that would lead to the loss of my admittedly little progress was evident from the very beginning: that Thurday, even after following all the steps listed in the first pull request, I had either forgotten to resolve the request or something had prevented me from doing so. Either way, by the next day, it seemed that there was no way to resolve the request, causing my website to look far less professional than other students’ I had seen. It’s surprising how much a lack of proper UI can make a site go from a 2022 professional business site to a 2008 fan site. . Showing off . I tried to make some bold and italicized text in my About Me section, but the site bug made it impossible for the link redirects to work. Headers worked on the home page but subheaders did not. A notebook post making use of the Python “print” command was created as well, but the same issue with the About Me page existed. . The Solution . Two words: Thanos snap. . Well, more accurately, none of my previous repository history had been deleted, but I did have to start the fastpages creation process from scration. . There’s a reason I called it a Thanos snap, though: the fastpages issues were competely separate from the rest of the work I had put into downloading the tools. This means that only the time I had put into the initial drew2 fastpages setup was a waste. That time was very quickly made up; setup took noticeably longer. . Now, everything looks perfect. Turns out the problem was, as implied earlier, pertaining to the unresolved pull request from the very beginning. An unresolvable issue was found in one of the Jupyter files (still not sure exacly what the deal was with that) but it doesn’t matter now, this site is pure and new and is brimming with potential. . Why not bring over the previous progress to this new site? . That would be because my old edits were mostly cries for help to the github gods to fix my broken website. It would be a little bit strange to have that on a perfectly sound, as-intended site. . Plus, with just this content, I already have a lot more done. I have a lot more progress to talk about and a lot of hindsight to document. Might as well start documentation from scratch along with the site. . Anticipations . It looks like we’ll expand upon our knowledge of Python this week. I’m exicted to use it to do funny things. . I’d really like to use a random number generator to make a page on my website which is different every time you load it. I’m not exactly sure how yet, but I’m sure it’s possible. Why not boost my aspirations? .",
            "url": "https://drewreed2005.github.io/realdrew/daily/2022/08/22/post1.html",
            "relUrl": "/daily/2022/08/22/post1.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://drewreed2005.github.io/realdrew/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post20": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://drewreed2005.github.io/realdrew/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Drew panicked over the course of four days because his fastpages website would not load correctly. Commits worked (vaguely) but it was difficult to present edits to pages which only showed 404 errors. . After starting from scratch, it seems like the website is good to go. . He is now playing with Python because it makes him feel like God. . (Formerly known as “mister-dew”, commonly misconceived as “misty-dew” by Mr. Mortensen.) .",
          "url": "https://drewreed2005.github.io/realdrew/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "See various learning materials below. . Week 1 Python Notes . Focus and Habits Notes . More to come! .",
          "url": "https://drewreed2005.github.io/realdrew/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Quizzes and More",
          "content": "Random Number Generator . Week 1 Python Quiz . Bash and My Tools . More to come! .",
          "url": "https://drewreed2005.github.io/realdrew/more/",
          "relUrl": "/more/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://drewreed2005.github.io/realdrew/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}